<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6快速入门</title>
    <url>/2021/01/10/ES6%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="ES6快速入门"><a href="#ES6快速入门" class="headerlink" title="ES6快速入门"></a>ES6快速入门</h1><p>具体使用参考  <a href="https://es6.ruanyifeng.com/#docs/let">ES6参考文档</a></p>
<h2 id="1-let-和-const"><a href="#1-let-和-const" class="headerlink" title="1. let 和 const"></a>1. let 和 const</h2><h3 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h3><p>ES6 新增了  <code>let</code>  命令，用来声明变量。它的用法类似于  <code>var</code>，但是所声明的变量，只在  <code>let</code>  命令所在的代码块内有效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p><strong>不存在变量提升</strong></p>
<p>ES6以前 使用 var 关键字声明变量，会有变量提升。let 不会有变量提升。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><strong>暂时性死区</strong></p>
<p>只要块级作用域内存在  <code>let</code>  命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">&#x27;abc&#x27;</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，存在全局变量  <code>tmp</code>，但是块级作用域内<code>let</code>又声明了一个局部变量<code>tmp</code>，导致后者绑定这个块级作用域，所以在<code>let</code>声明变量前，对<code>tmp</code>赋值会报错。</p>
<p><strong>不允许重复声明</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>const 和 let 二者都是块级作用域。 {} 内的代码块即为 let  和  const 的作用域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;  <span class="comment">// 变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</span></span><br><span class="line">   a[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   	  <span class="built_in">console</span>.log(i);</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123; <span class="comment">// i 不会泄露</span></span><br><span class="line">   a[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   	  <span class="built_in">console</span>.log(i);</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>


<h3 id="const-命令"><a href="#const-命令" class="headerlink" title="const 命令"></a>const 命令</h3><p><code>const</code> 声明一个只读的常量。一旦声明，常量的值就不能改变。</p>
<p><code>const</code> 一旦声明变量，就必须立即初始化，不能留到以后赋值。</p>
<p><code>const</code> 的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p>
<p><code>const</code> 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>
<h2 id="2-解构赋值"><a href="#2-解构赋值" class="headerlink" title="2. 解构赋值"></a>2. 解构赋值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    name: <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = people</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">const</span> color = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> [first, second] = color</span><br><span class="line"><span class="built_in">console</span>.log(first) <span class="comment">// red</span></span><br><span class="line"><span class="built_in">console</span>.log(second) <span class="comment">// blue</span></span><br></pre></td></tr></table></figure>


<h2 id="3-字符串的扩展"><a href="#3-字符串的扩展" class="headerlink" title="3. 字符串的扩展"></a>3. 字符串的扩展</h2><p><strong>字符串格式化</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> e6 = <span class="string">&#x27;java&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;e6&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>
<p><strong>多行字符串拼接</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;hello world&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br></pre></td></tr></table></figure>
<p><a href="https://es6.ruanyifeng.com/#docs/string-methods">字符串新增方法</a></p>
<h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h2><p><strong>ES6为参数提供了默认值。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params">num = <span class="number">200</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;</span><br><span class="line">action() <span class="comment">//200</span></span><br><span class="line">action(<span class="number">300</span>) <span class="comment">//300</span></span><br></pre></td></tr></table></figure>
<p><strong>箭头函数</strong></p>
<p>特点:</p>
<ul>
<li>不需要function关键字来创建函数</li>
<li>省略return关键字</li>
<li>继承当前上下文的 this 关键字</li>
</ul>
<p>函数有且仅有一个参数的时候，是可以省略括号。函数返回有且仅有一个表达式的时候可以省略{}。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fullName = name + age</span><br><span class="line">    <span class="keyword">return</span> fullName</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(p(<span class="string">&quot;java&quot;</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>


<h2 id="5-对象的拓展"><a href="#5-对象的拓展" class="headerlink" title="5. 对象的拓展"></a>5. 对象的拓展</h2><p><strong>对象初始化简写</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 键值对重名，ES6可以简写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(p(<span class="string">&quot;java&quot;</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>
<p><strong>为对象字面量方法赋值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = &#123;</span><br><span class="line">    name: <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    getName () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">p.getName()</span><br></pre></td></tr></table></figure>
<p><strong>浅复制</strong></p>
<p>ES6 对象提供了 <code>Object.assign()  </code>  这个方法来实现浅复制。Object.assign() 可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为 {}。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = &#123;</span><br><span class="line">    name: <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    getName () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, p)</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure>


<h2 id="6-模块化"><a href="#6-模块化" class="headerlink" title="6. 模块化"></a>6. 模块化</h2><h3 id="CommonJs-require的使用"><a href="#CommonJs-require的使用" class="headerlink" title="CommonJs require的使用"></a>CommonJs require的使用</h3><ul>
<li>a.js </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello module a&quot;</span>)</span><br><span class="line"><span class="built_in">exports</span>.x = <span class="number">1</span>  <span class="comment">// 向外部暴露变量和方法</span></span><br></pre></td></tr></table></figure>
<ul>
<li>b.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="built_in">require</span>(<span class="string">&quot;./a.js&quot;</span>); <span class="comment">// 引入模块a</span></span><br><span class="line"><span class="built_in">console</span>.log(A.x)</span><br></pre></td></tr></table></figure>
<p>node 中的全局变量为 global，全局中创建的变量作为 global 的属性保存，全局中创建的方法作为 global 的方法保存。</p>
<h3 id="import-和-export"><a href="#import-和-export" class="headerlink" title="import 和 export"></a>import 和 export</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul>
<li>a.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&quot;java&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>b.js</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通用的引入方式</span></span><br><span class="line"><span class="keyword">import</span> * as A from <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line">A.hello()</span><br></pre></td></tr></table></figure>
<h4 id="ES6-的几种暴露方式"><a href="#ES6-的几种暴露方式" class="headerlink" title="ES6 的几种暴露方式"></a>ES6 的几种暴露方式</h4><ul>
<li>统一暴露</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;java&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;name, hello&#125;  </span><br></pre></td></tr></table></figure>
<ul>
<li>默认暴露</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name : <span class="string">&quot;java&quot;</span>,</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello es6&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这种引入方式在调用是要加 default，例如 A.default.hello()</span></span><br><span class="line"><span class="comment">// 一个文件里，有且只能有一个export default</span></span><br></pre></td></tr></table></figure>
<h4 id="ES6-的几种引入方式"><a href="#ES6-的几种引入方式" class="headerlink" title="ES6 的几种引入方式"></a>ES6 的几种引入方式</h4><ul>
<li>解构赋值形式1</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&quot;java&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, hello&#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br></pre></td></tr></table></figure>
<ul>
<li>解构赋值形式2</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name : <span class="string">&quot;java&quot;</span>,</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello es6&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> A&#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(A.name)</span><br><span class="line">A.hello()</span><br></pre></td></tr></table></figure>
<ul>
<li>简便形式（针对默认暴露）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(A.name)</span><br><span class="line">A.hello()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建博客</title>
    <url>/2021/01/10/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>Hexo搭建博客</p>
<ol>
<li>Hexo 的安装参考  <a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li>
<li>安装 Next 主题，参考  <a href="http://theme-next.iissnan.com/getting-started.html">Next主题官方文档</a></li>
</ol>
<p>基本命令：</p>
<ul>
<li>新建一篇博客</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>生成</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<ul>
<li>清除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<ul>
<li>部署</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<ul>
<li>本地启动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s -p &lt;port&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下软件的安装</title>
    <url>/2021/01/21/Linux%20%E4%B8%8B%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Linux-下软件的安装"><a href="#Linux-下软件的安装" class="headerlink" title="Linux 下软件的安装"></a>Linux 下软件的安装</h1><h2 id="Linux-安装-JDK"><a href="#Linux-安装-JDK" class="headerlink" title="Linux 安装 JDK"></a>Linux 安装 JDK</h2><ul>
<li>下载jdk-8u161-linux-x64.tar.gz 安装包，卸载已有的OPENJDK（如果有）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找已经安装的 OpenJDK 包</span></span><br><span class="line">rpm -qa | grep java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来可以将 java 开头的安装包均卸载即可</span></span><br><span class="line">yum -y remove java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64</span><br><span class="line">yum -y remove java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64</span><br><span class="line">... 省略 ...</span><br></pre></td></tr></table></figure>
<ul>
<li>创建⽬录并解压</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 /usr/local/ 下创建 java ⽂件夹并进⼊</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">mkdir java</span><br><span class="line"><span class="built_in">cd</span> java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上⾯准备好的 JDK 安装包解压到 /usr/local/java 中即可</span></span><br><span class="line">tar -zxvf /opt/jdk-8u161-linux-x64.tar.gz -C ./</span><br></pre></td></tr></table></figure>
<ul>
<li>配置JDK环境变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑 /etc/profile ⽂件，在⽂件尾部加⼊如下 JDK 环境配置即可</span></span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_161</span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让环境变量⽣效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile </span><br></pre></td></tr></table></figure>
<ul>
<li>验证JDK安装结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac</span><br></pre></td></tr></table></figure>


<h2 id="Linux-安装-Tomcat"><a href="#Linux-安装-Tomcat" class="headerlink" title="Linux 安装 Tomcat"></a>Linux 安装 Tomcat</h2><ul>
<li>准备安装包apache-tomcat-8.5.55.tar.gz 放在/opt目录下，解压并安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">mkdir tomcat</span><br><span class="line"><span class="built_in">cd</span> tomcat</span><br><span class="line">tar -zxvf /opt/apache-tomcat-8.5.55.tar.gz -C ./</span><br></pre></td></tr></table></figure>
<p>解压完之后， /usr/local/tomcat ⽬录中会出现⼀个 apache-tomcat-8.5.55 的⽬录</p>
<ul>
<li>启动TOMCAT</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> bin/</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>


<h2 id="Linux-安装-Redis"><a href="#Linux-安装-Redis" class="headerlink" title="Linux 安装 Redis"></a>Linux 安装 Redis</h2><ul>
<li>准备 redis-5.0.8.tar.gz 安装包 ，将其拷贝到/opt目录下，解压</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">mkdir redis</span><br><span class="line">tar -zxvf /opt/redis-5.0.8.tar.gz -C ./</span><br></pre></td></tr></table></figure>
<p>然后/usr/local目录下会有redis-5.0.8文件夹</p>
<ul>
<li>安装gcc-c++</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xudukangCentos redis-5.0.8]<span class="comment"># yum install gcc-c++</span></span><br><span class="line">[root@xudukangCentos redis-5.0.8]<span class="comment"># make</span></span><br><span class="line">[root@xudukangCentos redis-5.0.8]<span class="comment"># make install</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Redis默认安装路径  /usr/local/bin</strong></li>
<li>复制 Redis 的配置文件到当前目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xudukangCentos bin]<span class="comment"># mkdir myconfig</span></span><br><span class="line">[root@xudukangCentos bin]<span class="comment"># cp /usr/local/redis-5.0.8/redis.conf myconfig/</span></span><br><span class="line">[root@xudukangCentos bin]<span class="comment"># cd myconfig/</span></span><br><span class="line">[root@xudukangCentos myconfig]<span class="comment"># ls</span></span><br><span class="line">redis.conf</span><br></pre></td></tr></table></figure>
<ul>
<li>启动Redis</li>
</ul>
<p>（1）修改配置文件 vim redis.conf  做如下更改 daemonize yes，启动Redis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xudukangCentos bin]<span class="comment"># redis-server myconfig/redis.conf </span></span><br><span class="line">23918:C 26 Aug 2020 10:34:26.602 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">23918:C 26 Aug 2020 10:34:26.602 <span class="comment"># Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=23918, just started</span></span><br><span class="line">23918:C 26 Aug 2020 10:34:26.602 <span class="comment"># Configuration loaded</span></span><br></pre></td></tr></table></figure>
<p>（3）连接服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xudukangCentos bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>
<p>（4）退出服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>（5）设置密码：在 redis.conf 中设置 requirepass 123456，然后重启服务</p>
<ul>
<li>使用Redis Desktop Manager连接Redis</li>
</ul>
<p>（1）注释redis.conf文件中的：bind 127.0.0.1<br>（2）确保设置了密码<br>（3）确保网络畅通以及6379端口对外开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询端口是否开放</span></span><br><span class="line">firewall-cmd --query-port=8080/tcp</span><br><span class="line"><span class="comment"># 开放80端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br><span class="line"><span class="comment"># 移除端口</span></span><br><span class="line">firewall-cmd --permanent --remove-port=8080/tcp</span><br><span class="line"><span class="comment">#重启防火墙(修改配置后要重启防火墙)</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>


<h2 id="Linux-安装-RabbitMQ"><a href="#Linux-安装-RabbitMQ" class="headerlink" title="Linux 安装 RabbitMQ"></a>Linux 安装 RabbitMQ</h2><ul>
<li>准备</li>
</ul>
<p>（1）下载Erlang的rpm包<br>RabbitMQ是Erlang语言编写，所以Erang环境必须要有。<br>Erlang环境一定要与RabbitMQ版本匹配：<a href="https://www.rabbitmq.com/which-erlang.html">https://www.rabbitmq.com/which-erlang.html</a><br>Erlang下载地址：<a href="https://www.rabbitmq.com/releases/erlang/%EF%BC%88%E6%A0%B9%E6%8D%AE%E8%87%AA%E8%BA%AB%E9%9C%80%E6%B1%82%E5%8F%8A%E5%8C%B9%E9%85%8D%E5%85%B3%E7%B3%BB%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94rpm%E5%8C%85%EF%BC%89">https://www.rabbitmq.com/releases/erlang/（根据自身需求及匹配关系，下载对应rpm包）</a></p>
<p>（2）下载RabbitMQ的rpm包<br>RabbitMQ下载地址：<a href="https://www.rabbitmq.com/releases/rabbitmq-server/%EF%BC%88%E6%A0%B9%E6%8D%AE%E9%9C%80%E6%B1%82%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94rpm%E5%8C%85%EF%BC%89">https://www.rabbitmq.com/releases/rabbitmq-server/（根据需求，下载对应rpm包）</a></p>
<p>（3）下载socat的rpm包<br>rabbitmq安装依赖于socat，所以需要下载socat。<br>socat下载地址：<a href="http://repo.iotti.biz/CentOS/6/x86_64/socat-1.7.3.2-1.el6.lux.x86_64.rpm">http://repo.iotti.biz/CentOS/6/x86_64/socat-1.7.3.2-1.el6.lux.x86_64.rpm</a><br>根据自身需求下载对应系统socat依赖：(<a href="http://repo.iotti.biz/CentOS/">http://repo.iotti.biz/CentOS/</a>)</p>
<ul>
<li>分别安装Erlang、Socat、RabbitMQ（一定按照顺序）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh erlang-18.3-1.el6.x86_64.rpm</span><br><span class="line">rpm -ivh socat-1.7.3.2-1.el6.lux.x86_64.rpm</span><br><span class="line">rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm </span><br></pre></td></tr></table></figure>
<ul>
<li>配置rabbitmq</li>
</ul>
<p><code>vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;loopback_users, []&#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li>安装管理插件：</li>
</ul>
<p><code>rabbitmq-plugins enable rabbitmq_management</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xudukangCentos ebin]<span class="comment"># rabbitmq-plugins enable rabbitmq_management</span></span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  mochiweb</span><br><span class="line">  webmachine</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">  amqp_client</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_management</span><br><span class="line"></span><br><span class="line">Applying plugin configuration to rabbit@xudukangCentos... failed.</span><br><span class="line"> * Could not contact node rabbit@xudukangCentos.</span><br><span class="line">   Changes will take effect at broker restart.</span><br><span class="line"> * Options: --online  - fail <span class="keyword">if</span> broker cannot be contacted.</span><br><span class="line">            --offline - <span class="keyword">do</span> not try to contact broker.</span><br><span class="line">[root@xudukangCentos ebin]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xudukangCentos ebin]<span class="comment"># cd /usr/lib/rabbitmq/bin/</span></span><br><span class="line">[root@xudukangCentos bin]<span class="comment"># ./rabbitmq-server start</span></span><br><span class="line"></span><br><span class="line">  RabbitMQ 3.6.5. Copyright (C) 2007-2016 Pivotal Software, Inc.</span><br><span class="line">  <span class="comment">##  ##      Licensed under the MPL.  See http://www.rabbitmq.com/</span></span><br><span class="line">  <span class="comment">##  ##</span></span><br><span class="line">  <span class="comment">##########  Logs: /var/log/rabbitmq/rabbit@xudukangCentos.log</span></span><br><span class="line">  <span class="comment">######  ##        /var/log/rabbitmq/rabbit@xudukangCentos-sasl.log</span></span><br><span class="line">  <span class="comment">##########</span></span><br><span class="line">              Starting broker...</span><br><span class="line"> completed with 6 plugins.</span><br></pre></td></tr></table></figure>
<ul>
<li>访问rabbitmq 端口15672  user：guest    password: guest</li>
</ul>
<h2 id="Linux-安装-Nginx"><a href="#Linux-安装-Nginx" class="headerlink" title="Linux 安装 Nginx"></a>Linux 安装 Nginx</h2><ul>
<li>下载 nginx-1.17.10.tar.gz ，并放在/opt⽬录下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 /usr/local/ 下创建 nginx ⽂件夹并进⼊，将 Nginx 安装包解压到 /usr/local/nginx 中即可</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">mkdir nginx</span><br><span class="line"><span class="built_in">cd</span> nginx</span><br><span class="line">tar zxvf /opt/nginx-1.17.10.tar.gz -C ./</span><br></pre></td></tr></table></figure>
<p>解压完之后， /usr/local/nginx ⽬录中会出现⼀个 nginx-1.17.10 的⽬录</p>
<ul>
<li>预先安装额外的依赖</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install pcre-devel</span><br><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure>
<ul>
<li>编译安装NGINX</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nginx-1.17.10</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<ul>
<li>安装完成后，Nginx的可执⾏⽂件位置位于</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>
<ul>
<li>启动nginx</li>
</ul>
<p>直接执⾏如下命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ./nginx</span></span><br></pre></td></tr></table></figure>
<p>如果想停⽌Nginx服务，可执⾏：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br></pre></td></tr></table></figure>
<p>如果修改了配置⽂件后想重新加载Nginx，可执⾏：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>注意其配置⽂件位于：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<ul>
<li>浏览器验证启动情况 </li>
</ul>
<h2 id="Linux-安装-MySQL"><a href="#Linux-安装-MySQL" class="headerlink" title="Linux 安装 MySQL"></a>Linux 安装 MySQL</h2><h3 id="准备安装包-mysql-5-7-30-linux-glibc2-12-x86-64-tar-gz-，放在-opt下"><a href="#准备安装包-mysql-5-7-30-linux-glibc2-12-x86-64-tar-gz-，放在-opt下" class="headerlink" title="准备安装包 mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz ，放在/opt下"></a>准备安装包 mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz ，放在/opt下</h3><h3 id="卸载系统⾃带的MARIADB（如果有）"><a href="#卸载系统⾃带的MARIADB（如果有）" class="headerlink" title="卸载系统⾃带的MARIADB（如果有）"></a>卸载系统⾃带的MARIADB（如果有）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep mariadb</span><br><span class="line">yum -y remove mariadb-server-5.5.56-2.el7.x86_64</span><br><span class="line">yum -y remove mariadb-5.5.56-2.el7.x86_64</span><br><span class="line">yum -y remove mariadb-devel-5.5.56-2.el7.x86_64</span><br><span class="line">yum -y remove mariadb-libs-5.5.56-2.el7.x86_64</span><br></pre></td></tr></table></figure>
<h3 id="解压MYSQL安装包"><a href="#解压MYSQL安装包" class="headerlink" title="解压MYSQL安装包"></a>解压MYSQL安装包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将上⾯准备好的 MySQL 安装包解压到 /usr/local/ ⽬录，并重命名为 mysql</span></span><br><span class="line">tar -zxvf /opt/mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line">mv mysql-5.7.30-linux-glibc2.12-x86_64 mysql</span><br></pre></td></tr></table></figure>
<h3 id="创建MYSQL⽤户和⽤户组"><a href="#创建MYSQL⽤户和⽤户组" class="headerlink" title="创建MYSQL⽤户和⽤户组"></a>创建MYSQL⽤户和⽤户组</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql mysql</span><br><span class="line">同时新建 /usr/<span class="built_in">local</span>/mysql/data ⽬录，后续备⽤</span><br></pre></td></tr></table></figure>
<h3 id="修改MYSQL⽬录的归属⽤户"><a href="#修改MYSQL⽬录的归属⽤户" class="headerlink" title="修改MYSQL⽬录的归属⽤户"></a>修改MYSQL⽬录的归属⽤户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R mysql:mysql ./</span><br></pre></td></tr></table></figure>
<h3 id="准备MYSQL的配置⽂件"><a href="#准备MYSQL的配置⽂件" class="headerlink" title="准备MYSQL的配置⽂件"></a>准备MYSQL的配置⽂件</h3><p>在 /etc ⽬录下新建 my.cnf ⽂件，写⼊如下简化配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="attr">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="comment">#设置3306端⼝</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="comment"># 设置mysql的安装⽬录</span></span><br><span class="line"><span class="attr">basedir</span>=/usr/local/mysql</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放⽬录</span></span><br><span class="line"><span class="attr">datadir</span>=/usr/local/mysql/data</span><br><span class="line"><span class="comment"># 允许最⼤连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 服务端使⽤的字符集默认为8⽐特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使⽤的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="attr">lower_case_table_names</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">max_allowed_packet</span>=<span class="number">16</span>M</span><br></pre></td></tr></table></figure>
<p>同时使⽤如下命令创建 /var/lib/mysql ⽬录，并修改权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /var/lib/mysql</span><br><span class="line">chmod 777 /var/lib/mysql</span><br></pre></td></tr></table></figure>
<h3 id="正式安装MySQL"><a href="#正式安装MySQL" class="headerlink" title="正式安装MySQL"></a>正式安装MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">./bin/mysqld --initialize --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/usr/<span class="built_in">local</span>/mysql/data</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xudukangCentos mysql]<span class="comment"># ./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span></span><br><span class="line">2020-08-26T07:49:59.223818Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation <span class="keyword">for</span> more details).</span><br><span class="line">2020-08-26T07:50:00.244733Z 0 [Warning] InnoDB: New <span class="built_in">log</span> files created, LSN=45790</span><br><span class="line">2020-08-26T07:50:00.372154Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</span><br><span class="line">2020-08-26T07:50:00.438789Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: be5db7d3-e770-11ea-b7d2-00163e0f023f.</span><br><span class="line">2020-08-26T07:50:00.441215Z 0 [Warning] Gtid table is not ready to be used. Table <span class="string">&#x27;mysql.gtid_executed&#x27;</span> cannot be opened.</span><br><span class="line">2020-08-26T07:50:00.830745Z 0 [Warning] CA certificate ca.pem is self signed.</span><br><span class="line">2020-08-26T07:50:01.017876Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: **lCy(h<span class="comment">#6d4lki**</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：lCy(h#6d4lki 是root登录MySQL的密码</p>
</blockquote>
<h3 id="复制启动脚本到资源⽬录"><a href="#复制启动脚本到资源⽬录" class="headerlink" title="复制启动脚本到资源⽬录"></a>复制启动脚本到资源⽬录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp ./support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>
<p>并修改 /etc/init.d/mysqld ，修改其 basedir 和 datadir 为实际对应⽬录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">basedir=/usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir=/usr/<span class="built_in">local</span>/mysql/data</span><br></pre></td></tr></table></figure>
<h3 id="设置MySQL系统服务并开启⾃启"><a href="#设置MySQL系统服务并开启⾃启" class="headerlink" title="设置MySQL系统服务并开启⾃启"></a>设置MySQL系统服务并开启⾃启</h3><p>⾸先增加 mysqld 服务控制脚本执⾏权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>
<p>同时将 mysqld 服务加⼊到系统服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure>
<p>最后检查 mysqld 服务是否已经⽣效即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --list mysqld</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use <span class="string">&#x27;systemctl list-unit-files&#x27;</span>.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      <span class="string">&#x27;systemctl list-dependencies [target]&#x27;</span>.</span><br><span class="line"></span><br><span class="line">mysqld          0:off   1:off   2:on    3:on    4:on    5:on    6:off</span><br><span class="line">这样就表明 mysqld 服务已经⽣效了，在2、3、4、5运⾏级别随系统启动⽽⾃动启动，以后可以直接使⽤ service 命令控制 mysql 的启停。</span><br></pre></td></tr></table></figure>
<h3 id="启动MySQLD"><a href="#启动MySQLD" class="headerlink" title="启动MySQLD"></a>启动MySQLD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>
<h3 id="将-MySQL-的-BIN-⽬录加⼊-PATH-环境变量"><a href="#将-MySQL-的-BIN-⽬录加⼊-PATH-环境变量" class="headerlink" title="将 MySQL 的 BIN ⽬录加⼊ PATH 环境变量"></a>将 MySQL 的 BIN ⽬录加⼊ PATH 环境变量</h3><p>编辑 ~/.bash_profile ⽂件，在⽂件末尾处追加如下信息:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/mysql/bin</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile    最后执⾏如下命令使环境变量⽣效</span><br></pre></td></tr></table></figure>
<h3 id="⾸次登陆MYSQL"><a href="#⾸次登陆MYSQL" class="headerlink" title="⾸次登陆MYSQL"></a>⾸次登陆MYSQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">密码是 lCy(h<span class="comment">#6d4lki </span></span><br></pre></td></tr></table></figure>
<h3 id="接下来修改ROOT账户密码"><a href="#接下来修改ROOT账户密码" class="headerlink" title="接下来修改ROOT账户密码"></a>接下来修改ROOT账户密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;alter user user() identified by <span class="string">&quot;111111&quot;</span>;</span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure>
<h3 id="设置远程主机登录，最后利⽤NAVICAT等⼯具进⾏测试即可"><a href="#设置远程主机登录，最后利⽤NAVICAT等⼯具进⾏测试即可" class="headerlink" title="设置远程主机登录，最后利⽤NAVICAT等⼯具进⾏测试即可"></a>设置远程主机登录，最后利⽤NAVICAT等⼯具进⾏测试即可</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> user.Host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user.User=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>


<h2 id="Linux-安装-Docker"><a href="#Linux-安装-Docker" class="headerlink" title="Linux 安装 Docker"></a>Linux 安装 Docker</h2><p>1、要求 CentOS 系统的内核版本高于 3.10 。通过 **uname -r **命令查看你当前的内核版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uname -r</span><br></pre></td></tr></table></figure>
<p>2、使用 root 权限登录 Centos。确保 yum 包更新到最新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum update</span><br></pre></td></tr></table></figure>
<p>3、卸载旧版本(如果安装过旧版本的话)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>
<p>4、安装需要的软件包， yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
<p>5、设置yum源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>6、可以查看所有仓库中所有docker版本，并选择特定版本安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>
<p>7、安装docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce  <span class="comment">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0</span></span><br><span class="line">$ sudo yum install &lt;FQPN&gt;  <span class="comment"># 例如：sudo yum install docker-ce-17.12.0.ce</span></span><br></pre></td></tr></table></figure>
<p>8、启动并加入开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>
<p>9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker version</span><br><span class="line"></span><br><span class="line">问题：因为之前已经安装过旧版本的docker，在安装的时候报错如下：</span><br><span class="line">Transaction check error:</span><br><span class="line">  file /usr/bin/docker from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file /usr/bin/docker-containerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file /usr/bin/docker-containerd-shim from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file /usr/bin/dockerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  </span><br><span class="line">卸载旧版本的包</span><br><span class="line">$ sudo yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">再次安装docker</span><br><span class="line">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL练习题</title>
    <url>/2021/01/23/MySQL%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h1 id="MySQL练习题"><a href="#MySQL练习题" class="headerlink" title="MySQL练习题"></a>MySQL练习题</h1><h2 id="热身题目"><a href="#热身题目" class="headerlink" title="热身题目"></a>热身题目</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 用一条<span class="keyword">SQL</span> 语句 查询出每门课都大于<span class="number">80</span> 分的学生姓名</span><br><span class="line">name course grade</span><br><span class="line">张三  语文    <span class="number">81</span></span><br><span class="line">张三  数学    <span class="number">75</span></span><br><span class="line">李四  语文    <span class="number">76</span></span><br><span class="line">李四  数学    <span class="number">90</span></span><br><span class="line">王五  语文    <span class="number">81</span></span><br><span class="line">王五  数学    <span class="number">100</span></span><br><span class="line">王五  英语    <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> [<span class="keyword">table</span>] <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">having</span> <span class="built_in">min</span>(grade) <span class="operator">&gt;</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 现有学生表如下:</span><br><span class="line">自动编号    学号    姓名   课程编号  课程名称   分数</span><br><span class="line"><span class="number">1</span>         <span class="number">2005001</span>  张三    <span class="number">0001</span>     数学      <span class="number">69</span></span><br><span class="line"><span class="number">2</span>         <span class="number">2005002</span>  李四    <span class="number">0001</span>     数学      <span class="number">89</span></span><br><span class="line"><span class="number">3</span>         <span class="number">2005001</span>  张三    <span class="number">0001</span>     数学      <span class="number">69</span></span><br><span class="line"></span><br><span class="line">删除除了自动编号不同, 其他都相同的学生冗余信息</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> [<span class="keyword">table</span>] <span class="keyword">where</span> 自动编号 <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">min</span>(自动编号) </span><br><span class="line">    <span class="keyword">from</span> [<span class="keyword">table</span>] </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> 学号, 姓名, 课程编号, 课程名称, 分数</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 一个叫 team 的表，里面只有一个字段name, 一共有<span class="number">4</span> 条纪录，分别是a,b,c,d, 对应四个球队，现在四个球队进行比赛，用一条<span class="keyword">sql</span> 语句显示所有可能的比赛组合</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.name, b.name</span><br><span class="line"><span class="keyword">from</span> team a, team b </span><br><span class="line"><span class="keyword">where</span> a.name <span class="operator">&lt;</span> b.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 怎么把这样一个数据表</span><br><span class="line"><span class="keyword">year</span>  <span class="keyword">month</span> amount</span><br><span class="line"><span class="number">1991</span>   <span class="number">1</span>     <span class="number">1.1</span></span><br><span class="line"><span class="number">1991</span>   <span class="number">2</span>     <span class="number">1.2</span></span><br><span class="line"><span class="number">1991</span>   <span class="number">3</span>     <span class="number">1.3</span></span><br><span class="line"><span class="number">1991</span>   <span class="number">4</span>     <span class="number">1.4</span></span><br><span class="line"><span class="number">1992</span>   <span class="number">1</span>     <span class="number">2.1</span></span><br><span class="line"><span class="number">1992</span>   <span class="number">2</span>     <span class="number">2.2</span></span><br><span class="line"><span class="number">1992</span>   <span class="number">3</span>     <span class="number">2.3</span></span><br><span class="line"><span class="number">1992</span>   <span class="number">4</span>     <span class="number">2.4</span></span><br><span class="line">查成这样一个结果？</span><br><span class="line"><span class="keyword">year</span>   m1    m2    m3   m4 </span><br><span class="line"><span class="number">1991</span>   <span class="number">1.1</span>  <span class="number">1.2</span>   <span class="number">1.3</span>  <span class="number">1.4</span></span><br><span class="line"><span class="number">1992</span>   <span class="number">2.1</span>  <span class="number">2.2</span>   <span class="number">2.3</span>  <span class="number">2.4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>, </span><br><span class="line">    (<span class="keyword">select</span> amount <span class="keyword">from</span> [<span class="keyword">table</span>] m <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> m.year<span class="operator">=</span>[<span class="keyword">table</span>].<span class="keyword">year</span>) <span class="keyword">as</span> m1,</span><br><span class="line">    (<span class="keyword">select</span> amount <span class="keyword">from</span> [<span class="keyword">table</span>] m <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> m.year<span class="operator">=</span>[<span class="keyword">table</span>].<span class="keyword">year</span>) <span class="keyword">as</span> m2,</span><br><span class="line">    (<span class="keyword">select</span> amount <span class="keyword">from</span> [<span class="keyword">table</span>] m <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="number">3</span> <span class="keyword">and</span> m.year<span class="operator">=</span>[<span class="keyword">table</span>].<span class="keyword">year</span>) <span class="keyword">as</span> m3,</span><br><span class="line">    (<span class="keyword">select</span> amount <span class="keyword">from</span> [<span class="keyword">table</span>] m <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="number">4</span> <span class="keyword">and</span> m.year<span class="operator">=</span>[<span class="keyword">table</span>].<span class="keyword">year</span>) <span class="keyword">as</span> m4</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">year</span></span><br></pre></td></tr></table></figure>
<h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table for course</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `course`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `course`  (</span><br><span class="line">  `Cid` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Cname` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Tid` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `course` <span class="keyword">VALUES</span> (<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;02&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `course` <span class="keyword">VALUES</span> (<span class="string">&#x27;02&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `course` <span class="keyword">VALUES</span> (<span class="string">&#x27;03&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table for sc</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sc`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sc`  (</span><br><span class="line">  `Sid` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Cid` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `score` <span class="type">decimal</span>(<span class="number">18</span>, <span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;01&#x27;</span>, <span class="number">80.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;02&#x27;</span>, <span class="number">90.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;03&#x27;</span>, <span class="number">99.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;02&#x27;</span>, <span class="string">&#x27;01&#x27;</span>, <span class="number">70.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;02&#x27;</span>, <span class="string">&#x27;02&#x27;</span>, <span class="number">60.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;02&#x27;</span>, <span class="string">&#x27;03&#x27;</span>, <span class="number">80.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;03&#x27;</span>, <span class="string">&#x27;01&#x27;</span>, <span class="number">80.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;03&#x27;</span>, <span class="string">&#x27;02&#x27;</span>, <span class="number">80.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;03&#x27;</span>, <span class="string">&#x27;03&#x27;</span>, <span class="number">80.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;04&#x27;</span>, <span class="string">&#x27;01&#x27;</span>, <span class="number">50.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;04&#x27;</span>, <span class="string">&#x27;02&#x27;</span>, <span class="number">30.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;04&#x27;</span>, <span class="string">&#x27;03&#x27;</span>, <span class="number">20.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;05&#x27;</span>, <span class="string">&#x27;01&#x27;</span>, <span class="number">76.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;05&#x27;</span>, <span class="string">&#x27;02&#x27;</span>, <span class="number">87.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;06&#x27;</span>, <span class="string">&#x27;01&#x27;</span>, <span class="number">31.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;06&#x27;</span>, <span class="string">&#x27;03&#x27;</span>, <span class="number">34.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;07&#x27;</span>, <span class="string">&#x27;02&#x27;</span>, <span class="number">89.0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sc` <span class="keyword">VALUES</span> (<span class="string">&#x27;07&#x27;</span>, <span class="string">&#x27;03&#x27;</span>, <span class="number">98.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table for student</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `student`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`  (</span><br><span class="line">  `Sid` <span class="type">varchar</span>(<span class="number">6</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Sname` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Sage` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Ssex` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span> (<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;赵雷&#x27;</span>, <span class="string">&#x27;1990-01-01 00:00:00&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span> (<span class="string">&#x27;02&#x27;</span>, <span class="string">&#x27;钱电&#x27;</span>, <span class="string">&#x27;1990-12-21 00:00:00&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span> (<span class="string">&#x27;03&#x27;</span>, <span class="string">&#x27;孙风&#x27;</span>, <span class="string">&#x27;1990-05-20 00:00:00&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span> (<span class="string">&#x27;04&#x27;</span>, <span class="string">&#x27;李云&#x27;</span>, <span class="string">&#x27;1990-08-06 00:00:00&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span> (<span class="string">&#x27;05&#x27;</span>, <span class="string">&#x27;周梅&#x27;</span>, <span class="string">&#x27;1991-12-01 00:00:00&#x27;</span>, <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span> (<span class="string">&#x27;06&#x27;</span>, <span class="string">&#x27;吴兰&#x27;</span>, <span class="string">&#x27;1992-03-01 00:00:00&#x27;</span>, <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span> (<span class="string">&#x27;07&#x27;</span>, <span class="string">&#x27;郑竹&#x27;</span>, <span class="string">&#x27;1989-07-01 00:00:00&#x27;</span>, <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span> (<span class="string">&#x27;08&#x27;</span>, <span class="string">&#x27;王菊&#x27;</span>, <span class="string">&#x27;1990-01-20 00:00:00&#x27;</span>, <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table for teacher</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `teacher`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher`  (</span><br><span class="line">  `Tid` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Tname` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `teacher` <span class="keyword">VALUES</span> (<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `teacher` <span class="keyword">VALUES</span> (<span class="string">&#x27;02&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `teacher` <span class="keyword">VALUES</span> (<span class="string">&#x27;03&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/23/MySQL%E7%BB%83%E4%B9%A0%E9%A2%98/practice.png" alt="practice"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 查询<span class="number">01</span>课程比<span class="number">02</span>课程成绩高的学生的信息及课程分数</span><br><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span>, a.score <span class="keyword">as</span> score01, b.score <span class="keyword">as</span> score02</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	student s, </span><br><span class="line">	(<span class="keyword">select</span> Sid, score <span class="keyword">from</span> sc <span class="keyword">where</span> Cid <span class="operator">=</span> <span class="number">01</span>) a,</span><br><span class="line">	(<span class="keyword">select</span> Sid, score <span class="keyword">from</span> sc <span class="keyword">where</span> Cid <span class="operator">=</span> <span class="number">02</span>) b</span><br><span class="line"><span class="keyword">where</span> s.Sid <span class="operator">=</span> a.Sid <span class="keyword">and</span> s.Sid <span class="operator">=</span> b.Sid <span class="keyword">and</span> a.score <span class="operator">&gt;</span> b.score;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 查询平均成绩大于等于 <span class="number">60</span> 分的同学的学生编号和学生姓名和平均成绩</span><br><span class="line"><span class="keyword">select</span> s.Sid, s.Sname, <span class="built_in">avg</span>(sc.score) avg_score</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">as</span> s, sc</span><br><span class="line"><span class="keyword">where</span> s.Sid <span class="operator">=</span> sc.Sid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.Sid</span><br><span class="line"><span class="keyword">having</span> avg_score <span class="operator">&gt;=</span> <span class="number">60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 查询在 SC 表存在成绩的学生信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">where</span> Sid <span class="keyword">in</span> (<span class="keyword">select</span> Sid <span class="keyword">from</span> sc <span class="keyword">where</span> score <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 <span class="keyword">null</span> )</span><br><span class="line"><span class="keyword">select</span> s.Sid, s.Sname, <span class="built_in">count</span>(sc.Cid) <span class="keyword">as</span> 选课总数, <span class="built_in">sum</span>(sc.score) <span class="keyword">as</span> 总成绩</span><br><span class="line"><span class="keyword">from</span> student s <span class="keyword">left</span> <span class="keyword">join</span> sc</span><br><span class="line"><span class="keyword">on</span> s.Sid <span class="operator">=</span> sc.Sid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.Sid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.1</span> 查寻以下数据结果：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------------+-----------+----------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> sid  <span class="operator">|</span> sname  <span class="operator">|</span> 选课总数     <span class="operator">|</span> 总成绩    <span class="operator">|</span> score_01 <span class="operator">|</span> score_02 <span class="operator">|</span> score_03 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------------+-----------+----------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">01</span>   <span class="operator">|</span> 赵雷   <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span>     <span class="number">269.0</span> <span class="operator">|</span>     <span class="number">80.0</span> <span class="operator">|</span>     <span class="number">90.0</span> <span class="operator">|</span>     <span class="number">99.0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">02</span>   <span class="operator">|</span> 钱电   <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span>     <span class="number">210.0</span> <span class="operator">|</span>     <span class="number">70.0</span> <span class="operator">|</span>     <span class="number">60.0</span> <span class="operator">|</span>     <span class="number">80.0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">03</span>   <span class="operator">|</span> 孙风   <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span>     <span class="number">240.0</span> <span class="operator">|</span>     <span class="number">80.0</span> <span class="operator">|</span>     <span class="number">80.0</span> <span class="operator">|</span>     <span class="number">80.0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">04</span>   <span class="operator">|</span> 李云   <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span>     <span class="number">100.0</span> <span class="operator">|</span>     <span class="number">50.0</span> <span class="operator">|</span>     <span class="number">30.0</span> <span class="operator">|</span>     <span class="number">20.0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">05</span>   <span class="operator">|</span> 周梅   <span class="operator">|</span>            <span class="number">2</span> <span class="operator">|</span>     <span class="number">163.0</span> <span class="operator">|</span>     <span class="number">76.0</span> <span class="operator">|</span>     <span class="number">87.0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">06</span>   <span class="operator">|</span> 吴兰   <span class="operator">|</span>            <span class="number">2</span> <span class="operator">|</span>      <span class="number">65.0</span> <span class="operator">|</span>     <span class="number">31.0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">34.0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">07</span>   <span class="operator">|</span> 郑竹   <span class="operator">|</span>            <span class="number">2</span> <span class="operator">|</span>     <span class="number">187.0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">89.0</span> <span class="operator">|</span>     <span class="number">98.0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------------+-----------+----------+----------+----------+</span></span><br><span class="line"><span class="keyword">select</span> s.Sid, s.Sname, <span class="built_in">count</span>(sc.Cid), <span class="built_in">sum</span>(sc.score),</span><br><span class="line">	<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.Cid<span class="operator">=</span><span class="number">01</span> <span class="keyword">then</span> sc.score <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span>) score_01,</span><br><span class="line">	<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.Cid<span class="operator">=</span><span class="number">02</span> <span class="keyword">then</span> sc.score <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span>) score_02,</span><br><span class="line">	<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.Cid<span class="operator">=</span><span class="number">03</span> <span class="keyword">then</span> sc.score <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span>) score_03</span><br><span class="line"><span class="keyword">from</span> student s, sc</span><br><span class="line"><span class="keyword">where</span> s.Sid <span class="operator">=</span> sc.Sid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.Sid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 查询「李」姓老师的数量</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(Tname) <span class="keyword">from</span> teacher <span class="keyword">where</span> Tname <span class="keyword">like</span> <span class="string">&#x27;李%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 查询学过「张三」老师授课的同学的信息</span><br><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student s, sc, course c, teacher t</span><br><span class="line"><span class="keyword">where</span> t.Tname<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span> <span class="keyword">and</span> t.Tid <span class="operator">=</span> c.Tid <span class="keyword">and</span> c.Cid <span class="operator">=</span> sc.Cid <span class="keyword">and</span> sc.Sid <span class="operator">=</span> s.Sid</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sid <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> sid <span class="keyword">from</span> sc, course, teacher</span><br><span class="line"><span class="keyword">where</span> sc.cid <span class="operator">=</span> course.cid <span class="keyword">and</span> course.tid <span class="operator">=</span> teacher.tid <span class="keyword">and</span> tname <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 查询没有学全所有课程的同学的信息</span><br><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student s, sc</span><br><span class="line"><span class="keyword">where</span> s.Sid <span class="operator">=</span> sc.Sid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.Sid</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(sc.Cid) <span class="operator">&lt;</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">where</span> sid <span class="keyword">in</span> (<span class="keyword">select</span> sid <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> sid <span class="keyword">having</span> <span class="built_in">count</span>(cid) <span class="operator">&lt;</span> <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 查询至少有一门课与学号为&quot;01&quot;的同学所学相同的同学的信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">where</span> Sid <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">distinct</span> Sid <span class="keyword">from</span> sc </span><br><span class="line"><span class="keyword">where</span> Cid <span class="keyword">in</span> (<span class="keyword">select</span> Cid <span class="keyword">from</span> sc <span class="keyword">where</span> Sid <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span>) <span class="keyword">and</span> Sid <span class="operator">&lt;&gt;</span> <span class="string">&#x27;01&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> 查询和&quot;01&quot;号的同学学习的课程完全相同的其他同学的信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> Sid <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> Sid <span class="keyword">from</span> sc </span><br><span class="line"><span class="keyword">where</span> Cid <span class="keyword">in</span> (<span class="keyword">select</span> Cid <span class="keyword">from</span> sc <span class="keyword">where</span> Sid <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span>) <span class="keyword">and</span> Sid <span class="operator">&lt;&gt;</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Sid</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(Cid) <span class="operator">&gt;=</span> <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> 查询没学过&quot;张三&quot;老师讲授的任一门课程的学生姓名</span><br><span class="line"><span class="keyword">select</span> Sname <span class="keyword">from</span> student <span class="keyword">where</span> Sname <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> s.Sname</span><br><span class="line"><span class="keyword">from</span> student s, sc, teacher t, course c</span><br><span class="line"><span class="keyword">where</span> s.Sid <span class="operator">=</span> sc.Sid </span><br><span class="line"><span class="keyword">and</span> sc.Cid <span class="operator">=</span> c.Cid </span><br><span class="line"><span class="keyword">and</span> c.Tid <span class="operator">=</span> t.Tid</span><br><span class="line"><span class="keyword">and</span> t.Tname <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">11.</span> 查询两门及以上不及格课程的同学的学号，姓名及其平均成绩</span><br><span class="line"><span class="keyword">select</span> s.Sid, s.Sname, <span class="built_in">avg</span>(sc.score)</span><br><span class="line"><span class="keyword">from</span> student s, sc </span><br><span class="line"><span class="keyword">where</span> s.Sid <span class="operator">=</span> sc.Sid <span class="keyword">and</span> sc.score <span class="operator">&lt;</span> <span class="number">60</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.Sid</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(sc.score) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">12.</span> 检索&quot;01&quot;课程分数小于 <span class="number">60</span>，按分数降序排列的学生信息</span><br><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span>, sc.score</span><br><span class="line"><span class="keyword">from</span> student s, sc</span><br><span class="line"><span class="keyword">where</span> s.Sid <span class="operator">=</span> sc.Sid <span class="keyword">and</span> sc.Cid <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">and</span> sc.score <span class="operator">&lt;</span> <span class="number">60</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sc.score <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">13.</span> 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</span><br><span class="line"><span class="keyword">select</span> Sid,</span><br><span class="line">	<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Cid <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">then</span> score <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span>) score_01,</span><br><span class="line">	<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Cid <span class="operator">=</span> <span class="string">&#x27;02&#x27;</span> <span class="keyword">then</span> score <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span>) score_02,</span><br><span class="line">	<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Cid <span class="operator">=</span> <span class="string">&#x27;03&#x27;</span> <span class="keyword">then</span> score <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span>) score_03,</span><br><span class="line">	<span class="built_in">avg</span>(score) avgs</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Sid</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> avgs <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">14.</span> 查询下列格式的数据。</span><br><span class="line">(及格为<span class="operator">&gt;=</span><span class="number">60</span>，中等为：<span class="number">70</span><span class="number">-80</span>，优良为：<span class="number">80</span><span class="number">-90</span>，优秀为：<span class="operator">&gt;=</span><span class="number">90</span>）,结果按人数降序排列，人数相同按课程号升序排列</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span>课程号<span class="operator">|</span>课程名称<span class="operator">|</span>选修人数<span class="operator">|</span>最高分<span class="operator">|</span>最低分<span class="operator">|</span>平均分   <span class="operator">|</span>及格率  <span class="operator">|</span>中等率 <span class="operator">|</span>优良率  <span class="operator">|</span>优秀率<span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">01</span>  <span class="operator">|</span> 语文   <span class="operator">|</span>    <span class="number">6</span>  <span class="operator">|</span> <span class="number">80.0</span> <span class="operator">|</span><span class="number">31.0</span> <span class="operator">|</span><span class="number">64.50000</span> <span class="operator">|</span><span class="number">0.6667</span> <span class="operator">|</span><span class="number">0.3333</span> <span class="operator">|</span><span class="number">0.3333</span> <span class="operator">|</span><span class="number">0.0000</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">02</span>  <span class="operator">|</span> 数学   <span class="operator">|</span>    <span class="number">6</span>  <span class="operator">|</span> <span class="number">90.0</span> <span class="operator">|</span><span class="number">30.0</span> <span class="operator">|</span><span class="number">72.66667</span> <span class="operator">|</span><span class="number">0.8333</span> <span class="operator">|</span><span class="number">0.0000</span> <span class="operator">|</span><span class="number">0.5000</span> <span class="operator">|</span><span class="number">0.1667</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">03</span>  <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">6</span>  <span class="operator">|</span> <span class="number">99.0</span> <span class="operator">|</span><span class="number">20.0</span> <span class="operator">|</span><span class="number">68.50000</span> <span class="operator">|</span><span class="number">0.6667</span> <span class="operator">|</span><span class="number">0.0000</span> <span class="operator">|</span><span class="number">0.3333</span> <span class="operator">|</span><span class="number">0.3333</span><span class="operator">|</span></span><br><span class="line"><span class="keyword">select</span> sc.Cid <span class="keyword">as</span> 课程号, </span><br><span class="line">	c.Cname <span class="keyword">as</span> 课程名称, </span><br><span class="line">	<span class="built_in">count</span>(c.Cid) <span class="keyword">as</span> 选修人数, </span><br><span class="line">	<span class="built_in">max</span>(sc.score) <span class="keyword">as</span> 最高分, </span><br><span class="line">	<span class="built_in">min</span>(sc.score) <span class="keyword">as</span> 最低分, </span><br><span class="line">	<span class="built_in">avg</span>(sc.score) <span class="keyword">as</span> 平均分,</span><br><span class="line">	<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="operator">/</span> <span class="built_in">count</span>(c.Cid) <span class="keyword">as</span> 及格率,</span><br><span class="line">	<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score <span class="operator">&gt;=</span> <span class="number">70</span> <span class="keyword">and</span> sc.score <span class="operator">&lt;</span> <span class="number">80</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="operator">/</span> <span class="built_in">count</span>(c.Cid) <span class="keyword">as</span> 中等率,</span><br><span class="line">	<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score <span class="operator">&gt;=</span> <span class="number">80</span> <span class="keyword">and</span> sc.score <span class="operator">&lt;</span> <span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="operator">/</span> <span class="built_in">count</span>(c.Cid) <span class="keyword">as</span> 优良率,</span><br><span class="line">	<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="operator">/</span> <span class="built_in">count</span>(c.Cid) <span class="keyword">as</span> 优秀率</span><br><span class="line"><span class="keyword">from</span> sc, course c</span><br><span class="line"><span class="keyword">where</span> sc.Cid <span class="operator">=</span> c.Cid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c.Cid</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(c.Cid) <span class="keyword">desc</span>, c.Cid <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">20.</span> 查询出只选修两门课程的学生学号和姓名</span><br><span class="line"><span class="keyword">select</span> s.Sid, s.Sname, <span class="built_in">count</span>(sc.Cid) <span class="keyword">as</span> cnt</span><br><span class="line"><span class="keyword">from</span> student s, sc</span><br><span class="line"><span class="keyword">where</span> s.Sid <span class="operator">=</span> sc.Sid </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.Sid</span><br><span class="line"><span class="keyword">having</span> cnt <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">22.</span> 查询名字中含有「风」字的学生信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> Sname <span class="keyword">like</span> <span class="string">&#x27;%风%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">24.</span> 查询 <span class="number">1990</span> 年出生的学生名单</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">year</span>(Sage) <span class="operator">=</span> <span class="number">1990</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">33.</span> 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</span><br><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span>, sc.score</span><br><span class="line"><span class="keyword">from</span> teacher t, course c, sc, student s</span><br><span class="line"><span class="keyword">where</span> t.Tname <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span> <span class="keyword">and</span> t.Tid <span class="operator">=</span> c.Tid <span class="keyword">and</span> sc.Cid <span class="operator">=</span> c.Cid <span class="keyword">and</span> s.Sid <span class="operator">=</span> sc.Sid</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sc.score <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">40.</span> 查询各学生的年龄，只按年份来算</span><br><span class="line"><span class="keyword">select</span> Sname, <span class="keyword">year</span>(now())<span class="operator">-</span><span class="keyword">year</span>(Sage) <span class="keyword">as</span> age <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">41.</span> 按照出生日期来算，当前月日 <span class="operator">&lt;</span> 出生年月的月日，年龄减一</span><br><span class="line"><span class="keyword">select</span> Sname, timestampdiff(<span class="keyword">year</span>, Sage, now()) <span class="keyword">as</span> age <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">42.</span> 查询本周过生日的学生</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> week(now()) <span class="operator">=</span> week(Sage);</span><br><span class="line"></span><br><span class="line"><span class="number">43.</span> 查询下周过生日的学生</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> (week(now()) <span class="operator">+</span> <span class="number">1</span>) <span class="operator">=</span> week(Sage);</span><br><span class="line"></span><br><span class="line"><span class="number">44.</span> 查询本月过生日的学生</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">month</span>(now()) <span class="operator">=</span> <span class="keyword">month</span>(Sage);</span><br><span class="line"></span><br><span class="line"><span class="number">45.</span> 查询下月过生日的学生</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> (<span class="keyword">month</span>(now()) <span class="operator">+</span> <span class="number">1</span>) <span class="operator">=</span> <span class="keyword">month</span>(Sage);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - Vue 实例</title>
    <url>/2021/01/11/Vue%20-%20Vue%20%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="Vue-Vue-实例"><a href="#Vue-Vue-实例" class="headerlink" title="Vue - Vue 实例"></a>Vue - Vue 实例</h2><p>Vue参考文档：<a href="https://cn.vuejs.org/v2/guide/">Vue参考文档</a></p>
<h3 id="创建一个-Vue-实例"><a href="#创建一个-Vue-实例" class="headerlink" title="创建一个 Vue 实例"></a>创建一个 Vue 实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>选项对象</strong>可以在 <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE">API 文档</a>中浏览完整的选项列表。</p>
<h3 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h3><p>当一个 Vue 实例被创建时，它将 <code>data</code> 对象中的所有的 property 加入到 Vue 的<strong>响应式系统</strong>中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</p>
<h3 id="实例生命周期钩子"><a href="#实例生命周期钩子" class="headerlink" title="实例生命周期钩子"></a>实例生命周期钩子</h3><p>在实例生命周期的不同阶段被调用，如 <a href="https://cn.vuejs.org/v2/api/#created"><code>created</code></a> 、 <a href="https://cn.vuejs.org/v2/api/#mounted"><code>mounted</code></a>、<a href="https://cn.vuejs.org/v2/api/#updated"><code>updated</code></a> 和 <a href="https://cn.vuejs.org/v2/api/#destroyed"><code>destroyed</code></a>。生命周期钩子的 <code>this</code> 上下文指向调用它的 Vue 实例。</p>
<blockquote>
<p>不要在选项 property 或回调上使用箭头函数，比如 <code>created: () =&gt; console.log(this.a)</code> 或 <code>vm.$watch(&#39;a&#39;, newValue =&gt; this.myMethod())</code>。因为箭头函数并没有 <code>this</code>，<code>this</code> 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致错误。</p>
</blockquote>
<h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - Class 与 Style 绑定</title>
    <url>/2021/01/11/Vue%20-%20Class%20%E4%B8%8E%20Style%20%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="Vue-Class-与-Style-绑定"><a href="#Vue-Class-与-Style-绑定" class="headerlink" title="Vue - Class 与 Style 绑定"></a>Vue - Class 与 Style 绑定</h2><h3 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h3><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的语法表示 <code>active</code> 这个 class 存在与否将取决于数据 property <code>isActive</code>。</p>
<p>绑定的数据对象不必内联定义在模板里：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;text-danger&#x27;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以在这里绑定一个返回对象的计算属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  classObject: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      active: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;text-danger&#x27;</span>: <span class="built_in">this</span>.error &amp;&amp; <span class="built_in">this</span>.error.type === <span class="string">&#x27;fatal&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><p>可以把一个数组传给 <code>v-bind:class</code>，以应用一个 class 列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">  errorClass: <span class="string">&#x27;text-danger&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想根据条件切换列表中的 class，可以用三元表达式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在数组语法中也可以使用对象语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="用在组件上"><a href="#用在组件上" class="headerlink" title="用在组件上"></a>用在组件上</h4><p>当在一个自定义组件上使用 <code>class</code> property 时，这些 class 将被添加到该组件的根元素上面。这个元素上已经存在的 class 不会被覆盖。例如，如果你声明了这个组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;my-component&#x27;, &#123;</span><br><span class="line">  template: &#x27;<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar&quot;</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后在使用它的时候添加一些 class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">&quot;baz boo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>HTML 将被渲染为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar baz boo&quot;</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于带数据绑定 class 也同样适用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当 <code>isActive</code> 为 true时，HTML 将被渲染成为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar active&quot;</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h3><h4 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接绑定到一个样式对象通常更好，这会让模板更清晰：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:style=<span class="string">&quot;styleObject&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    fontSize: <span class="string">&#x27;13px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h4><p><code>v-bind:style</code> 的数组语法可以将多个<strong>样式对象</strong>应用到同一个元素上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - Vue-cli 创建项目</title>
    <url>/2021/01/12/Vue%20-%20Vue-cli%20%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Vue-Vue-cli-创建项目"><a href="#Vue-Vue-cli-创建项目" class="headerlink" title="Vue - Vue-cli 创建项目"></a>Vue - Vue-cli 创建项目</h1><ul>
<li><p>安装 node，npm，vue-cli</p>
</li>
<li><p>输入命令 vue create project</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Vue CLI v4<span class="number">.5</span><span class="number">.3</span></span><br><span class="line">┌──────────────────────────────────────────┐</span><br><span class="line">│                                          │</span><br><span class="line">│   New version available <span class="number">4.5</span><span class="number">.3</span> → <span class="number">4.5</span><span class="number">.10</span>   │</span><br><span class="line">│     Run npm i -g <span class="meta">@vue</span>/cli to update!     │</span><br><span class="line">│                                          │</span><br><span class="line">└──────────────────────────────────────────┘</span><br><span class="line"></span><br><span class="line">? Please pick a preset:</span><br><span class="line">  coderxdk ([Vue <span class="number">2</span>] babel)</span><br><span class="line">  Default ([Vue <span class="number">2</span>] babel, eslint)</span><br><span class="line">  Default (Vue <span class="number">3</span> Preview) ([Vue <span class="number">3</span>] babel, eslint)</span><br><span class="line">&gt; Manually select features</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project:</span><br><span class="line">&gt;( ) Choose Vue version</span><br><span class="line"> (*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) <span class="function">Progressive Web <span class="title">App</span> <span class="params">(PWA)</span> Support</span></span><br><span class="line"><span class="function"> <span class="params">(*)</span> Router</span></span><br><span class="line"><span class="function"> <span class="params">(*)</span> Vuex</span></span><br><span class="line"><span class="function"> <span class="params">( )</span> CSS Pre-processors</span></span><br><span class="line"><span class="function"> <span class="params">( )</span> Linter / Formatter</span></span><br><span class="line"><span class="function"> <span class="params">( )</span> Unit Testing</span></span><br><span class="line"><span class="function"> <span class="params">( )</span> E2E Testing</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Router, Vuex</span><br><span class="line">? Use history mode <span class="keyword">for</span> router? (Requires proper server setup <span class="keyword">for</span> index fallback in production) No</span><br><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.?</span><br><span class="line">  In dedicated config files</span><br><span class="line">&gt; In <span class="keyword">package</span>.json</span><br><span class="line"><span class="comment">// 这里问是否需要当作模板保存，选择 no</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">🎉  Successfully created project project.</span><br><span class="line">👉  Get started with the following commands:</span><br><span class="line"> $ cd project</span><br><span class="line"> $ npm run serve</span><br><span class="line"> <span class="comment">// 至此创建成功</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - axios基本使用</title>
    <url>/2021/01/12/Vue%20-%20axios%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Vue-axios基本使用"><a href="#Vue-axios基本使用" class="headerlink" title="Vue - axios基本使用"></a>Vue - axios基本使用</h2><p><a href="http://www.axios-js.com/zh-cn/docs/">axios中文文档</a></p>
<h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><p>可以使用 npm install axios 或者导入 axios.js 文件引入axios</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; info &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      info: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    axios</span><br><span class="line">      .get(<span class="string">&#x27;https://api.coindesk.com/v1/bpi/currentprice.json&#x27;</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="built_in">this</span>.info = response))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="真实示例：和数据协同工作"><a href="#真实示例：和数据协同工作" class="headerlink" title="真实示例：和数据协同工作"></a>真实示例：和数据协同工作</h3><p><strong>从一个 API 展示数据</strong></p>
<p>在这个例子中，我们需要的价格信息在 <code>response.data.bpi</code> 中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .get(<span class="string">&#x27;https://api.coindesk.com/v1/bpi/currentprice.json&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="built_in">this</span>.info = response.data.bpi))</span><br></pre></td></tr></table></figure>
<p>这让展示的工作变得容易了很多，所以我们可以更新 HTML 以从获取的数据中仅仅展示真正需要的信息。我们会创建一个<a href="https://cn.vuejs.org/v2/api/#Vue-filter">过滤器</a>来确保小数部分的合理展示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  currencydecimal (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.toFixed(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bitcoin Price Index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  &lt;div</span><br><span class="line">    v-for=&quot;currency in info&quot;</span><br><span class="line">    class=&quot;currency&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123; currency.description &#125;&#125;:</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;lighten&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;currency.symbol&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; currency.rate_float | currencydecimal &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>错误处理</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .get(<span class="string">&#x27;https://api.coindesk.com/v1/bpi/currentprice.json&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="built_in">this</span>.info = response.data.bpi))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - router基本使用</title>
    <url>/2021/01/17/Vue%20-%20router%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Vue-router基本使用"><a href="#Vue-router基本使用" class="headerlink" title="Vue - router基本使用"></a>Vue - router基本使用</h2><p><a href="https://router.vuejs.org/zh/guide/">vue-router 参考文档</a></p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul>
<li>安装  <code>npm install vue-router --save </code></li>
<li>创建路由组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    This is help page!</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Help&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>导入路由，使用路由，配置映射</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   path: <span class="string">&#x27;/help&#x27;</span>,</span><br><span class="line">   name: <span class="string">&#x27;Help&#x27;</span>,</span><br><span class="line">   component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Help.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<ul>
<li>挂载路由实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>视图渲染</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;router-link&gt; |</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt; |</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;help&quot;&gt;Help&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>设置history模式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="代码控制路由"><a href="#代码控制路由" class="headerlink" title="代码控制路由"></a>代码控制路由</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button @click&#x3D;&quot;toHelp&quot;&gt;Help&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，</span></span><br><span class="line"><span class="comment">例如history对象。经常用的跳转链接就可以用this.$router.push 来完成。</span></span><br><span class="line"><span class="comment">this.$router.push会往history栈中添加一个新的记录。</span></span><br><span class="line"><span class="comment">详见官方文档https://router.vuejs.org/zh/guide/essentials/navigation.html</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">route相当于当前正在跳转的路由对象。 </span></span><br><span class="line"><span class="comment">可以从里面获取name, path, params, query等。*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">toHelp</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$router);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route);</span><br><span class="line">            <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/help&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/help/:id&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Help&#x27;</span>,</span><br><span class="line">  component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Help.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link v-bind:to=<span class="string">&quot;/help/+id&quot;</span>&gt;Help&lt;/router-link&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            id: <span class="number">0</span></span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 id 参数</span></span><br><span class="line">&#123;&#123;<span class="built_in">this</span>.$route.params.id&#125;&#125;</span><br></pre></td></tr></table></figure>


<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><ul>
<li>新建组件HomeNews.vue</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;h2&gt;This is news page&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;HomeNews&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>配置映射关系</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">  component: Home,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">      component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/HomeNews.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Home.vue 中添加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;去News页面&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure>


<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><ol>
<li><p>上面提到的params就是一种参数传递的方式</p>
</li>
<li><p>query 方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link v-bind:to&#x3D;&quot;&#123;path: &#39;&#x2F;profile&#39;, query: &#123;id: 10&#125;&#125;&quot;&gt;Profile&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>
<p>取出参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;$route.query&#125;&#125;&lt;&#x2F;h3&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态修改网页标题</span></span><br><span class="line"><span class="comment">// 前置钩子</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 从 from 跳到 to</span></span><br><span class="line">  <span class="built_in">document</span>.title = to.name</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后置钩子</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="keep-alive-组件缓存"><a href="#keep-alive-组件缓存" class="headerlink" title="keep-alive 组件缓存"></a>keep-alive 组件缓存</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - slot基本使用</title>
    <url>/2021/01/17/Vue%20-%20slot%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Vue-slot基本使用"><a href="#Vue-slot基本使用" class="headerlink" title="Vue - slot基本使用"></a>Vue - slot基本使用</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><strong>方式1</strong> </p>
<ul>
<li>main.js 中添加</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;strong&gt;slot 插槽&lt;/strong&gt;</span></span><br><span class="line"><span class="string">        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>使用组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;cpn&gt;&lt;p&gt;slot内容1&lt;&#x2F;p&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;cpn&gt;&lt;p&gt;slot内容2&lt;&#x2F;p&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加vue.config.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    runtimeCompiler: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>方式2</strong></p>
<ul>
<li>创建组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Cpn2</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Cpn2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>注册组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    import Cpn2 from &#39;@&#x2F;views&#x2F;Cpn2.vue&#39;  &#x2F;&#x2F; @ 等价于 &#x2F;src 这个目录</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;MySlot&quot;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Cpn2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Cpn2&gt;&lt;p&gt;cpn2 哈哈哈&lt;&#x2F;p&gt;&lt;&#x2F;Cpn2&gt;</span><br></pre></td></tr></table></figure>


<h3 id="具名插槽的使用"><a href="#具名插槽的使用" class="headerlink" title="具名插槽的使用"></a>具名插槽的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 为插槽设置 name --&gt;</span><br><span class="line">&lt;slot name&#x3D;&quot;left&quot;&gt;&lt;&#x2F;slot&gt;  </span><br><span class="line">&lt;!-- 指定插槽 --&gt;</span><br><span class="line">&lt;Cpn2&gt;&lt;p slot&#x3D;&quot;left&quot;&gt;left 哈哈哈&lt;&#x2F;p&gt;&lt;&#x2F;Cpn2&gt;</span><br></pre></td></tr></table></figure>


<h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p>
<h3 id="作用域插槽的使用"><a href="#作用域插槽的使用" class="headerlink" title="作用域插槽的使用"></a>作用域插槽的使用</h3><ul>
<li>Cpn2.vue</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot :data&#x3D;&quot;pl&quot;&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;item in pl&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">  	&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Cpn2&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                pl: [&#39;Java&#39;, &#39;C++&#39;, &#39;C#&#39;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件获取到子组件的数据，以另一种方式进行展示 --&gt;</span><br><span class="line">&lt;Cpn2&gt;</span><br><span class="line">  &lt;template slot-scope&#x3D;&quot;slot&quot;&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;slot.data.join(&#39; - &#39;)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;Cpn2&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - vuex基本使用</title>
    <url>/2021/01/12/Vue%20-%20vuex%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Vue-vuex基本使用"><a href="#Vue-vuex基本使用" class="headerlink" title="Vue - vuex基本使用"></a>Vue - vuex基本使用</h1><p><a href="https://vuex.vuejs.org/zh/guide/">vuex参考文档</a></p>
<p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的**状态 (state)**。Vuex 和单纯的全局对象有以下两点不同：</p>
<ol>
<li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>
<li>不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>
</ol>
<h2 id="最简单的-Store"><a href="#最简单的-Store" class="headerlink" title="最简单的 Store"></a>最简单的 Store</h2><p>安装 <code>npm install vuex --save</code></p>
<p><code>store/index.js 代码</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      state.count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>为了在 Vue 组件中访问 <code>this.$store</code> property，需要为 Vue 实例提供创建好的 store。Vuex 提供了一个从根组件向所有子组件，以 <code>store</code> 选项的方式“注入”该 store 的机制：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,  <span class="comment">// key 和被传入的变量 同名</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>现在我们可以从组件的方法提交一个变更：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;about&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;cnt&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;increment&quot;&gt;+ 1&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#39;About&#39;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                cnt: &#39;&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            increment() &#123;</span><br><span class="line">                this.$store.commit(&#39;increment&#39;)</span><br><span class="line">                this.cnt &#x3D; this.$store.state.count</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p> 可以打开浏览器控制台，使用vue插件查看变更记录。再次强调，我们通过提交 mutation 的方式，而非直接改变 <code>store.state.count</code>，是因为我们想要更明确地追踪到状态的变化。这样也让我们有机会去实现一些能记录每次状态改变，保存状态快照的调试工具。</p>
<p><img src="https://vuex.vuejs.org/vuex.png"></p>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><h3 id="单一状态树"><a href="#单一状态树" class="headerlink" title="单一状态树"></a>单一状态树</h3><p>Vuex 使用<strong>单一状态树</strong>，用一个对象就包含了全部的应用层级状态。每个应用将仅仅包含一个 store 实例。</p>
<h3 id="在-Vue-组件中获得-Vuex-状态"><a href="#在-Vue-组件中获得-Vuex-状态" class="headerlink" title="在 Vue 组件中获得 Vuex 状态"></a>在 Vue 组件中获得 Vuex 状态</h3><p>由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Counter 组件</span></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每当 <code>store.state.count</code> 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。</p>
<p>Vuex 通过 <code>store</code> 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 <code>Vue.use(Vuex)</code>）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// 把 store 对象提供给 store 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;counter&gt;&lt;/counter&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>通过在根实例中注册 <code>store</code> 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code> 访问到。让我们更新下 <code>Counter</code> 的实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p>
<p>Getter 接受 state 作为其第一个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="通过属性访问"><a href="#通过属性访问" class="headerlink" title="通过属性访问"></a>通过属性访问</h3><p>Getter 会暴露为 <code>store.getters</code> 对象，你可以以属性的形式访问这些值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.getters.doneTodos <span class="comment">// -&gt; [&#123; id: 1, text: &#x27;...&#x27;, done: true &#125;]</span></span><br></pre></td></tr></table></figure>
<p>Getter 也可以接受其他 getter 作为第二个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  doneTodosCount: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.doneTodos.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.getters.doneTodosCount <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure>
<p>我们可以很容易地在任何组件中使用它：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.doneTodosCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p>
<h3 id="通过方法访问"><a href="#通过方法访问" class="headerlink" title="通过方法访问"></a>通过方法访问</h3><p>你也可以通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getTodoById: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.getters.getTodoById(<span class="number">2</span>) <span class="comment">// -&gt; &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure>
<p>注意，getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。</p>
<h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>不能直接调用 mutation handler。这个选项更像是事件注册：“当触发一个类型为 <code>increment</code> 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 <strong>store.commit</strong> 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="提交载荷（Payload）"><a href="#提交载荷（Payload）" class="headerlink" title="提交载荷（Payload）"></a>提交载荷（Payload）</h3><p>你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="对象风格的提交方式"><a href="#对象风格的提交方式" class="headerlink" title="对象风格的提交方式"></a>对象风格的提交方式</h3><p>提交 mutation 的另一种方式是直接使用包含 <code>type</code> 属性的对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  type: <span class="string">&#x27;increment&#x27;</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mutation-需遵守-Vue-的响应规则"><a href="#Mutation-需遵守-Vue-的响应规则" class="headerlink" title="Mutation 需遵守 Vue 的响应规则"></a>Mutation 需遵守 Vue 的响应规则</h3><p>既然 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：</p>
<ol>
<li>最好提前在你的 store 中初始化好所有所需属性。</li>
<li>当需要在对象上添加新属性时，你应该</li>
</ol>
<ul>
<li><p>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code>, 或者</p>
</li>
<li><p>以新对象替换老对象。例如，利用<a href="https://github.com/tc39/proposal-object-rest-spread">对象展开运算符 (opens new window)</a>我们可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">state.obj = &#123; ...state.obj, <span class="attr">newProp</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>删除使用 <code>Vue.delete(obj, key)</code></li>
</ol>
<h3 id="Mutation-必须是同步函数"><a href="#Mutation-必须是同步函数" class="headerlink" title="Mutation 必须是同步函数"></a>Mutation 必须是同步函数</h3><p>一条重要的原则就是要记住 <strong>mutation 必须是同步函数</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  someMutation (state) &#123;</span><br><span class="line">    api.callAsyncMethod(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p>
<h3 id="在组件中提交-Mutation"><a href="#在组件中提交-Mutation" class="headerlink" title="在组件中提交 Mutation"></a>在组件中提交 Mutation</h3><p>你可以在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code> 提交 mutation。</p>
<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Action 类似于 mutation，不同在于：</p>
<ul>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。</li>
</ul>
<p>一个简单的 action：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters。</p>
<h3 id="分发-Action"><a href="#分发-Action" class="headerlink" title="分发 Action"></a>分发 Action</h3><p>Action 通过 <code>store.dispatch</code> 方法触发：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.dispatch(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>可以在 action 内部执行<strong>异步</strong>操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Actions 支持同样的载荷方式和对象方式进行分发：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式分发</span></span><br><span class="line">store.dispatch(<span class="string">&#x27;incrementAsync&#x27;</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以对象形式分发</span></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">&#x27;incrementAsync&#x27;</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="在组件中分发-Action"><a href="#在组件中分发-Action" class="headerlink" title="在组件中分发 Action"></a>在组件中分发 Action</h3><p>在组件中使用 <code>this.$store.dispatch(&#39;xxx&#39;)</code> 分发 action。</p>
<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - 事件处理</title>
    <url>/2021/01/11/Vue%20-%20%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="Vue-事件处理"><a href="#Vue-事件处理" class="headerlink" title="Vue - 事件处理"></a>Vue - 事件处理</h2><h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;example-1&quot;</span>&gt;</span><br><span class="line">  &lt;button v-on:click=<span class="string">&quot;counter += 1&quot;</span>&gt;Add <span class="number">1</span>&lt;/button&gt;</span><br><span class="line">  &lt;p&gt;The button above has been clicked &#123;&#123; counter &#125;&#125; times.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    counter: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h3><p> <code>v-on</code> 可以接收一个需要调用的方法名称。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- `greet` 是方法名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h3><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;example-3&quot;</span>&gt;</span><br><span class="line">  &lt;button v-on:click=<span class="string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;Say hi&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-3&#x27;</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">      alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=<span class="string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;Submit&lt;/button&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">  warn: <span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 现在我们可以访问原生事件对象</span></span><br><span class="line">    <span class="keyword">if</span> (event) &#123;</span><br><span class="line">      event.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">    alert(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</p>
<p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p>
<p><code>.stop</code> <code>.prevent</code> <code>.capture</code> <code>.self</code> <code>.once</code> <code>.passive</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p>
<h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><p>Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Vue 提供了绝大多数常用的按键码的别名：</p>
<p><code>.enter</code> <code>.tab</code> <code>.delete</code> (捕获“删除”和“退格”键) <code>.esc</code> <code>.space</code> <code>.up</code> <code>.down</code> <code>.left</code> <code>.right</code></p>
<h3 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h3><blockquote>
<p>2.1.0 新增   可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p>
</blockquote>
<p><code>.ctrl</code> <code>.alt</code> <code>.shift</code> <code>.meta</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.alt.67</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>请注意修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。如果你想要这样的行为，请为 <code>ctrl</code> 换用 <code>keyCode</code>：<code>keyup.17</code>。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - 列表渲染</title>
    <url>/2021/01/11/Vue%20-%20%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h2 id="Vue-列表渲染"><a href="#Vue-列表渲染" class="headerlink" title="Vue - 列表渲染"></a>Vue - 列表渲染</h2><h3 id="v-for-基本使用"><a href="#v-for-基本使用" class="headerlink" title="v-for 基本使用"></a><code>v-for</code> 基本使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.message&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持可选的第二个参数，即当前项的索引。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-2&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMessage: <span class="string">&#x27;Parent&#x27;</span>,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="v-for-里使用对象"><a href="#v-for-里使用对象" class="headerlink" title="v-for 里使用对象"></a><code>v-for</code> 里使用对象</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in object&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#v-for-object&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      title: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class="line">      author: <span class="string">&#x27;Jane Doe&#x27;</span>,</span><br><span class="line">      publishedAt: <span class="string">&#x27;2016-04-10&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>可以提供第二个的参数为 property 名称 (也就是键名)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以用第三个参数作为索引：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name, index) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="维护状态"><a href="#维护状态" class="headerlink" title="维护状态"></a>维护状态</h3><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，需要为每项提供一个唯一 <code>key</code> attribute：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>尽可能在使用 <code>v-for</code> 时提供 <code>key</code> attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。不要使用对象或数组之类的非基本类型值作为 <code>v-for</code> 的 <code>key</code>。请用字符串或数值类型的值。</p>
<h3 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h3><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p>
<p><code>push()</code>  <code>pop()</code>  <code>shift()</code>  <code>unshift()</code>  <code>splice()</code>  <code>sort()</code>   <code>reverse()</code></p>
<p>非变更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>。它们不会变更原始数组，而<strong>总是返回一个新数组</strong>。</p>
<p>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in array&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#v-for-object&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        array: [</span><br><span class="line">            <span class="number">10</span>,</span><br><span class="line">            <span class="number">20</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在浏览器控制台使用  <code>vm.array[0]=1</code>  无法被检测。</p>
<h3 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤/排序后的结果"></a>显示过滤/排序后的结果</h3><p>若要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据，可以创建一个计算属性，来返回过滤或排序后的数组。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in evenNumbers&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  numbers: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  evenNumbers: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在计算属性不适用的情况下 (在嵌套 <code>v-for</code> 循环中) 可以使用一个方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;set in sets&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in even(set)&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  sets: [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  even: <span class="function"><span class="keyword">function</span> (<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="在-v-for-里使用值范围"><a href="#在-v-for-里使用值范围" class="headerlink" title="在 v-for 里使用值范围"></a>在 <code>v-for</code> 里使用值范围</h3><p><code>v-for</code> 也可以接受整数。在这种情况下，它会把模板重复对应次数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="在-template-上使用-v-for"><a href="#在-template-上使用-v-for" class="headerlink" title="在 template 上使用 v-for"></a>在 <code>template</code> 上使用 <code>v-for</code></h3><p>类似于 <code>v-if</code>，你也可以利用带有 <code>v-for</code> 的 <code>&lt;template&gt;</code> 来循环渲染一段包含多个元素的内容。比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="v-for-与-v-if-一同使用"><a href="#v-for-与-v-if-一同使用" class="headerlink" title="v-for 与 v-if 一同使用"></a><code>v-for</code> 与 <code>v-if</code> 一同使用</h3><p>注意我们<strong>不</strong>推荐在同一元素上使用 <code>v-if</code> 和 <code>v-for</code>。</p>
<p>当它们处于同一节点，<code>v-for</code> 的优先级比 <code>v-if</code> 更高，这意味着 <code>v-if</code> 将分别重复运行于每个 <code>v-for</code> 循环中。当你只想为<strong>部分</strong>项渲染节点时，这种优先级的机制会十分有用，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; todo &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的代码将只渲染未完成的 todo。</p>
<p>而如果你的目的是有条件地跳过循环的执行，那么可以将 <code>v-if</code> 置于外层元素上。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;todos.length&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No todos left!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="在组件上使用-v-for"><a href="#在组件上使用-v-for" class="headerlink" title="在组件上使用 v-for"></a>在组件上使用 <code>v-for</code></h3><p>在自定义组件上，你可以像在任何普通元素上一样使用 <code>v-for</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.2.0+ 的版本里，当在组件上使用 <code>v-for</code> 时，<code>key</code> 现在是必须的。</p>
</blockquote>
<p>然而，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要使用 prop：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in array&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;item.title&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">    template: <span class="string">&#x27;#cpn&#x27;</span>,</span><br><span class="line">    props: [<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        array: [</span><br><span class="line">            &#123;<span class="attr">title</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">title</span>: <span class="string">&#x27;world&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - 模板语法</title>
    <url>/2021/01/11/Vue%20-%20%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Vue-模板语法"><a href="#Vue-模板语法" class="headerlink" title="Vue - 模板语法"></a>Vue - 模板语法</h2><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><p>常见的形式就是使用 “Mustache” 语法的文本插值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过使用 v-once 指令，能执行一次性地插值。</p>
<h4 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h4><p>为了输出真正的 HTML，你需要使用 <code>v-html</code> 指令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        rawHtml: &#x27;<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: #00B7FF&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h4><p>属性绑定应该使用 <code>v-bind</code> 指令：</p>
<p>对于布尔 attribute (它们只要存在就意味着值为 <code>true</code>)，<code>v-bind</code> 工作起来略有不同，在这个例子中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果 <code>isButtonDisabled</code> 的值是 <code>null</code>、<code>undefined</code> 或 <code>false</code>，则 <code>disabled</code> attribute 甚至不会被包含在渲染出来的 <code>&lt;button&gt;</code> 元素中。</p>
<h4 id="使用JavaScript表达式"><a href="#使用JavaScript表达式" class="headerlink" title="使用JavaScript表达式"></a>使用JavaScript表达式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>


<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里 <code>href</code> 是参数，告知 <code>v-bind</code> 指令将该元素的 <code>href</code> attribute 与表达式 <code>url</code> 的值绑定。</p>
<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>修饰符是 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form v-on:submit.prevent&#x3D;&quot;onSubmit&quot;&gt;...&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>


<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-bind 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-on 缩写 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - 条件渲染</title>
    <url>/2021/01/11/Vue%20-%20%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h2 id="Vue-条件渲染"><a href="#Vue-条件渲染" class="headerlink" title="Vue - 条件渲染"></a>Vue - 条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。如果想切换多个元素，可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span></span><br><span class="line">  Now you see me</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Now you don&#x27;t</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p>
<h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span> A <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span> B <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span> C <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span> Not A/B/C <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="用-key-管理可复用的元素"><a href="#用-key-管理可复用的元素" class="headerlink" title="用 key 管理可复用的元素"></a>用 <code>key</code> 管理可复用的元素</h3><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那么在上面的代码中切换 <code>loginType</code> 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，<code>&lt;input&gt;</code> 不会被替换掉——仅仅是替换了它的 <code>placeholder</code>。 </p>
<p>所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。添加具有唯一值的 <code>key</code> 即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS property <code>display</code>。<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p>
<h2 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if  vs v-show"></a>v-if  vs v-show</h2><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>
<p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做，直到条件第一次变为真，才开始渲染条件块。</p>
<p><code>v-show</code> 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
<p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。若需要频繁切换，则使用 <code>v-show</code> ；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>
<h2 id="v-if-与-v-for-一起使用"><a href="#v-if-与-v-for-一起使用" class="headerlink" title="v-if 与 v-for 一起使用"></a>v-if 与 v-for 一起使用</h2><p><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code>。当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - 组件基础</title>
    <url>/2021/01/12/Vue%20-%20%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="Vue-组件基础"><a href="#Vue-组件基础" class="headerlink" title="Vue - 组件基础"></a>Vue - 组件基础</h2><h3 id="基本示例（全局注册）"><a href="#基本示例（全局注册）" class="headerlink" title="基本示例（全局注册）"></a>基本示例（全局注册）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class="line">    template: <span class="string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">&#x27;#components-demo&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>


<h3 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h3><p>你可以将组件进行任意次数的复用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每个组件都会各自独立维护它的 <code>count</code>。因为你每用一次组件，就会有一个它的新<strong>实例</strong>被创建。</p>
<h4 id="data-必须是一个函数"><a href="#data-必须是一个函数" class="headerlink" title="data 必须是一个函数"></a><code>data</code> 必须是一个函数</h4><p><strong>一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="组件的组织"><a href="#组件的组织" class="headerlink" title="组件的组织"></a>组件的组织</h3><p> Vue 两种组件的注册类型：<strong>全局注册</strong>和<strong>局部注册</strong>。详见   <a href="https://cn.vuejs.org/v2/guide/components-registration.html">组件注册</a></p>
<h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123;</span><br><span class="line">    template: <span class="string">&#x27;#cpn&#x27;</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">      message: <span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 <code>components</code> 选项中定义你想要使用的组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;component-a&#x27;</span>: ComponentA,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>对于 <code>components</code> 对象来说，其 property 名就是自定义元素的名字，其值就是这个组件对象。</p>
<p><strong>局部注册的组件在其子组件中不可用</strong>。如果希望 <code>ComponentA</code> 在 <code>ComponentB</code> 中可用，则需要这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;component-a&#x27;</span>: ComponentA</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者如果你通过 Babel 和 webpack 使用 ES2015 模块，那么代码看起来更像：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">&#x27;./ComponentA.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ComponentA</code> 的变量名其实是 <code>ComponentA: ComponentA</code> 的缩写，即这个变量名同时是：</p>
<ul>
<li>用在模板中的自定义元素的名称</li>
<li>包含了这个组件选项的变量名</li>
</ul>
<h4 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h4><p><strong>在模块系统中局部注册</strong></p>
<p>在这些情况下，我们推荐创建一个 <code>components</code> 目录，并将每个组件放置在其各自的文件中。然后你需要在局部注册之前导入每个你想使用的组件。例如，在一个假设的 <code>ComponentB.js</code> 或 <code>ComponentB.vue</code> 文件中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">&#x27;./ComponentA&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ComponentC <span class="keyword">from</span> <span class="string">&#x27;./ComponentC&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA,</span><br><span class="line">    ComponentC</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在 <code>ComponentA</code> 和 <code>ComponentC</code> 都可以在 <code>ComponentB</code> 的模板中使用了。</p>
<h3 id="通过-Prop-向子组件传递数据"><a href="#通过-Prop-向子组件传递数据" class="headerlink" title="通过 Prop 向子组件传递数据"></a>通过 Prop 向子组件传递数据</h3><p>Prop 是你可以在组件上注册的一些自定义 attribute。当一个值传递给一个 prop attribute 的时候，它就变成了那个组件实例的一个 property。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blog-post-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-for</span>=<span class="string">&quot;post in posts&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;post.id&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;post.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">    template: <span class="string">&#x27;&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#blog-post-demo&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        posts: [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;My journey with Vue&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;Blogging with Vue&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;Why Vue is so fun&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="单个根元素"><a href="#单个根元素" class="headerlink" title="单个根元素"></a>单个根元素</h3><p><strong>每个组件必须只有一个根元素</strong></p>
<p> <code>&lt;blog-post&gt;</code> 组件可以接受一个单独的 <code>post</code> prop：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;post&#x27;</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;blog-post&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      &lt;div v-html=&quot;post.content&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blog-posts-events-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; fontSize: postFontSize + &#x27;em&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">    &lt;blog-post</span><br><span class="line">        v-for=&quot;post in posts&quot;</span><br><span class="line">        v-bind:key=&quot;post.id&quot;</span><br><span class="line">        v-bind:post=&quot;post&quot;</span><br><span class="line">        v-on:enlarge=&quot;postFontSize += 0.1&quot;</span><br><span class="line">    &gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过 v-on 监听子组件实例的enlarge事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件可以通过调用 $emit 方法并传入事件名称来触发一个事件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;post&#x27;</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;blog-post&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">          &lt;button v-on:click=&quot;$emit(&#x27;enlarge&#x27;)&quot;&gt;Enlarge&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#blog-posts-events-demo&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        posts: [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;My journey with Vue&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;Blogging with Vue&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;Why Vue is so fun&#x27;</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">        postFontSize: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h4 id="使用事件抛出一个值"><a href="#使用事件抛出一个值" class="headerlink" title="使用事件抛出一个值"></a>使用事件抛出一个值</h4><p>例如让 <code>&lt;blog-post&gt;</code> 组件决定它的文本要放大多少。这时可以使用 <code>$emit</code> 的第二个参数来提供这个值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;enlarge&#x27;, 0.1)&quot;</span>&gt;</span>Enlarge<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后当在父级组件监听这个事件的时候，我们可以通过 <code>$event</code> 访问到被抛出的这个值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  ...</span><br><span class="line">  v-on:enlarge=&quot;postFontSize += $event&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者这个事件处理函数是一个方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  ...</span><br><span class="line">  v-on:enlarge=&quot;onEnlargeText&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那么这个值将会作为第一个参数传入这个方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  onEnlargeText: <span class="function"><span class="keyword">function</span> (<span class="params">enlargeAmount</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.postFontSize += enlargeAmount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="在组件上使用-v-model"><a href="#在组件上使用-v-model" class="headerlink" title="在组件上使用 v-model"></a>在组件上使用 <code>v-model</code></h4><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。记住：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText = $event.target.value&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>当用在组件上时，<code>v-model</code> 则会这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;custom-input</span><br><span class="line">  v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText = $event&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p>
<ul>
<li>将其 <code>value</code> attribute 绑定到一个名叫 <code>value</code> 的 prop 上</li>
<li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</li>
</ul>
<p>写成代码之后是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;custom-input&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">      v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>现在 <code>v-model</code> 就应该可以在这个组件上完美地工作起来了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h3><p>和 HTML 元素一样，我们经常需要向一个组件传递内容，像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span></span><br><span class="line">  Something bad happened.</span><br><span class="line"><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用Vue 自定义的 <code>&lt;slot&gt;</code> 元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;alert-box&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;demo-alert-box&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;strong&gt;Error!&lt;/strong&gt;</span></span><br><span class="line"><span class="string">      &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - 表单输入绑定</title>
    <url>/2021/01/11/Vue%20-%20%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="Vue-表单输入绑定"><a href="#Vue-表单输入绑定" class="headerlink" title="Vue - 表单输入绑定"></a>Vue - 表单输入绑定</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。</p>
<p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值，将 Vue 实例的数据作为数据来源。</p>
<p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li>
<li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li>
<li>select 字段将 <code>value</code> 作为 property 并将 <code>change</code> 作为事件。</li>
</ul>
<h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;edit me&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space: pre-line;&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;add multiple lines&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p>单个复选框，绑定到布尔值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>多个复选框，绑定到同一个数组：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jack&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;john&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;john&quot;</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mike&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mike&quot;</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    checkedNames: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;One&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Two&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-4&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    picked: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h4><p>单选时：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>推荐像上面这样提供一个值为空的禁用选项。</p>
<p>多选时 (绑定到一个数组)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">multiple</span> <span class="attr">style</span>=<span class="string">&quot;width: 50px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-6&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>用 <code>v-for</code> 渲染的动态选项：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;option in options&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;option.value&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; option.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    options: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;One&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Two&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;B&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Three&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;C&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h3><p>对于单选按钮，复选框及选择框的选项，<code>v-model</code> 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当选中时，`picked` 为字符串 &quot;a&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `toggle` 为 true 或 false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当选中第一个选项时，`selected` 为字符串 &quot;abc&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是有时我们可能想把值绑定到 Vue 实例的一个动态 property 上，这时可以用 <code>v-bind</code> 实现，并且这个 property 的值可以不是字符串。</p>
<h4 id="复选框-1"><a href="#复选框-1" class="headerlink" title="复选框"></a>复选框</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  type=&quot;checkbox&quot;</span><br><span class="line">  v-model=&quot;toggle&quot;</span><br><span class="line">  true-value=&quot;yes&quot;</span><br><span class="line">  false-value=&quot;no&quot;&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.toggle === <span class="string">&#x27;yes&#x27;</span></span><br><span class="line"><span class="comment">// 当没有选中时</span></span><br><span class="line">vm.toggle === <span class="string">&#x27;no&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这里的 <code>true-value</code> 和 <code>false-value</code> attribute 并不会影响输入控件的 <code>value</code> attribute，因为浏览器在提交表单时并不会包含未被选中的复选框。如果要确保表单中这两个值中的一个能够被提交，(即“yes”或“no”)，请换用单选按钮。</p>
<h4 id="单选按钮-1"><a href="#单选按钮-1" class="headerlink" title="单选按钮"></a>单选按钮</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pick&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.pick === vm.a</span><br></pre></td></tr></table></figure>
<h4 id="选择框的选项"><a href="#选择框的选项" class="headerlink" title="选择框的选项"></a>选择框的选项</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内联对象字面量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;&#123; number: 123 &#125;&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line"><span class="keyword">typeof</span> vm.selected <span class="comment">// =&gt; &#x27;object&#x27;</span></span><br><span class="line">vm.selected.number <span class="comment">// =&gt; 123</span></span><br></pre></td></tr></table></figure>


<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul>
<li><code>.lazy</code></li>
</ul>
<p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件_之后_进行同步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在change时而非input时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>.number</code></li>
</ul>
<p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这通常很有用，因为即使在 <code>type=&quot;number&quot;</code> 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 <code>parseFloat()</code> 解析，则会返回原始的值。</p>
<ul>
<li><code>.trim</code></li>
</ul>
<p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - 计算属性和侦听器</title>
    <url>/2021/01/11/Vue%20-%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Vue-计算属性和侦听器"><a href="#Vue-计算属性和侦听器" class="headerlink" title="Vue - 计算属性和侦听器"></a>Vue - 计算属性和侦听器</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><h4 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;example&quot;</span>&gt;</span><br><span class="line">  &lt;p&gt;Original message: <span class="string">&quot;&#123;&#123; message &#125;&#125;&quot;</span>&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Computed reversed message: <span class="string">&quot;&#123;&#123; reversedMessage &#125;&#125;&quot;</span>&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        <span class="function"><span class="title">reversedMessage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// this指向 vm 实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h4 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h4><p><strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果。相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>
<h4 id="计算属性-vs-侦听属性"><a href="#计算属性-vs-侦听属性" class="headerlink" title="计算属性 vs 侦听属性"></a>计算属性 vs 侦听属性</h4><p>以下例子更好的做法是使用计算属性而不是命令式的 <code>watch</code> 回调。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">    fullName: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = val + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上面代码是命令式且重复的。将它与计算属性的版本进行比较：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h4 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h4><p>计算属性默认只有 getter，需要时可以提供一个 setter。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">set: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>


<h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p> Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">    fullName: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = val + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端基础</title>
    <url>/2021/01/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>前端基础</p>
<p><a href="https://www.w3school.com.cn/h.asp">HTML参考文档</a></p>
<p><a href="https://www.w3school.com.cn/h.asp">CSS参考文档</a></p>
<p><a href="https://www.w3school.com.cn/js/index.asp">JavaScript参考文档</a></p>
<p><a href="https://jquery.cuishifeng.cn/index.html">jQuery参考文档</a></p>
<p><strong>CSS选择器</strong></p>
<ul>
<li><p>标签选择器</p>
</li>
<li><p>id选择器</p>
</li>
<li><p>类选择器 </p>
</li>
<li><p>后代选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.d</span> <span class="selector-tag">p</span> &#123;&#125; &lt;!<span class="selector-tag">--</span> <span class="selector-tag">class</span> 为 <span class="selector-tag">d</span>，后代为 <span class="selector-tag">p</span> 标签 <span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>交集选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.p2</span> &#123;&#125; &lt;!<span class="selector-tag">--</span> 中间没有空格(<span class="selector-tag">p</span><span class="selector-class">.p2</span> 又叫 <span class="selector-tag">p</span> 标签 又叫<span class="selector-tag">p2</span>) <span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>并集选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.d4</span> <span class="selector-tag">h1</span>,<span class="selector-tag">li</span> &#123;&#125; &lt;!<span class="selector-tag">--</span> 中间用逗号隔开 <span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>通配符  (*)</p>
</li>
</ul>
<p><strong>盒模型</strong></p>
<ul>
<li>width：指的是内容区域的宽度</li>
<li>height：值得是内容区域的高度</li>
<li>padding：内边距</li>
<li>border：边框</li>
<li>margin：外边距</li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的使用</title>
    <url>/2021/01/19/Git/</url>
    <content><![CDATA[<h1 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h1><p><a href="https://learngitbranching.js.org/">https://learngitbranching.js.org</a> git 学习网站</p>
<p><a href="http://www.javaboy.org/git/">http://www.javaboy.org/git/</a></p>
<h2 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h2><p><strong>工作区和暂存区</strong></p>
<p><img src="http://www.javaboy.org/images/git/p166.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">工作区很好理解，就是我们能看到的工作目录，就是本地的文件夹。</span><br><span class="line">这些本地的文件夹我们要通过 git add 命令先将他们添加到暂存区中。</span><br><span class="line">git commit 命令则可以将暂存区中的文件提交到本地仓库中去。</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">-初始化仓库     git init</span></span><br><span class="line"><span class="comment">-查看仓库状态   git status</span></span><br><span class="line"><span class="comment">-添加文件到暂存区   git add filename</span></span><br><span class="line"><span class="comment">-提交到本地仓库   git commit -m &quot;备注&quot;</span></span><br><span class="line"><span class="comment">-修改提交备注   git commit --amend</span></span><br><span class="line"><span class="comment">-查看提交日志   git log</span></span><br><span class="line"><span class="comment">-显示日志简略信息   git log --pretty=short</span></span><br><span class="line"><span class="comment">-查看某一个文件的提交日志   git log filename</span></span><br><span class="line"><span class="comment">-查看提交时文件的变化，加上 -p 参数即可，绿色的 + 表示新增的行，红色的 - 表示删除的行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-git log 有一个局限性，就是不能查看已经删除的 commit 的日志。举个例子：下班了，我发现今天下午提交的代码全都是有问题的，于是做了一个版本回退，回退到今天早上的状态，然后关机回家，第二天来了后我发现搞错了，其实那些代码都是 OK 的，于是我又想让仓库版本前进到昨天下午的状态，却发现 git log 命令查看不到昨天下午提交的版本号。此时，我们可以使用 git reflog 命令来实现这一个请求， git reflog 命令可以显示整个本地仓库的 commit, 包括所有 branch 的 commit, 甚至包括已经撤销的 commit, 只要 HEAD 发生了变化, 就会在 reflog 里面看得到，而 git log 只显示当前分支的 commit ，并且不显示删除掉的 commit。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-查看更改前后的差异 </span></span><br><span class="line"><span class="comment">git diff 命令可以查看工作区和暂存区的区别以及工作区和最新提交的差别</span></span><br><span class="line"><span class="comment">工作区和本地仓库中最新提交的内容的差异，可以通过 git diff HEAD 命令查看</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-压缩提交历史</span></span><br><span class="line"><span class="comment">git rebase -i 命令可以实现提交历史的压缩。比如我们在开发某一个功能时，提交了很多次，当所有功能都写完时，想将这些提交压缩为一个，就可以使用该命令。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


<h2 id="Git-中的后悔药"><a href="#Git-中的后悔药" class="headerlink" title="Git 中的后悔药"></a>Git 中的后悔药</h2><h3 id="工作区的代码撤销"><a href="#工作区的代码撤销" class="headerlink" title="工作区的代码撤销"></a>工作区的代码撤销</h3><p>可能有一天我正在写代码，写了很久发现写错了，想恢复到一开始的状态，一个笨办法就是把刚刚写的代码一行一行的删除，不过这种方式成本太高，我们可以通过 <code>git checkout -- &lt;file&gt;</code> 命令来撤销工作区的代码修改。</p>
<p><img src="http://www.javaboy.org/images/git/p182.gif"></p>
<p>首先我们执行了 git status 命令，发现工作区是干净的，然后执行了 cat 命令，发现文件只有两行内容，然后通过 vi 编辑器向文件中添加一行，保存并退出，退出来之后又执行了 git status 命令，此时工作区的状态已经发生变化，然后我们执行了 git checkout – git01.txt 命令，表示撤销之前的操作，让 git01.txt 恢复到之前的状态，该命令执行成功之后，我们再执行 cat 命令发现文件内容已经恢复了，此时再执行 git status ，状态也恢复了。</p>
<h3 id="暂存区的代码想撤销"><a href="#暂存区的代码想撤销" class="headerlink" title="暂存区的代码想撤销"></a>暂存区的代码想撤销</h3><p>代码已经提交到暂存区也能撤销，分两个步骤：</p>
<p>1.将暂存区的代码撤销到工作区  <code>git reset HEAD</code><br>2.将工作区的代码撤销</p>
<h3 id="提交到本地仓库的代码想撤销"><a href="#提交到本地仓库的代码想撤销" class="headerlink" title="提交到本地仓库的代码想撤销"></a>提交到本地仓库的代码想撤销</h3><p>利用 <code>git reset --hard &lt;版本号&gt;</code> 命令来实现版本回退，该命令中的版本号有几种不同的写法：</p>
<blockquote>
<p>1.可以使用 HEAD^ 来描述版本，一个 ^ 表示前一个版本，两个 ^^ 表示前两个版本，以此类推。<br>2.也可以使用数字来代替 ^ ，比如说前 100 个版本可以写作 HEAD~100 。<br>3.也可以直接写版本号，表示跳转到某一个版本处。我们每次提交成功后，都会生成一个哈希码作为版本号，所以这里我们也可以直接填版本号，哈希码很长，但是只需要输入前面几个字符即可。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">通过 git log 查看当前提交日志</span><br><span class="line">git reset HEAD^^ 向前回退两个版本</span><br><span class="line">查看日志，发现最后一次提交的版本号是 695ce1fe , 利用 git reset --hard 695ce1fe 命令回到回退之前的状态</span><br><span class="line">通过 git reset --hard HEAD~<span class="number">1</span> 回到上一个版本</span><br></pre></td></tr></table></figure>


<h2 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2><p><strong>分支的必要性</strong></p>
<p>在完成一个项目时，不可能是“单线程”开发的，例如：项目 2.0 版本上线了，现在要着手开发 3.0 版本，同时 2.0 版本可能还有一些 bug 需要修复，这些 bug 修复之后我们可能还会发 2.1，2.2，2.3 这些版本，我们不可能等所有 bug 都修复完了再去开发 3.0 版本，修复 2.0 的 bug 和开发 3.0 的新功能是两个并行的任务，这个时候我们 3.0 的功能开发直接在 master 分支上进行肯定不合适，我们要保证有一个稳定，可以随时发版本的分支存在（一般情况下这个角色由 master 分支来扮演），此时我们就可以灵活的使用 Git 中的分支管理功能：</p>
<ol>
<li>创建一个长期分支用来开发 3.0 功能，假设这个分支的名字就叫 v3，我们在 v3 上添加新功能，并不断测试，当    v3 稳定后，将 v3 合并到 master 分支上。</li>
<li>创建一个特性分支用来修复 2.0 的 bug ，一旦 bug 修复成功，就将该分支合并到 master 上，一发现新 bug，    就立马再创建分支进行修复，修复成功之后再合并。</li>
</ol>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><p> <code>git branch</code> 命令来查看当前仓库有哪些分支，处于哪一个分支。</p>
<h3 id="分支创建和切换"><a href="#分支创建和切换" class="headerlink" title="分支创建和切换"></a>分支创建和切换</h3><p><code>git branch &lt;分支名&gt;</code> 命令来创建一个分支，然后利用 <code>git checkout &lt;分支名&gt;</code> 来切换分支</p>
<p> <code>git checkout -b &lt;分支名&gt;</code>  创建并切换分支</p>
<p> <code>git checkout -</code>  切换回上一个分支</p>
<h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><ol>
<li><p>现在切换到 fa 分支，由于 fa 分支是从 master 分支中创建出来的，所以 fa 分支的内容和 master 分支的内容一致，然后在 fa 分支中向 git01.txt 文件添加一行内容并提交，此时 fa 分支中的 git01.txt 和 master 分支中 git01.txt 的内容就不相同。</p>
</li>
<li><p>现在通过 git merge –no-ff &lt;分支名&gt; 命令将 fa 分支合并到 master 分支上。其中 –no-ff 表示强行关闭 fast-forward 方式， fast-forward 方式表示当条件允许时， git 直接把 HEAD 指针指向合并分支的头，完成合并，这种方式合并速度快，但是在整个过程中没有创建 commit，所以如果当我们删除掉这个分支时就再也找不回来了，因此在这里我们将之关闭。</p>
</li>
<li><p>想要合并分支，我们先切换到 master 分支上，然后执行 git merge –no-ff fa 命令即可完成分支合并，合并成功后，我们看到 master 分支上的 git01.txt 上已经有了 fa 分支中的内容了。 </p>
</li>
</ol>
<p><code>git log --graph</code> 命令来直观的查看分支的创建和合并等操作。</p>
<h3 id="分支衍合"><a href="#分支衍合" class="headerlink" title="分支衍合"></a>分支衍合</h3><p>所谓的分支衍合其实也是分支合并的一种方式，下面我们就来看看这个分支衍合到底是什么样的。现在我的 master 分支的内容和 fa 分支的内容是保持一致的，fa 是从 master 中创建出来的，如下图：</p>
<p><a href="http://www.javaboy.org/images/git/p195.png"><img src="http://www.javaboy.org/images/git/p195.png" alt="p195"></a></p>
<p>现在向 fa 和 master 中各自做一次提交，如下图：</p>
<p><a href="http://www.javaboy.org/images/git/p196.png"><img src="http://www.javaboy.org/images/git/p196.png" alt="p196"></a></p>
<p>此时我们执行如下两条命令将两个分支合并：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout fa</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase master</span></span><br></pre></td></tr></table></figure>
<p>rebase 命令在执行的过程中会首先把 fa 中的每个 commit 取消，并且将之保存为临时 patch ，再将 fa 分支更新为最新的 master 分支，然后再把那些临时的 patch 应用到 fa 上，此时 fa 分支将指向新创建的 commit 上，那些老的 commit 将会被丢弃，这些被丢弃的 commit 在执行 git gc 命令时会被删除。合并后的分支如下图：</p>
<p><a href="http://www.javaboy.org/images/git/p197.png"><img src="http://www.javaboy.org/images/git/p197.png" alt="p197"></a></p>
<p> <code>git rebase master</code> 命令在执行的过程中有可能会发生冲突，发生冲突时我们有两种方案，一种直接退回到之前的状态，另一种就是解决冲突继续提交。</p>
<h3 id="退回到之前的状态"><a href="#退回到之前的状态" class="headerlink" title="退回到之前的状态"></a>退回到之前的状态</h3><p>可以通过如下命令来回到之前的状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>不过大多数情况下都是要解决冲突，解决后继续提交。用编辑器打开冲突的文件，看到的内容可能是这样的：</p>
<p><a href="http://www.javaboy.org/images/git/p198.png"><img src="http://www.javaboy.org/images/git/p198.png" alt="p198"></a></p>
<p><code>======</code>上面的是 HEAD 中的内容，下面的是要合并的内容，根据自己的需求编辑文件，编辑完成之后，通过如下两条命令继续完成合并：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add git01.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase --<span class="built_in">continue</span></span></span><br></pre></td></tr></table></figure>
<p>如下图：</p>
<p><a href="http://www.javaboy.org/images/git/p199.png"><img src="http://www.javaboy.org/images/git/p199.png" alt="p199"></a></p>
<h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h3><p>前面提到了在分支衍合时出现冲突的解决方案，其实普通的合并也有可能出冲突，出现冲突很正常，解决就是了，git merge 合并分支时如果出现冲突还是先重新编辑冲突文件，编辑完成后，再执行 git add 和 git commit 即可。</p>
<h2 id="Git-关联远程仓库"><a href="#Git-关联远程仓库" class="headerlink" title="Git 关联远程仓库"></a>Git 关联远程仓库</h2><h3 id="配置-SSH-KEY"><a href="#配置-SSH-KEY" class="headerlink" title="配置 SSH KEY"></a>配置 SSH KEY</h3><p>配置 SSH KEY 的原理很简单，采用非对称加密方式生成公钥和私钥，公钥告诉 GitHub ，私钥留在自己电脑，当向 GitHub 上提交数据时，GitHub 会用我们留给它的公钥加密一段消息返回给我们的电脑，如果我们能够用私钥解密成功，说明是合法的用户，这样就避免我们输入用户名密码了。　</p>
<h4 id="1-查看本地是否已有-SSHKEY"><a href="#1-查看本地是否已有-SSHKEY" class="headerlink" title="1.查看本地是否已有 SSHKEY"></a>1.查看本地是否已有 SSHKEY</h4><p>查看当前用户目录下是否有 .ssh 文件，如下：</p>
<p><a href="http://www.javaboy.org/images/git/p202.png"><img src="http://www.javaboy.org/images/git/p202.png" alt="p202"></a></p>
<p>如果查看之后有结果，则直接跳转到第四步，什么都没有就继续生成。</p>
<h4 id="2-生成-SSH-指纹"><a href="#2-生成-SSH-指纹" class="headerlink" title="2.生成 SSH 指纹"></a>2.生成 SSH 指纹</h4><p>生成 SSH 指纹的命令很简单，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure>
<h4 id="3-添加-ssh-到-ssh-agent-中"><a href="#3-添加-ssh-到-ssh-agent-中" class="headerlink" title="3.添加 ssh 到 ssh-agent 中"></a>3.添加 ssh 到 ssh-agent 中</h4><p>执行如下命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br></pre></td></tr></table></figure>
<p>做好之后，我们当前用户目录下已经有了一个名为 .ssh 的隐藏文件夹了，打开这个目录，会发现有一个名为 id_rsa.pub 的文件，这就是我们一会要使用的公钥文件。</p>
<h4 id="4-将公钥告诉-GitHub"><a href="#4-将公钥告诉-GitHub" class="headerlink" title="4.将公钥告诉 GitHub"></a>4.将公钥告诉 GitHub</h4><p>登录 GitHub ，点击右上角的向下的箭头，选择 Settings ，在新打开的页面中左边侧栏选择 <strong>SSH and GPG keys</strong> ，如下：</p>
<p><a href="http://www.javaboy.org/images/git/p203.png"><img src="http://www.javaboy.org/images/git/p203.png" alt="p203"></a></p>
<p>完了之后点击最下面的 Add SSH key 按钮即可。</p>
<h3 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h3><p>在 GitHub 上创建一个仓库 test，将本地仓库和这个远程仓库进行关联。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:lenve/test.git</span></span><br></pre></td></tr></table></figure>
<p>在这条命令中，git 会自动将远程仓库的名字设置为 origin ，方便我们的后续操作。</p>
<h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><h4 id="推送到master分支"><a href="#推送到master分支" class="headerlink" title="推送到master分支"></a>推送到master分支</h4><p>假设我想将本地 master 分支上的内容推送到远程 master 分支上，方式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure>
<p>-u参数可以在推送的同时，将 origin 仓库的 master 分支设置为本地仓库当前分支的 upstream（上游）。添加了这个参数，将来运行 git pull 命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从 origin 的 master 分支获取内容，省去了另外添加参数的麻烦。这个参数也只用在第一次 push 时加上，以后直接运行 git push 命令即可。</p>
<blockquote>
<p>新生成密钥的时候，git clone或者push的时候，经常会报这样的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#39;github.com (192.30.255.112)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br></pre></td></tr></table></figure>

<p>Google之后明白，少了一个known_hosts文件，本来密钥文件应该是三个，现在是两个，便报了这样的错误，此时选择yes回车之后便可，同时生成了缺少了的known_hosts文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? &#x2F;&#x2F;输入yes，回车</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="推送到其他分支"><a href="#推送到其他分支" class="headerlink" title="推送到其他分支"></a>推送到其他分支</h4><p>如果想推送到其他分支，还是这条命令，修改一下分支的名字即可，比如我也想把我的 fa 分支推送到远程仓库中，执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout fa</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin fa</span></span><br></pre></td></tr></table></figure>
<p>先切换到 fa 分支，然后执行 git push 命令，参数含义和之前的一样，这里我们创建的远程仓库的分支名也为 fa（当然我们可以取任何名字，但是为了不混淆，最好取一致的名字）。这两条命令执行成功之后，此时在网页中我们就可以看到已经有多个分支了</p>
<h3 id="从远程仓库获取"><a href="#从远程仓库获取" class="headerlink" title="从远程仓库获取"></a>从远程仓库获取</h3><h4 id="首次获取"><a href="#首次获取" class="headerlink" title="首次获取"></a>首次获取</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:lenve/test.git</span></span><br></pre></td></tr></table></figure>
<p>表示克隆文件到本地仓库。此时克隆的远程仓库的 master 分支到本地仓库，我们可以通过 <code>git branch -a</code> 来查看本地仓库和远程仓库的信息，-a 参数可以同时显示本地仓库和远程仓库的信息，如下：</p>
<p><a href="http://www.javaboy.org/images/git/p206.png"><img src="http://www.javaboy.org/images/git/p206.png" alt="p206"></a></p>
<p>我们看到远程仓库中已经有了 fa 分支了，如果我们想把 fa 分支也克隆下来，执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b fa origin/fa</span></span><br></pre></td></tr></table></figure>
<p>表示根据远程仓库的 fa 分支创建一个本地仓库的 fa 分支，创建完成之后进行切换，也可以通过如下命令只创建不切换：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch fa origin/fa</span></span><br></pre></td></tr></table></figure>
<p>此时我在 fa 分支下修改 git01.txt 文件并提交，如下：</p>
<p>[<img src="http://www.javaboy.org/images/git/p207.png" alt="p207"></p>
<p>注意由于 fa 分支就是从远程仓库克隆下来的，所以这里可以不添加 -u 参数。</p>
<h3 id="从远程仓库更新"><a href="#从远程仓库更新" class="headerlink" title="从远程仓库更新"></a>从远程仓库更新</h3><p>此时我们回到第一次最早的那个 test 本地仓库中，那个 test 仓库的 fa 分支现在和远程仓库不一致了，我们可以通过 git pull 命令来更新，如下：</p>
<p><a href="http://www.javaboy.org/images/git/p208.png"><img src="http://www.javaboy.org/images/git/p208.png" alt="p208"></a></p>
<h2 id="Git-工作区储藏"><a href="#Git-工作区储藏" class="headerlink" title="Git 工作区储藏"></a>Git 工作区储藏</h2><h3 id="问题回顾"><a href="#问题回顾" class="headerlink" title="问题回顾"></a>问题回顾</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在有一个 master 分支，master 分支中有一个文件叫 01.txt ，该文件中只有一行数据，</span><br><span class="line">然后对 01.txt 执行 add 和 commit ，然后再从 master 分支中创建出一个新的分支 fa ，</span><br><span class="line">切换到 fa 分支上，然后向 01.txt 中再添加一行数据，添加成功之后，不做任何事情，</span><br><span class="line">再切换回 master 分支，此时用 cat 命令查看 01.txt 文件，发现竟然有两行数据，</span><br><span class="line">按理说 master 中的 01.txt 只有一行数据，而 fa 中的 01.txt 有两行数据。</span><br><span class="line"></span><br><span class="line">要搞清楚这个问题，得先明白下面这个问题：cat 命令和 git 无关，就是用来查看文件的。</span><br><span class="line"></span><br><span class="line">上面这个操作少了两个步骤，fa 分支中的数据修改之后直接切换回了 master ，</span><br><span class="line">没有 add&#x2F;commit 。正常情况下（修改数据后 add&#x2F;commit），如果 master 和 fa 分支中的数据不一致，</span><br><span class="line">我们执行了 git checkout 进行分支的切换，这个时候工作区中的文件内容也是会跟着变化的，</span><br><span class="line">但是如果我在 fa 分支中修改了文件却没有 add&#x2F;commit 就切换回 master ，</span><br><span class="line">此时如果工作区的文件变化了，可能会导致我在 fa 分支中的修改丢失，</span><br><span class="line">因此，这个时候工作区的文件就没有变化，即工作区的文件内容还是 fa 分支中修改的内容。</span><br></pre></td></tr></table></figure>
<h4 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h4><p>在某一个分支修改文件之后，先 add 并且 commit 之后再去切换分支。</p>
<h4 id="解决方案二-储藏"><a href="#解决方案二-储藏" class="headerlink" title="解决方案二(储藏)"></a>解决方案二(储藏)</h4><p>储藏适用在如下场景中：当我在一个分支 fa 中修改了文件，但是还没有完全改好，此时我并不想 add/commit ，但是这个时候有一个更急迫的事情在另外一个分支 fb 上需要我去做，我必须要切换分支。</p>
<p>在这样一个场景中，如果我直接切换分支，会出现如下两个问题：</p>
<p>1.从 fa 切换到 fb 之后，工作区的代码还是 fa 的代码，不符合我的工作要求。<br>2.假设我不在乎问题 1，在 fb 中直接修改工作区的代码，等我在 fb 中修改完后提交后再回到 fa ，会发现我之前的代码丢失了。</p>
<p>为了解决这个问题，Git 给我们提供了储藏 (Stashing)。</p>
<p>现在假设一开始 master 和 fa 分支中的文件内容都是一致的，而且两个分支的工作区都是干净的，即没有东西需要 add/commit ，此时，我在 master 中修改了文件，修改完成之后，执行 <code>git status</code> 命令我们看到 master 中有东西需要 add/commit ，此时我想切换到 fa 分支中去，但是并不想对 master 分支执行 add/commit ，这个时候我们可以执行如下命令，先将当前分支中的文件储藏起来：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br></pre></td></tr></table></figure>
<p>执行完之后再执行 <code>git status</code> ，我们发现此时 master 分支已经是干净的了，此时我们可以愉快的切换到 fa 分支中去，切换到 fa 分支之后，我们发现 master 中的修改并没有干扰到 fa 分支，当我们完成了 fa 分支中的工作之后，再回到 master 分支，此时执行如下命令可以恢复刚刚储藏的数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash apply</span></span><br></pre></td></tr></table></figure>
<p>上面这个命令执行完之后，master 分支中的工作区中的文件就恢复了，此时执行 <code>git status</code> 就可以看到又有数据需要 add/commit 了。</p>
<p>我们也可将工作区储藏多次，这个时候我们可以执行如下命令来查看储藏：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br></pre></td></tr></table></figure>
<p>执行效果如下：</p>
<p><a href="http://www.javaboy.org/images/git/p255.png"><img src="http://www.javaboy.org/images/git/p255.png" alt="p255"></a></p>
<p><code>git stash apply</code> 表示恢复最近一次储藏，如果我们想恢复到之前的某一次储藏，可以加上储藏的名字，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash apply stash@&#123;1&#125;</span></span><br></pre></td></tr></table></figure>
<p>其他的关于储藏的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.恢复储藏并出栈</span><br><span class="line">git stash pop</span><br><span class="line">执行效果和 git stash apply 一样，不同的是，这里执行完之后，会将栈顶的储藏移除。</span><br><span class="line"></span><br><span class="line">2.删除某一个储藏</span><br><span class="line">git stash drop stash@&#123;4&#125;</span><br><span class="line">最后一个参数是指储藏的名字。</span><br></pre></td></tr></table></figure>


<h2 id="Git-标签管理"><a href="#Git-标签管理" class="headerlink" title="Git 标签管理"></a>Git 标签管理</h2><h3 id="轻量级标签"><a href="#轻量级标签" class="headerlink" title="轻量级标签"></a>轻量级标签</h3><p>轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。</p>
<p>可以通过 <code>git tag</code> 命令来查看当前仓库中的所有标签。打标签直接通过 <code>git tag &lt;tagname&gt;</code> 来完成即可。</p>
<p>创建一个名为 v1 的 tag ，这个 tag 默认是创建在最新一次的 commit 上的，如下：</p>
<p><a href="http://www.javaboy.org/images/git/p209.png"><img src="http://www.javaboy.org/images/git/p209.png" alt="p209"></a></p>
<p>利用 <code>git show &lt;tagname&gt;</code> 来查看标签对应的版本信息，如下：</p>
<p><a href="http://www.javaboy.org/images/git/p210.png"><img src="http://www.javaboy.org/images/git/p210.png" alt="p210"></a></p>
<p>通过 <code>$ git tag -d &lt;tagname&gt;</code> 命令删除一个标签：</p>
<p><a href="http://www.javaboy.org/images/git/p211.png"><img src="http://www.javaboy.org/images/git/p211.png" alt="p211"></a></p>
<p>通过命令 <code>git tag &lt;tagname&gt; &lt;commitversion&gt;</code> 给历史上的某次 commit 打一个标签。例：给 commit 哈希码为 7d519 的那一次 commit 打上一个标签：</p>
<p><a href="http://www.javaboy.org/images/git/p212.png"><img src="http://www.javaboy.org/images/git/p212.png" alt="p212"></a></p>
<h3 id="含附注的标签"><a href="#含附注的标签" class="headerlink" title="含附注的标签"></a>含附注的标签</h3><p>含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。打一个含附注的标签很简单，使用 <code>git tag -a &lt;tagname&gt; -m &lt;msg&gt;</code> 命令，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag -a v0.0 -m <span class="string">&quot;文件初次建立&quot;</span> 7d519</span></span><br></pre></td></tr></table></figure>
<p><a href="http://www.javaboy.org/images/git/p213.png"><img src="http://www.javaboy.org/images/git/p213.png" alt="p213"></a></p>
<p>如果不加最后的版本号参数，表示给最新的一次 commit 打标签。</p>
<h3 id="签署标签"><a href="#签署标签" class="headerlink" title="签署标签"></a>签署标签</h3><p>说到签署标签我们得先介绍一下 GPG ：<br>GPG 是加密软件，可以使用 GPG 生成的公钥在网上安全的传播你的文件、代码。为什么说安全的？以 Google 所开发的 repo 为例，repo 即采用 GPG 验证的方式，每个里程碑 tag 都带有 GPG 加密验证，假如在里程碑 v1.12.3 处你想要做修改，修改完后将这个 tag 删除，然后又创建同名 tag 指向你的修改点，这必然是可以的。但是，在你再次 clone 你修改后的项目时，你会发现，你对此里程碑 tag 的改变不被认可，验证失败，导致你的修改在这里无法正常实现。这就是 GPG 验证的作用，这样就能够保证项目作者（私钥持有者）所制定的里程碑别人将无法修改。那么，就可以说，作者的代码是安全传播的。为什么会有这种需求？一个项目从开发到发布，再到后期的更新迭代，一定会存在若干的稳定版本与开发版本（存在不稳定因素）。作为项目发起者、持有者，有权定义他（们）所认可的稳定版本，这个稳定版本，将不允许其他开发者进行改动。还以 Google 的 repo 项目为例，项目所有者定义项目开发过程中的点 A 为稳定版 v1.12.3，那么用户在下载 v1.12.3 版本后，使用的肯定是 A 点所生成的项目、产品，就算其他开发者能够在本地对 v1.12.3 进行重新指定，指定到他们修改后的B点，但是最终修改后的版本给用户用的时候，会出现 GPG 签名验证不通过的问题，也就是说这样的修改是不生效的。</p>
<p>使用签署标签我们先要生成 GPG Key，生成命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --gen-key</span></span><br></pre></td></tr></table></figure>
<p>能默认的就直接按回车默认，不能默认的就根据提示输入相应的值。之后就可通过如下命令来打标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag -s v0.0 -u <span class="string">&quot;laowang&quot;</span> -m <span class="string">&quot;文件初次建立&quot;</span> 7d519</span></span><br></pre></td></tr></table></figure>
<p>就把上面的 -a 换成 -s，然后添加 -u 参数，-u 参数的值是我们在生成 GPG Key 的时候配置的 name 属性的值，注意 -u 参数不可以写错，否则标签会创建失败，如下：</p>
<p><a href="http://www.javaboy.org/images/git/p214.png"><img src="http://www.javaboy.org/images/git/p214.png" alt="p214"></a></p>
<h3 id="标签推送到远程仓库"><a href="#标签推送到远程仓库" class="headerlink" title="标签推送到远程仓库"></a>标签推送到远程仓库</h3><p>git push 命令并不会把tag提交到远程仓库中去，需要我们手动提交，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin v0.0</span></span><br></pre></td></tr></table></figure>
<p>表示将 v0.0 标签提交到远程仓库，也可以通过 <code>$ git push origin --tags</code> 提交所有的 tag 到远程仓库，如下：</p>
<p><a href="http://www.javaboy.org/images/git/p215.png"><img src="http://www.javaboy.org/images/git/p215.png" alt="p215"></a></p>
<p>此时调用 git pull 更新代码之后，就能看到tag：</p>
<p><a href="http://www.javaboy.org/images/git/p216.png"><img src="http://www.javaboy.org/images/git/p216.png" alt="p216"></a></p>
<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init [project-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示当前的Git配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --list</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑Git配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config -e [--global]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置提交代码时的用户信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加指定文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [file1] [file2] ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [dir]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm [file1] [file2] ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git mv [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>
<h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 提交暂存区到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit [file1] [file2] ... -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交时显示所有diff信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -v</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到上一个分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个tag在当前commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个tag在指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag] [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[tagName]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看tag信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交指定tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交所有tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --tags</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向某个tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span></span><br></pre></td></tr></table></figure>
<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，其<span class="string">&quot;提交说明&quot;</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示过去5次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git shortlog -sn</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure>
<h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载远程仓库的所有变动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch [remote]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个远程仓库的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote show [remote]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add [shortname] [url]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull [remote] [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --force</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送所有分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --all</span></span><br><span class="line">撤销</span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [commit] [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --keep [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git revert [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git archive</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2021/01/21/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><h2 id="查看Linux系统信息"><a href="#查看Linux系统信息" class="headerlink" title="查看Linux系统信息"></a>查看Linux系统信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arch                  <span class="comment">#显示机器的处理器架构(1)</span></span><br><span class="line">uname -m              <span class="comment">#显示机器的处理器架构(2)</span></span><br><span class="line">uname -r  			 <span class="comment">#显示正在使用的内核版本</span></span><br><span class="line">dmidecode -q          <span class="comment">#显示硬件系统部件 - (SMBIOS / DMI)</span></span><br><span class="line">hdparm -i /dev/hda    <span class="comment">#罗列一个磁盘的架构特性</span></span><br><span class="line">hdparm -tT /dev/sda   <span class="comment">#在磁盘上执行测试性读取操作</span></span><br><span class="line">cat /proc/cpuinfo     <span class="comment">#显示CPU info的信息</span></span><br><span class="line">cat /proc/interrupts  <span class="comment">#显示中断</span></span><br><span class="line">cat /proc/meminfo     <span class="comment">#校验内存使用</span></span><br><span class="line">cat /proc/swaps       <span class="comment">#显示哪些swap被使用</span></span><br><span class="line">cat /proc/version     <span class="comment">#显示内核的版本</span></span><br><span class="line">cat /proc/net/dev     <span class="comment">#显示网络适配器及统计</span></span><br><span class="line">cat /proc/mounts      <span class="comment">#显示已加载的文件系统</span></span><br><span class="line">lspci -tv             <span class="comment">#罗列PCI设备</span></span><br><span class="line">lsusb -tv             <span class="comment">#显示USB设备</span></span><br></pre></td></tr></table></figure>
<h2 id="系统日期相关"><a href="#系统日期相关" class="headerlink" title="系统日期相关"></a>系统日期相关</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cal 2007               <span class="comment">#显示2007年的日历表</span></span><br><span class="line">date 041217002007.00   <span class="comment">#设置日期和时间 - 月日时分年.秒</span></span><br><span class="line">clock -w               <span class="comment">#将时间修改保存到 BIOS</span></span><br></pre></td></tr></table></figure>
<h2 id="关机、重启、登出"><a href="#关机、重启、登出" class="headerlink" title="关机、重启、登出"></a>关机、重启、登出</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown -h now               <span class="comment">#关闭系统(1)</span></span><br><span class="line">init 0                        <span class="comment">#关闭系统(2)</span></span><br><span class="line">telinit 0                     <span class="comment">#关闭系统(3)</span></span><br><span class="line">shutdown -h hours:minutes &amp;   <span class="comment">#按预定时间关闭系统</span></span><br><span class="line">shutdown -c                   <span class="comment">#取消按预定时间关闭系统</span></span><br><span class="line">shutdown -r now               <span class="comment">#重启(1)</span></span><br><span class="line">reboot                        <span class="comment">#重启(2)</span></span><br><span class="line"><span class="built_in">logout</span>                        <span class="comment">#注销</span></span><br></pre></td></tr></table></figure>
<h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home    <span class="comment">#进入 &#x27;/ home&#x27; 目录&#x27;</span></span><br><span class="line"><span class="built_in">cd</span> ..       <span class="comment">#返回上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> ../..    <span class="comment">#返回上两级目录</span></span><br><span class="line"><span class="built_in">cd</span>          <span class="comment">#进入个人的主目录</span></span><br><span class="line"><span class="built_in">cd</span> ~user1   <span class="comment">#进入个人的主目录</span></span><br><span class="line"><span class="built_in">cd</span> -        <span class="comment">#返回上次所在的目录</span></span><br><span class="line"><span class="built_in">pwd</span>         <span class="comment">#显示工作路径</span></span><br><span class="line"></span><br><span class="line">ls      <span class="comment">#查看目录中的文件</span></span><br><span class="line">ls -F   <span class="comment">#查看目录中的文件</span></span><br><span class="line">ls -l   <span class="comment">#显示文件和目录的详细资料</span></span><br><span class="line">ls -a   <span class="comment">#显示隐藏文件</span></span><br><span class="line">ls *[0-9]*   <span class="comment">#显示包含数字的文件名和目录名</span></span><br><span class="line">tree         <span class="comment">#显示文件和目录由根目录开始的树形结构(1)</span></span><br><span class="line">lstree       <span class="comment">#显示文件和目录由根目录开始的树形结构(2)</span></span><br><span class="line"></span><br><span class="line">mkdir dir1                  <span class="comment">#创建一个叫做 &#x27;dir1&#x27; 的目录&#x27;</span></span><br><span class="line">mkdir dir1 dir2             <span class="comment">#同时创建两个目录</span></span><br><span class="line">mkdir -p /tmp/dir1/dir2     <span class="comment">#创建一个目录树</span></span><br><span class="line">rm -f file1                 <span class="comment">#删除一个叫做 &#x27;file1&#x27; 的文件&#x27;</span></span><br><span class="line">rmdir dir1                  <span class="comment">#删除一个叫做 &#x27;dir1&#x27; 的目录&#x27;</span></span><br><span class="line">rm -rf dir1                 <span class="comment">#删除一个叫做 &#x27;dir1&#x27; 的目录并同时删除其内容</span></span><br><span class="line">rm -rf dir1 dir2            <span class="comment">#同时删除两个目录及它们的内容</span></span><br><span class="line">mv dir1 new_dir             <span class="comment">#重命名/移动 一个目录</span></span><br><span class="line"></span><br><span class="line">cp file1 file2      <span class="comment">#复制一个文件</span></span><br><span class="line">cp dir/* .          <span class="comment">#复制一个目录下的所有文件到当前工作目录</span></span><br><span class="line">cp -a /tmp/dir1 .   <span class="comment">#复制一个目录到当前工作目录</span></span><br><span class="line">cp -a dir1 dir2     <span class="comment">#复制一个目录</span></span><br><span class="line"></span><br><span class="line">ln -s file1 lnk1   <span class="comment">#创建一个指向文件或目录的软链接</span></span><br><span class="line">ln file1 lnk1      <span class="comment">#创建一个指向文件或目录的物理链接</span></span><br><span class="line"></span><br><span class="line">touch -t 0712250000 file1   <span class="comment">#修改一个文件或目录的时间戳 - (YYMMDDhhmm)</span></span><br><span class="line">iconv -l   	                <span class="comment">#列出已知的编码</span></span><br></pre></td></tr></table></figure>
<h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name file1                   <span class="comment">#从 &#x27;/&#x27; 开始进入根文件系统搜索文件和目录</span></span><br><span class="line">find / -user user1                   <span class="comment">#搜索属于用户 &#x27;user1&#x27; 的文件和目录</span></span><br><span class="line">find /home/user1 -name \*.bin        <span class="comment">#在目录 &#x27;/ home/user1&#x27; 中搜索带有&#x27;.bin&#x27; 结尾的文件</span></span><br><span class="line">find /usr/bin -<span class="built_in">type</span> f -atime +100    <span class="comment">#搜索在过去100天内未被使用过的执行文件</span></span><br><span class="line">find /usr/bin -<span class="built_in">type</span> f -mtime -10     <span class="comment">#搜索在10天内被创建或者修改过的文件</span></span><br><span class="line">find / -name \*.rpm -<span class="built_in">exec</span> chmod 755 <span class="string">&#x27;&#123;&#125;&#x27;</span> \;      <span class="comment">#搜索以 &#x27;.rpm&#x27; 结尾的文件并定义其权限</span></span><br><span class="line">find / -xdev -name \*.rpm            <span class="comment">#搜索以 &#x27;.rpm&#x27; 结尾的文件，忽略光驱、捷盘等可移动设备</span></span><br><span class="line">locate \*.ps                         <span class="comment">#寻找以 &#x27;.ps&#x27; 结尾的文件 - 先运行 &#x27;updatedb&#x27; 命令</span></span><br><span class="line">whereis halt                         <span class="comment">#显示一个二进制文件、源码或man的位置</span></span><br><span class="line"><span class="built_in">which</span> halt                           <span class="comment">#显示一个二进制文件或可执行文件的完整路径</span></span><br></pre></td></tr></table></figure>
<h2 id="挂载文件系统"><a href="#挂载文件系统" class="headerlink" title="挂载文件系统"></a>挂载文件系统</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/hda2 /mnt/hda2   <span class="comment">#挂载一个叫做hda2的盘 - 确定目录 &#x27;/ mnt/hda2&#x27; 已经存在</span></span><br><span class="line">umount /dev/hda2            <span class="comment">#卸载一个叫做hda2的盘 - 先从挂载点 &#x27;/ mnt/hda2&#x27; 退出</span></span><br><span class="line">fuser -km /mnt/hda2         <span class="comment">#当设备繁忙时强制卸载</span></span><br><span class="line">umount -n /mnt/hda2         <span class="comment">#运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用</span></span><br><span class="line">mount /dev/fd0 /mnt/floppy        <span class="comment">#挂载一个软盘</span></span><br><span class="line">mount /dev/cdrom /mnt/cdrom       <span class="comment">#挂载一个cdrom或dvdrom</span></span><br><span class="line">mount /dev/hdc /mnt/cdrecorder    <span class="comment">#挂载一个cdrw或dvdrom</span></span><br><span class="line">mount /dev/hdb /mnt/cdrecorder    <span class="comment">#挂载一个cdrw或dvdrom</span></span><br><span class="line">mount -o loop file.iso /mnt/cdrom    <span class="comment">#挂载一个文件或ISO镜像文件</span></span><br><span class="line">mount -t vfat /dev/hda5 /mnt/hda5    <span class="comment">#挂载一个Windows FAT32文件系统</span></span><br><span class="line">mount /dev/sda1 /mnt/usbdisk         <span class="comment">#挂载一个usb 捷盘或闪存设备</span></span><br><span class="line">mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share   <span class="comment">#挂载一个windows网络共享</span></span><br></pre></td></tr></table></figure>
<h2 id="磁盘空间相关"><a href="#磁盘空间相关" class="headerlink" title="磁盘空间相关"></a>磁盘空间相关</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h            <span class="comment">#显示已经挂载的分区列表</span></span><br><span class="line">ls -lSr |more    <span class="comment">#以尺寸大小排列文件和目录</span></span><br><span class="line">du -sh dir1      <span class="comment">#估算目录 &#x27;dir1&#x27; 已经使用的磁盘空间&#x27;</span></span><br><span class="line">du -sk * | sort -rn     <span class="comment">#以容量大小为依据依次显示文件和目录的大小</span></span><br><span class="line">rpm -q -a --qf <span class="string">&#x27;%10&#123;SIZE&#125;t%&#123;NAME&#125;n&#x27;</span> | sort -k1,1n </span><br><span class="line"><span class="comment">#以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)</span></span><br><span class="line">dpkg-query -W -f=<span class="string">&#x27;$&#123;Installed-Size;10&#125;t$&#123;Package&#125;n&#x27;</span> | sort -k1,1n </span><br><span class="line"><span class="comment">#以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</span></span><br></pre></td></tr></table></figure>
<h2 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd group_name   <span class="comment">#创建一个新用户组</span></span><br><span class="line">groupdel group_name   <span class="comment">#删除一个用户组</span></span><br><span class="line">groupmod -n new_group_name old_group_name   <span class="comment">#重命名一个用户组</span></span><br><span class="line">useradd -c <span class="string">&quot;Name Surname &quot;</span> -g admin -d /home/user1 -s /bin/bash user1     <span class="comment">#创建一个属于 &quot;admin&quot; 用户组的用户</span></span><br><span class="line">useradd user1      <span class="comment">#创建一个新用户</span></span><br><span class="line">userdel -r user1   <span class="comment">#删除一个用户 ( &#x27;-r&#x27; 排除主目录)</span></span><br><span class="line">usermod -c <span class="string">&quot;User FTP&quot;</span> -g system -d /ftp/user1 -s /bin/nologin user1   <span class="comment">#修改用户属性</span></span><br><span class="line"></span><br><span class="line">passwd         <span class="comment">#修改口令</span></span><br><span class="line">passwd user1   <span class="comment">#修改一个用户的口令 (只允许root执行)</span></span><br><span class="line">chage -E 2005-12-31 user1    <span class="comment">#设置用户口令的失效期限</span></span><br><span class="line">pwck     <span class="comment">#检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的用户</span></span><br><span class="line">grpck    <span class="comment">#检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的群组</span></span><br><span class="line">newgrp group_name     <span class="comment">#登陆进一个新的群组以改变新创建文件的预设群组</span></span><br></pre></td></tr></table></figure>
<h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用 <span class="string">&quot;+&quot;</span> 设置权限，使用 <span class="string">&quot;-&quot;</span> 用于取消</span><br><span class="line"></span><br><span class="line">ls -lh    <span class="comment">#显示权限</span></span><br><span class="line">ls /tmp | pr -T5 -W<span class="variable">$COLUMNS</span>  <span class="comment">#将终端划分成5栏显示</span></span><br><span class="line">chmod ugo+rwx directory1   <span class="comment">#设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</span></span><br><span class="line">chmod go-rwx directory1      <span class="comment">#删除群组(g)与其他人(o)对目录的读写执行权限</span></span><br><span class="line">chown user1 file1            <span class="comment">#改变一个文件的所有人属性</span></span><br><span class="line">chown -R user1 directory1    <span class="comment">#改变一个目录的所有人属性并同时改变改目录下所有文件的属性</span></span><br><span class="line">chgrp group1 file1         <span class="comment">#改变文件的群组</span></span><br><span class="line">chown user1:group1 file1   <span class="comment">#改变一个文件的所有人和群组属性</span></span><br><span class="line">find / -perm -u+s          <span class="comment">#罗列一个系统中所有使用了SUID控制的文件</span></span><br><span class="line">chmod u+s /bin/file1       <span class="comment">#设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</span></span><br><span class="line">chmod u-s /bin/file1        <span class="comment">#禁用一个二进制文件的 SUID位</span></span><br><span class="line">chmod g+s /home/public      <span class="comment">#设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</span></span><br><span class="line">chmod g-s /home/public      <span class="comment">#禁用一个目录的 SGID 位</span></span><br><span class="line">chmod o+t /home/public      <span class="comment">#设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</span></span><br><span class="line">chmod o-t /home/public      <span class="comment">#禁用一个目录的 STIKY 位</span></span><br></pre></td></tr></table></figure>
<h2 id="文件的特殊属性"><a href="#文件的特殊属性" class="headerlink" title="文件的特殊属性"></a>文件的特殊属性</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 使用 <span class="string">&quot;+&quot;</span> 设置权限，使用 <span class="string">&quot;-&quot;</span> 用于取消</span><br><span class="line"></span><br><span class="line">chattr +a file1   <span class="comment">#只允许以追加方式读写文件</span></span><br><span class="line">chattr +c file1   <span class="comment">#允许这个文件能被内核自动压缩/解压</span></span><br><span class="line">chattr +d file1   <span class="comment">#在进行文件系统备份时，dump程序将忽略这个文件</span></span><br><span class="line">chattr +i file1   <span class="comment">#设置成不可变的文件，不能被删除、修改、重命名或者链接</span></span><br><span class="line">chattr +s file1   <span class="comment">#允许一个文件被安全地删除</span></span><br><span class="line">chattr +S file1   <span class="comment">#一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</span></span><br><span class="line">chattr +u file1   <span class="comment">#若文件被删除，系统会允许你在以后恢复这个被删除的文件</span></span><br><span class="line">lsattr           <span class="comment">#显示特殊的属性</span></span><br></pre></td></tr></table></figure>
<h2 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bunzip2 file1.bz2   <span class="comment">#解压一个叫做 &#x27;file1.bz2&#x27;的文件</span></span><br><span class="line">bzip2 file1         <span class="comment">#压缩一个叫做 &#x27;file1&#x27; 的文件</span></span><br><span class="line">gunzip file1.gz     <span class="comment">#解压一个叫做 &#x27;file1.gz&#x27;的文件</span></span><br><span class="line">gzip file1          <span class="comment">#压缩一个叫做 &#x27;file1&#x27;的文件</span></span><br><span class="line">gzip -9 file1       <span class="comment">#最大程度压缩</span></span><br><span class="line"></span><br><span class="line">rar a file1.rar test_file          <span class="comment">#创建一个叫做 &#x27;file1.rar&#x27; 的包</span></span><br><span class="line">rar a file1.rar file1 file2 dir1   <span class="comment">#同时压缩 &#x27;file1&#x27;, &#x27;file2&#x27; 以及目录 &#x27;dir1&#x27;</span></span><br><span class="line">rar x file1.rar     <span class="comment">#解压rar包</span></span><br><span class="line">unrar x file1.rar   <span class="comment">#解压rar包</span></span><br><span class="line"></span><br><span class="line">tar -cvf archive.tar file1   <span class="comment">#创建一个非压缩的 tarball</span></span><br><span class="line">tar -cvf archive.tar file1 file2 dir1  <span class="comment">#创建一个包含了 &#x27;file1&#x27;, &#x27;file2&#x27; 以及 &#x27;dir1&#x27;的档案文件</span></span><br><span class="line">tar -tf archive.tar    <span class="comment">#显示一个包中的内容</span></span><br><span class="line">tar -xvf archive.tar   <span class="comment">#释放一个包</span></span><br><span class="line">tar -xvf archive.tar -C /tmp     <span class="comment">#将压缩包释放到 /tmp目录下</span></span><br><span class="line">tar -cvfj archive.tar.bz2 dir1   <span class="comment">#创建一个bzip2格式的压缩包</span></span><br><span class="line">tar -jxvf archive.tar.bz2        <span class="comment">#解压一个bzip2格式的压缩包</span></span><br><span class="line">tar -cvfz archive.tar.gz dir1    <span class="comment">#创建一个gzip格式的压缩包</span></span><br><span class="line">tar -zxvf archive.tar.gz         <span class="comment">#解压一个gzip格式的压缩包</span></span><br><span class="line"></span><br><span class="line">zip file1.zip file1    <span class="comment">#创建一个zip格式的压缩包</span></span><br><span class="line">zip -r file1.zip file1 file2 dir1    <span class="comment">#将几个文件和目录同时压缩成一个zip格式的压缩包</span></span><br><span class="line">unzip file1.zip    <span class="comment">#解压一个zip格式压缩包</span></span><br></pre></td></tr></table></figure>
<h2 id="RPM包（Fedora-Redhat及类似系统）"><a href="#RPM包（Fedora-Redhat及类似系统）" class="headerlink" title="RPM包（Fedora, Redhat及类似系统）"></a>RPM包（Fedora, Redhat及类似系统）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh package.rpm    <span class="comment">#安装一个rpm包</span></span><br><span class="line">rpm -ivh --nodeeps package.rpm   <span class="comment">#安装一个rpm包而忽略依赖关系警告</span></span><br><span class="line">rpm -U package.rpm        <span class="comment">#更新一个rpm包但不改变其配置文件</span></span><br><span class="line">rpm -F package.rpm        <span class="comment">#更新一个确定已经安装的rpm包</span></span><br><span class="line">rpm -e package_name.rpm   <span class="comment">#删除一个rpm包</span></span><br><span class="line">rpm -qa      <span class="comment">#显示系统中所有已经安装的rpm包</span></span><br><span class="line">rpm -qa | grep httpd    <span class="comment">#显示所有名称中包含 &quot;httpd&quot; 字样的rpm包</span></span><br><span class="line">rpm -qi package_name    <span class="comment">#获取一个已安装包的特殊信息</span></span><br><span class="line">rpm -qg <span class="string">&quot;System Environment/Daemons&quot;</span>     <span class="comment">#显示一个组件的rpm包</span></span><br><span class="line">rpm -ql package_name       <span class="comment">#显示一个已经安装的rpm包提供的文件列表</span></span><br><span class="line">rpm -qc package_name       <span class="comment">#显示一个已经安装的rpm包提供的配置文件列表</span></span><br><span class="line">rpm -q package_name --whatrequires     <span class="comment">#显示与一个rpm包存在依赖关系的列表</span></span><br><span class="line">rpm -q package_name --whatprovides    <span class="comment">#显示一个rpm包所占的体积</span></span><br><span class="line">rpm -q package_name --scripts         <span class="comment">#显示在安装/删除期间所执行的脚本l</span></span><br><span class="line">rpm -q package_name --changelog       <span class="comment">#显示一个rpm包的修改历史</span></span><br><span class="line">rpm -qf /etc/httpd/conf/httpd.conf    <span class="comment">#确认所给的文件由哪个rpm包所提供</span></span><br><span class="line">rpm -qp package.rpm -l    <span class="comment">#显示由一个尚未安装的rpm包提供的文件列表</span></span><br><span class="line">rpm --import /media/cdrom/RPM-GPG-KEY    <span class="comment">#导入公钥数字证书</span></span><br><span class="line">rpm --checksig package.rpm      <span class="comment">#确认一个rpm包的完整性</span></span><br><span class="line">rpm -qa gpg-pubkey      <span class="comment">#确认已安装的所有rpm包的完整性</span></span><br><span class="line">rpm -V package_name     <span class="comment">#检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间</span></span><br><span class="line">rpm -Va                 <span class="comment">#检查系统中所有已安装的rpm包- 小心使用</span></span><br><span class="line">rpm -Vp package.rpm     <span class="comment">#确认一个rpm包还未安装</span></span><br><span class="line">rpm2cpio package.rpm | cpio --extract --make-directories *bin*   <span class="comment">#从一个rpm包运行可执行文件</span></span><br><span class="line">rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm    <span class="comment">#从一个rpm源码安装一个构建好的包</span></span><br><span class="line">rpmbuild --rebuild package_name.src.rpm       <span class="comment">#从一个rpm源码构建一个 rpm 包</span></span><br></pre></td></tr></table></figure>
<h2 id="YUM（Fedora-RedHat及类似系统）"><a href="#YUM（Fedora-RedHat及类似系统）" class="headerlink" title="YUM（Fedora, RedHat及类似系统）"></a>YUM（Fedora, RedHat及类似系统）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install package_name             <span class="comment">#下载并安装一个rpm包</span></span><br><span class="line">yum localinstall package_name.rpm    <span class="comment">#将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</span></span><br><span class="line">yum update package_name.rpm    <span class="comment">#更新当前系统中所有安装的rpm包</span></span><br><span class="line">yum update package_name        <span class="comment">#更新一个rpm包</span></span><br><span class="line">yum remove package_name        <span class="comment">#删除一个rpm包</span></span><br><span class="line">yum list                   <span class="comment">#列出当前系统中安装的所有包</span></span><br><span class="line">yum search package_name     <span class="comment">#在rpm仓库中搜寻软件包</span></span><br><span class="line">yum clean packages          <span class="comment">#清理rpm缓存删除下载的包</span></span><br><span class="line">yum clean headers           <span class="comment">#删除所有头文件</span></span><br><span class="line">yum clean all                <span class="comment">#删除所有缓存的包和头文件</span></span><br></pre></td></tr></table></figure>
<h2 id="DEB包-Debian-Ubuntu及类似系统"><a href="#DEB包-Debian-Ubuntu及类似系统" class="headerlink" title="DEB包 (Debian, Ubuntu及类似系统)"></a>DEB包 (Debian, Ubuntu及类似系统)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i package.deb     <span class="comment">#安装/更新一个 deb 包</span></span><br><span class="line">dpkg -r package_name    <span class="comment">#从系统删除一个 deb 包</span></span><br><span class="line">dpkg -l                 <span class="comment">#显示系统中所有已经安装的 deb 包</span></span><br><span class="line">dpkg -l | grep httpd    <span class="comment">#显示所有名称中包含 &quot;httpd&quot; 字样的deb包</span></span><br><span class="line">dpkg -s package_name    <span class="comment">#获得已经安装在系统中一个特殊包的信息</span></span><br><span class="line">dpkg -L package_name    <span class="comment">#显示系统中已经安装的一个deb包所提供的文件列表</span></span><br><span class="line">dpkg --contents package.deb    <span class="comment">#显示尚未安装的一个包所提供的文件列表</span></span><br><span class="line">dpkg -S /bin/ping              <span class="comment">#确认所给的文件由哪个deb包提供</span></span><br></pre></td></tr></table></figure>
<h2 id="APT软件工具-Debian-Ubuntu及类似系统"><a href="#APT软件工具-Debian-Ubuntu及类似系统" class="headerlink" title="APT软件工具 (Debian, Ubuntu及类似系统)"></a>APT软件工具 (Debian, Ubuntu及类似系统)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install package_name      <span class="comment">#安装/更新一个 deb 包</span></span><br><span class="line">apt-cdrom install package_name    <span class="comment">#从光盘安装/更新一个 deb 包</span></span><br><span class="line">apt-get update      <span class="comment">#升级列表中的软件包</span></span><br><span class="line">apt-get upgrade     <span class="comment">#升级所有已安装的软件</span></span><br><span class="line">apt-get remove package_name     <span class="comment">#从系统删除一个deb包</span></span><br><span class="line">apt-get check     <span class="comment">#确认依赖的软件仓库正确</span></span><br><span class="line">apt-get clean     <span class="comment">#从下载的软件包中清理缓存</span></span><br><span class="line">apt-cache search searched-package    <span class="comment">#返回包含所要搜索字符串的软件包名称</span></span><br></pre></td></tr></table></figure>
<h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat file1      <span class="comment">#从第一个字节开始正向查看文件的内容</span></span><br><span class="line">tac file1      <span class="comment">#从最后一行开始反向查看一个文件的内容</span></span><br><span class="line">more file1     <span class="comment">#查看一个长文件的内容</span></span><br><span class="line">less file1     <span class="comment">#类似于 &#x27;more&#x27; 命令，但是它允许在文件中和正向操作一样的反向操作</span></span><br><span class="line">head -2 file1    <span class="comment">#查看一个文件的前两行</span></span><br><span class="line">tail -2 file1    <span class="comment">#查看一个文件的最后两行</span></span><br><span class="line">tail -f /var/<span class="built_in">log</span>/messages     <span class="comment">#实时查看被添加到一个文件中的内容</span></span><br></pre></td></tr></table></figure>
<h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat file1 file2 ... | <span class="built_in">command</span> &lt;&gt; file1_in.txt_or_file1_out.txt general syntax <span class="keyword">for</span> text manipulation using PIPE, STDIN and STDOUT</span><br><span class="line"></span><br><span class="line">cat file1 | <span class="built_in">command</span>( sed, grep, awk, grep, etc...) &gt; result.txt </span><br><span class="line"><span class="comment">#合并一个文件的详细说明文本，并将简介写入一个新文件中</span></span><br><span class="line">cat file1 | <span class="built_in">command</span>( sed, grep, awk, grep, etc...) &gt;&gt; result.txt </span><br><span class="line"><span class="comment">#合并一个文件的详细说明文本，并将简介写入一个已有的文件中</span></span><br><span class="line"></span><br><span class="line">grep Aug /var/<span class="built_in">log</span>/messages     <span class="comment">#在文件 &#x27;/var/log/messages&#x27;中查找关键词&quot;Aug&quot;</span></span><br><span class="line">grep ^Aug /var/<span class="built_in">log</span>/messages    <span class="comment">#在文件 &#x27;/var/log/messages&#x27;中查找以&quot;Aug&quot;开始的词汇</span></span><br><span class="line">grep [0-9] /var/<span class="built_in">log</span>/messages   <span class="comment">#选择 &#x27;/var/log/messages&#x27; 文件中所有包含数字的行</span></span><br><span class="line">grep Aug -R /var/<span class="built_in">log</span>/*         <span class="comment">#在目录 &#x27;/var/log&#x27; 及随后的目录中搜索字符串&quot;Aug&quot;</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;s/stringa1/stringa2/g&#x27;</span> example.txt </span><br><span class="line"><span class="comment">#将example.txt文件中的 &quot;string1&quot; 替换成 &quot;string2&quot;</span></span><br><span class="line">sed <span class="string">&#x27;/^$/d&#x27;</span> example.txt           <span class="comment">#从example.txt文件中删除所有空白行</span></span><br><span class="line">sed <span class="string">&#x27;/ *#/d; /^$/d&#x27;</span> example.txt   <span class="comment">#从example.txt文件中删除所有注释和空白行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;esempio&#x27;</span> | tr <span class="string">&#x27;[:lower:]&#x27;</span> <span class="string">&#x27;[:upper:]&#x27;</span>    <span class="comment">#合并上下单元格内容</span></span><br><span class="line">sed -e <span class="string">&#x27;1d&#x27;</span> result.txt          <span class="comment">#从文件example.txt 中排除第一行</span></span><br><span class="line">sed -n <span class="string">&#x27;/stringa1/p&#x27;</span>            <span class="comment">#查看只包含词汇 &quot;string1&quot;的行</span></span><br><span class="line">sed -e <span class="string">&#x27;s/ *$//&#x27;</span> example.txt    <span class="comment">#删除每一行最后的空白字符</span></span><br><span class="line">sed -e <span class="string">&#x27;s/stringa1//g&#x27;</span> example.txt  </span><br><span class="line"><span class="comment">#从文档中只删除词汇 &quot;string1&quot; 并保留剩余全部</span></span><br><span class="line">sed -n <span class="string">&#x27;1,5p;5q&#x27;</span> example.txt     <span class="comment">#查看从第一行到第5行内容</span></span><br><span class="line">sed -n <span class="string">&#x27;5p;5q&#x27;</span> example.txt       <span class="comment">#查看第5行</span></span><br><span class="line">sed -e <span class="string">&#x27;s/00*/0/g&#x27;</span> example.txt   <span class="comment">#用单个零替换多个零</span></span><br><span class="line"></span><br><span class="line">cat -n file1       <span class="comment">#标示文件的行数</span></span><br><span class="line">cat example.txt | awk <span class="string">&#x27;NR%2==1&#x27;</span>      <span class="comment">#删除example.txt文件中的所有偶数行</span></span><br><span class="line"><span class="built_in">echo</span> a b c | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>        <span class="comment">#查看一行第一栏</span></span><br><span class="line"><span class="built_in">echo</span> a b c | awk <span class="string">&#x27;&#123;print $1,$3&#125;&#x27;</span>     <span class="comment">#查看一行的第一和第三栏</span></span><br><span class="line">paste file1 file2           <span class="comment">#合并两个文件或两栏的内容</span></span><br><span class="line">paste -d <span class="string">&#x27;+&#x27;</span> file1 file2    <span class="comment">#合并两个文件或两栏的内容，中间用&quot;+&quot;区分</span></span><br><span class="line"></span><br><span class="line">sort file1 file2              <span class="comment">#排序两个文件的内容</span></span><br><span class="line">sort file1 file2 | uniq       <span class="comment">#取出两个文件的并集(重复的行只保留一份)</span></span><br><span class="line">sort file1 file2 | uniq -u    <span class="comment">#删除交集，留下其他的行</span></span><br><span class="line">sort file1 file2 | uniq -d    <span class="comment">#取出两个文件的交集(只留下同时存在于两个文件中的文件)</span></span><br><span class="line"></span><br><span class="line">comm -1 file1 file2    <span class="comment">#比较两个文件的内容只删除 &#x27;file1&#x27; 所包含的内容</span></span><br><span class="line">comm -2 file1 file2    <span class="comment">#比较两个文件的内容只删除 &#x27;file2&#x27; 所包含的内容</span></span><br><span class="line">comm -3 file1 file2    <span class="comment">#比较两个文件的内容只删除两个文件共有的部分</span></span><br></pre></td></tr></table></figure>
<h2 id="字符设置和文件格式转换"><a href="#字符设置和文件格式转换" class="headerlink" title="字符设置和文件格式转换"></a>字符设置和文件格式转换</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dos2unix filedos.txt fileunix.txt      <span class="comment">#将一个文本文件的格式从MSDOS转换成UNIX</span></span><br><span class="line">unix2dos fileunix.txt filedos.txt      <span class="comment">#将一个文本文件的格式从UNIX转换成MSDOS</span></span><br><span class="line">recode ..HTML &lt; page.txt &gt; page.html   <span class="comment">#将一个文本文件转换成html</span></span><br><span class="line">recode -l | more                       <span class="comment">#显示所有允许的转换格式</span></span><br></pre></td></tr></table></figure>
<h2 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a>文件系统分析</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">badblocks -v /dev/hda1    <span class="comment">#检查磁盘hda1上的坏磁块</span></span><br><span class="line">fsck /dev/hda1            <span class="comment">#修复/检查hda1磁盘上linux文件系统的完整性</span></span><br><span class="line">fsck.ext2 /dev/hda1       <span class="comment">#修复/检查hda1磁盘上ext2文件系统的完整性</span></span><br><span class="line">e2fsck /dev/hda1          <span class="comment">#修复/检查hda1磁盘上ext2文件系统的完整性</span></span><br><span class="line">e2fsck -j /dev/hda1       <span class="comment">#修复/检查hda1磁盘上ext3文件系统的完整性</span></span><br><span class="line">fsck.ext3 /dev/hda1       <span class="comment">#修复/检查hda1磁盘上ext3文件系统的完整性</span></span><br><span class="line">fsck.vfat /dev/hda1       <span class="comment">#修复/检查hda1磁盘上fat文件系统的完整性</span></span><br><span class="line">fsck.msdos /dev/hda1      <span class="comment">#修复/检查hda1磁盘上dos文件系统的完整性</span></span><br><span class="line">dosfsck /dev/hda1         <span class="comment">#修复/检查hda1磁盘上dos文件系统的完整性</span></span><br></pre></td></tr></table></figure>
<h2 id="初始化一个文件系统"><a href="#初始化一个文件系统" class="headerlink" title="初始化一个文件系统"></a>初始化一个文件系统</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs /dev/hda1        <span class="comment">#在hda1分区创建一个文件系统</span></span><br><span class="line">mke2fs /dev/hda1      <span class="comment">#在hda1分区创建一个linux ext2的文件系统</span></span><br><span class="line">mke2fs -j /dev/hda1   <span class="comment">#在hda1分区创建一个linux ext3(日志型)的文件系统</span></span><br><span class="line">mkfs -t vfat 32 -F /dev/hda1   <span class="comment">#创建一个 FAT32 文件系统</span></span><br><span class="line">fdformat -n /dev/fd0           <span class="comment">#格式化一个软盘</span></span><br><span class="line">mkswap /dev/hda3               <span class="comment">#创建一个swap文件系统</span></span><br></pre></td></tr></table></figure>
<h2 id="SWAP文件系统"><a href="#SWAP文件系统" class="headerlink" title="SWAP文件系统"></a>SWAP文件系统</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkswap /dev/hda3             <span class="comment">#创建一个swap文件系统</span></span><br><span class="line">swapon /dev/hda3             <span class="comment">#启用一个新的swap文件系统</span></span><br><span class="line">swapon /dev/hda2 /dev/hdb3   <span class="comment">#启用两个swap分区</span></span><br></pre></td></tr></table></figure>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dump -0aj -f /tmp/home0.bak /home    <span class="comment">#制作一个 &#x27;/home&#x27; 目录的完整备份</span></span><br><span class="line">dump -1aj -f /tmp/home0.bak /home    <span class="comment">#制作一个 &#x27;/home&#x27; 目录的交互式备份</span></span><br><span class="line">restore -<span class="keyword">if</span> /tmp/home0.bak          <span class="comment">#还原一个交互式备份</span></span><br><span class="line"></span><br><span class="line">rsync -rogpav --delete /home /tmp    <span class="comment">#同步两边的目录</span></span><br><span class="line">rsync -rogpav -e ssh --delete /home ip_address:/tmp         <span class="comment">#通过SSH通道rsync</span></span><br><span class="line">rsync -az -e ssh --delete ip_addr:/home/public /home/<span class="built_in">local</span>  <span class="comment">#通过ssh和压缩将一个远程目录同步到本地</span></span><br><span class="line">rsync -az -e ssh --delete /home/<span class="built_in">local</span> ip_addr:/home/public  <span class="comment">#通过ssh和压缩将本地目录同步到远程目录</span></span><br><span class="line"></span><br><span class="line">dd bs=1M <span class="keyword">if</span>=/dev/hda | gzip | ssh user@ip_addr <span class="string">&#x27;dd of=hda.gz&#x27;</span>  </span><br><span class="line"><span class="comment">#通过ssh在远程主机上执行一次备份本地磁盘的操作</span></span><br><span class="line">dd <span class="keyword">if</span>=/dev/sda of=/tmp/file1 </span><br><span class="line"><span class="comment">#备份磁盘内容到一个文件</span></span><br><span class="line">tar -Puf backup.tar /home/user 执行一次对 <span class="string">&#x27;/home/user&#x27;</span> </span><br><span class="line"><span class="comment">#目录的交互式备份操作</span></span><br><span class="line">( <span class="built_in">cd</span> /tmp/<span class="built_in">local</span>/ &amp;&amp; tar c . ) | ssh -C user@ip_addr <span class="string">&#x27;cd /home/share/ &amp;&amp; tar x -p&#x27;</span> </span><br><span class="line"><span class="comment">#通过ssh在远程目录中复制一个目录内容</span></span><br><span class="line">( tar c /home ) | ssh -C user@ip_addr <span class="string">&#x27;cd /home/backup-home &amp;&amp; tar x -p&#x27;</span> </span><br><span class="line"><span class="comment">#通过ssh在远程目录中复制一个本地目录</span></span><br><span class="line">tar cf - . | (<span class="built_in">cd</span> /tmp/backup ; tar xf - ) </span><br><span class="line"><span class="comment">#本地将一个目录复制到另一个地方，保留原有权限及链接</span></span><br><span class="line"></span><br><span class="line">find /home/user1 -name <span class="string">&#x27;*.txt&#x27;</span> | xargs cp -av --target-directory=/home/backup/ --parents </span><br><span class="line"><span class="comment">#从一个目录查找并复制所有以 &#x27;.txt&#x27; 结尾的文件到另一个目录</span></span><br><span class="line">find /var/<span class="built_in">log</span> -name <span class="string">&#x27;*.log&#x27;</span> | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 </span><br><span class="line"><span class="comment">#查找所有以 &#x27;.log&#x27; 结尾的文件并做成一个bzip包</span></span><br><span class="line"></span><br><span class="line">dd <span class="keyword">if</span>=/dev/hda of=/dev/fd0 bs=512 count=1 </span><br><span class="line"><span class="comment">#做一个将 MBR (Master Boot Record)内容复制到软盘的动作</span></span><br><span class="line">dd <span class="keyword">if</span>=/dev/fd0 of=/dev/hda bs=512 count=1 </span><br><span class="line"><span class="comment">#从已经保存到软盘的备份中恢复MBR内容</span></span><br></pre></td></tr></table></figure>
<h2 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a>光盘</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force </span><br><span class="line"><span class="comment">#清空一个可复写的光盘内容</span></span><br><span class="line"></span><br><span class="line">mkisofs /dev/cdrom &gt; cd.iso             <span class="comment">#在磁盘上创建一个光盘的iso镜像文件</span></span><br><span class="line">mkisofs /dev/cdrom | gzip &gt; cd_iso.gz    <span class="comment">#在磁盘上创建一个压缩了的光盘iso镜像文件</span></span><br><span class="line">mkisofs -J -allow-leading-dots -R -V <span class="string">&quot;Label CD&quot;</span> -iso-level 4 -o ./cd.iso data_cd </span><br><span class="line"><span class="comment">#创建一个目录的iso镜像文件</span></span><br><span class="line">cdrecord -v dev=/dev/cdrom cd.iso               <span class="comment">#刻录一个ISO镜像文件</span></span><br><span class="line">gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom -  <span class="comment">#刻录一个压缩了的ISO镜像文件</span></span><br><span class="line">mount -o loop cd.iso /mnt/iso                  <span class="comment">#挂载一个ISO镜像文件</span></span><br><span class="line"></span><br><span class="line">cd-paranoia -B             <span class="comment">#从一个CD光盘转录音轨到 wav 文件中</span></span><br><span class="line">cd-paranoia -- <span class="string">&quot;-3&quot;</span>        <span class="comment">#从一个CD光盘转录音轨到 wav 文件中（参数-3）</span></span><br><span class="line">cdrecord --scanbus         <span class="comment">#扫描总线以识别scsi通道</span></span><br><span class="line">dd <span class="keyword">if</span>=/dev/hdc | md5sum    <span class="comment">#校验一个设备的md5sum编码，例如一张 CD</span></span><br></pre></td></tr></table></figure>
<h2 id="网络-（以太网和WIFI无线）"><a href="#网络-（以太网和WIFI无线）" class="headerlink" title="网络 - （以太网和WIFI无线）"></a>网络 - （以太网和WIFI无线）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth0    <span class="comment">#显示一个以太网卡的配置</span></span><br><span class="line">ifup eth0        <span class="comment">#启用一个 &#x27;eth0&#x27; 网络设备</span></span><br><span class="line">ifdown eth0      <span class="comment">#禁用一个 &#x27;eth0&#x27; 网络设备</span></span><br><span class="line">ifconfig eth0 192.168.1.1 netmask 255.255.255.0     <span class="comment">#控制IP地址</span></span><br><span class="line">ifconfig eth0 promisc     <span class="comment">#设置 &#x27;eth0&#x27; 成混杂模式以嗅探数据包 (sniffing)</span></span><br><span class="line">dhclient eth0            <span class="comment">#以dhcp模式启用 &#x27;eth0&#x27;</span></span><br><span class="line"></span><br><span class="line">route -n    <span class="comment">#查看路由表</span></span><br><span class="line">route add -net 0/0 gw IP_Gateway    <span class="comment">#配置默认网关</span></span><br><span class="line">route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 </span><br><span class="line"><span class="comment">#配置静态路由到达网络&#x27;192.168.0.0/16&#x27;</span></span><br><span class="line">route del 0/0 gw IP_gateway        <span class="comment">#删除静态路由</span></span><br><span class="line"></span><br><span class="line">hostname <span class="comment">#查看机器名</span></span><br><span class="line">host www.example.com       <span class="comment">#把一个主机名解析到一个网际地址或把一个网际地址解析到一个主机名。</span></span><br><span class="line">nslookup www.example.com   <span class="comment">#用于查询DNS的记录，查看域名解析是否正常，在网络故障的时候用来诊断网络问题。</span></span><br><span class="line">ip link show            <span class="comment">#查看网卡信息</span></span><br><span class="line">mii-tool                <span class="comment">#用于查看、管理介质的网络接口的状态</span></span><br><span class="line">ethtool                 <span class="comment">#用于查询和设置网卡配置</span></span><br><span class="line">netstat -tupl           <span class="comment">#用于显示TCP/UDP的状态信息</span></span><br><span class="line">tcpdump tcp port 80     <span class="comment">#显示所有http协议的流量</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记</title>
    <url>/2021/01/22/Linux%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Linux笔记"><a href="#Linux笔记" class="headerlink" title="Linux笔记"></a>Linux笔记</h1><h2 id="Linux目录简介"><a href="#Linux目录简介" class="headerlink" title="Linux目录简介"></a>Linux目录简介</h2><table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>根目录</td>
<td></td>
</tr>
<tr>
<td>bin</td>
<td>存放普通用户可执行的指令</td>
<td>即使在单用户模式下也能够执行处理</td>
</tr>
<tr>
<td>boot</td>
<td>开机引导目录</td>
<td>包括Linux内核文件与开机所需要的文件</td>
</tr>
<tr>
<td>dev</td>
<td>设备目录</td>
<td>所有的硬件设备及周边均放置在这个设备目录中</td>
</tr>
<tr>
<td>etc</td>
<td>各种配置文件目录</td>
<td>大部分配置属性均存放在这里</td>
</tr>
<tr>
<td>lib/lib64</td>
<td>开机常用的动态链接库</td>
<td>bin及sbin指令也会调用对应的lib库</td>
</tr>
<tr>
<td>media</td>
<td>可移除设备挂载目录</td>
<td>类似软盘 U盘 光盘等临时挂放目录</td>
</tr>
<tr>
<td>mnt</td>
<td>用户临时挂载其他的文件系统</td>
<td>额外的设备可挂载在这里，相对临时而言</td>
</tr>
<tr>
<td>opt</td>
<td>第三方软件安装目录</td>
<td>现在习惯性的放置在/usr/local中</td>
</tr>
<tr>
<td>proc</td>
<td>虚拟文件系统</td>
<td>通常是内存中的映射，特别注意在误删除数据文件后，只要不重启，还是有很大几率将数据找回来。操作系统运行时，进程信息及内核信息（比如cpu、硬盘分区、内存信息等）存放在这里。</td>
</tr>
<tr>
<td>root</td>
<td>系统管理员主目录</td>
<td>除root之外，其他用户均放置在/home目录下</td>
</tr>
<tr>
<td>run</td>
<td>系统运行时所需文件</td>
<td>以前在/var/run中，后来拆分成独立的/run目录，重启后重新生成对应的目录数据</td>
</tr>
<tr>
<td>sbin</td>
<td>只有root才能运行的管理指令</td>
<td>跟bin类似，但只属于root管理员</td>
</tr>
<tr>
<td>srv</td>
<td>服务启动后需要访问的数据目录</td>
<td></td>
</tr>
<tr>
<td>sys</td>
<td>跟proc一样的虚拟文件系统</td>
<td>记录核心系统硬件信息</td>
</tr>
<tr>
<td>tmp</td>
<td>存放临时文件目录</td>
<td>所有用户对该目录均可读写</td>
</tr>
<tr>
<td>usr</td>
<td>应用程序放置目录</td>
<td>包含许多子目录: /usr/bin 目录用于存放程序;  /usr/share 用于存放一些共享的数据;  /usr/lib 用于存放那些不能直接运行的，但却是许多程序运行所必需的一些函数库文件。</td>
</tr>
<tr>
<td>var</td>
<td>存放系统执行过程经常改变的文件</td>
<td>这个目录的内容是经常变动的，/var/log 用来存放系统日志;  /var/www 是定义Apache服务器站点存放目录；/var/lib 用来存放一些库文件，如MySQL，以及MySQL数据库的存放地</td>
</tr>
<tr>
<td>home</td>
<td>存放个人数据</td>
<td>每个用户都有自己的用户目录，位置为：/home/用户名</td>
</tr>
</tbody></table>
<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/vim-vi-workmodel.png"></p>
<p><a href="https://www.runoob.com/linux/linux-vim.html">vim基础操作</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 插入模式:</span></span><br><span class="line">i: 插入光标前一个字符</span><br><span class="line">I: 插入行首</span><br><span class="line">a: 插入光标后一个字符 </span><br><span class="line">A: 插入行未</span><br><span class="line">o: 向下新开一行,插入行首 </span><br><span class="line">O: 向上新开一行,插入行首</span><br><span class="line"></span><br><span class="line"><span class="comment">## 命令模式</span></span><br><span class="line">h: 左移    j: 下移    k: 上移    l: 右移</span><br><span class="line">M: 光标移动到中间行</span><br><span class="line">L: 光标移动到屏幕最后一行行首 </span><br><span class="line">w: 向后一次移动一个字 </span><br><span class="line">b: 向前一次移动一个字</span><br><span class="line">&#123;: 按段移动,上移</span><br><span class="line">&#125;: 按段移动,下移 </span><br><span class="line">Ctr-d: 向下翻半屏 </span><br><span class="line">Ctr-u: 向上翻半屏 </span><br><span class="line">Ctr-f: 向下翻一屏 </span><br><span class="line">Ctr-b: 向上翻一屏</span><br><span class="line">gg: 光标移动文件开头 </span><br><span class="line">G: 光标移动到文件末尾</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除命令:</span></span><br><span class="line">x: 删除光标后一个字符,相当于 Del</span><br><span class="line">X: 删除光标前一个字符,相当于 Backspace</span><br><span class="line">dd: 删除光标所在行,</span><br><span class="line">n dd 删除指定的行数 </span><br><span class="line">D: 删除光标后本行所有内容,包含光标所在字符 </span><br><span class="line">d0: 删除光标前本行所有内容,不包含光标所在字符</span><br><span class="line">dw: 删除光标开始位置的字,包含光标所在字符</span><br><span class="line"></span><br><span class="line"><span class="comment">## 撤销命令:</span></span><br><span class="line">u: 一步一步撤销</span><br><span class="line">U: 一次性撤销当前行所作的所有操作 Ctr-r: 反撤销</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重复命令:</span></span><br><span class="line">.: 重复上一次操作的命令</span><br><span class="line"></span><br><span class="line"><span class="comment">## 文本行移动:</span></span><br><span class="line">- : 文本行右移</span><br><span class="line">- &lt;&lt;: 文本行左移</span><br><span class="line"></span><br><span class="line"><span class="comment">## 复制粘贴:</span></span><br><span class="line">yy: 复制当前行,</span><br><span class="line">n yy 复制 n 行</span><br><span class="line">p: 在光标所在位置向下新开辟一行,粘贴</span><br><span class="line"></span><br><span class="line"><span class="comment">## 可视模式:</span></span><br><span class="line">v: 按字符移动,选中文本</span><br><span class="line">V: 按行移动,选中文本可视模式可以配合 d, y, &gt;&gt;, &lt;&lt; 实现对文本块的删除,复制,左右移动</span><br><span class="line"></span><br><span class="line"><span class="comment">## 替换操作:</span></span><br><span class="line">r: 替换当前字符</span><br><span class="line">R: 替换当前行光标后的字符</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查找命令:</span></span><br><span class="line">/: str查找</span><br><span class="line">n: 下一个</span><br><span class="line">N：上一个</span><br><span class="line"></span><br><span class="line"><span class="comment">## 替换命令： 把abc全部替换成123</span></span><br><span class="line">:%s/abc/123/g</span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示行号与取消行号</span></span><br><span class="line">:<span class="built_in">set</span> nu	</span><br><span class="line">:<span class="built_in">set</span> nonu</span><br></pre></td></tr></table></figure>


<h2 id="开机重启"><a href="#开机重启" class="headerlink" title="开机重启"></a>开机重启</h2><p>关机重启这些操作都需要有root权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 立刻重新开机 </span></span><br><span class="line">shutdown -r now  </span><br><span class="line"><span class="comment">## 立刻关机</span></span><br><span class="line">shutdown -h now </span><br><span class="line"><span class="comment">## 1分钟后关机</span></span><br><span class="line">shutdown -h 1  </span><br><span class="line"><span class="comment">## 关机</span></span><br><span class="line">halt</span><br><span class="line"><span class="comment">## 重启</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment">## 内存数据同步到磁盘</span></span><br><span class="line">syn</span><br></pre></td></tr></table></figure>


<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加用户xm，/home 下会创建家目录</span></span><br><span class="line">useradd xm</span><br><span class="line"><span class="comment"># 给xm改密码</span></span><br><span class="line">passwd xm</span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">userdel xm</span><br><span class="line"><span class="comment"># 查询用户</span></span><br><span class="line">id 用户名</span><br><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su 用户名</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加组</span></span><br><span class="line">groupadd 组名</span><br><span class="line"><span class="comment"># 删除组</span></span><br><span class="line">groupdel 组名</span><br><span class="line"><span class="comment"># 添加用户时直接加上组</span></span><br><span class="line">useradd -g 用户组 用户名</span><br><span class="line"><span class="comment"># 修改用户组</span></span><br><span class="line">usermod -g 用户组 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户配置文件</span></span><br><span class="line">/etc/passwd  </span><br><span class="line"><span class="comment"># 口令配置文件</span></span><br><span class="line">/etc/shadow  </span><br><span class="line"><span class="comment"># 组配置文件</span></span><br><span class="line">/etc/group  </span><br></pre></td></tr></table></figure>


<h2 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h2><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0：关机</span><br><span class="line">1：单用户【找回丢失密码】</span><br><span class="line">2：多用户状态没有网络服务</span><br><span class="line">3：多用户状态有网络服务</span><br><span class="line">4：保留给用户</span><br><span class="line">5：图形界面</span><br><span class="line">6：系统重启</span><br><span class="line">3和5时常用的运行级别，在&#x2F;etc&#x2F;inittab中可以修改</span><br></pre></td></tr></table></figure>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># man 获得帮助信息</span></span><br><span class="line">man ls </span><br><span class="line"></span><br><span class="line"><span class="comment"># help 获得shell内置命令的帮助信息</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前目录的绝对路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ls命令</span></span><br><span class="line">ls -a  <span class="comment"># 展示所有文件</span></span><br><span class="line">ls -l  <span class="comment"># 列表展示</span></span><br><span class="line">ls -R  <span class="comment"># 连同子目录中的内容一起列出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd命令</span></span><br><span class="line"><span class="built_in">cd</span> ~ <span class="comment"># 回家目录</span></span><br><span class="line"><span class="built_in">cd</span> .. <span class="comment"># 回上级目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir创建目录</span></span><br><span class="line">mkdir /home/dog</span><br><span class="line"></span><br><span class="line"><span class="comment"># rmdir指令</span></span><br><span class="line">rmdir 删除空目录</span><br><span class="line">非空目录使用 rm -rf</span><br><span class="line"></span><br><span class="line"><span class="comment"># touch创建空文件</span></span><br><span class="line">touch 1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp指令</span></span><br><span class="line">cp 1.txt /bbb  <span class="comment"># 拷贝文件</span></span><br><span class="line">cp -r <span class="built_in">test</span>/ bbb/  <span class="comment"># 拷贝目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rm指令</span></span><br><span class="line">rm file</span><br><span class="line">rm -rf bbb/</span><br><span class="line"></span><br><span class="line"><span class="comment"># mv指令</span></span><br><span class="line">mv a.txt b.txt  <span class="comment"># 重命名</span></span><br><span class="line">mv a.txt /bbb  <span class="comment"># 移动文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cat命令</span></span><br><span class="line">cat a.txt</span><br><span class="line">cat -n a.txt | more  <span class="comment"># 分页显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># more命令</span></span><br><span class="line">more /etc/profile</span><br><span class="line">查看文本文件的内容，显示完一屏就等待用户按下任意键再滚动到下一屏，如果中途不想继续，Ctrl+C或q终止。</span><br><span class="line"></span><br><span class="line"><span class="comment"># less命令</span></span><br><span class="line">与more类似，显示大文件效率高</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定命令所在路径</span></span><br><span class="line"><span class="built_in">which</span> ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt; 和 &gt;&gt;</span></span><br><span class="line">&gt; 输出重定向，会将原来的文件覆盖</span><br><span class="line">&gt;&gt; 追加到文件尾部</span><br><span class="line">ls -l &gt; a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo指令</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># head指令</span></span><br><span class="line">head -n 5 a.txt <span class="comment"># 文件前5行内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tail指令</span></span><br><span class="line">tail -n 5 a.txt <span class="comment"># 文件最后5行内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ln指令</span></span><br><span class="line">ln -s 源文件或目录  软连接名</span><br><span class="line">ln -s /root ltr</span><br><span class="line"></span><br><span class="line"><span class="comment"># history指令</span></span><br><span class="line"><span class="built_in">history</span> 10  <span class="comment"># 查看最近使用的10条指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear清屏</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前时间</span></span><br><span class="line">date</span><br><span class="line">date -s <span class="string">&quot;2020-10-10 11:11:11&quot;</span> <span class="comment"># 设置系统当前时间</span></span><br><span class="line">cal <span class="comment"># 查看本月日历</span></span><br><span class="line">cal 2020 <span class="comment"># 查看2020日历</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find命令</span></span><br><span class="line">find /home -name a.txt  <span class="comment"># 在home下查找a.txt</span></span><br><span class="line">find /opt -user xm  <span class="comment"># 在opt下查找用户名称为xm的文件</span></span><br><span class="line">find / -size +10M  <span class="comment"># 在根目录下查找大于10M的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># locate指令</span></span><br><span class="line">快速定位a.txt所在的位置</span><br><span class="line">updatedb</span><br><span class="line">locate a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># grep 和 管道符 |</span></span><br><span class="line">grep过略查找，| 表示将前一个命令的处理结果传给后面的指令</span><br><span class="line">cat a.txt | grep -n yes  <span class="comment"># 查找yes所在行，区分大小写</span></span><br><span class="line">cat a.txt | grep -ni yes  <span class="comment"># 查找yes所在行，不区分大小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gzip 与 gunzip  压缩后不保留原来的文件</span></span><br><span class="line">gzip a.txt</span><br><span class="line">gunzip a.txt.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip 与 unzip</span></span><br><span class="line">zip -r a.zip /home/  <span class="comment"># home下所有文件压缩为a.zip</span></span><br><span class="line">unzip -d /opt/ a.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># tar指令</span></span><br><span class="line">- c 产生.tar打包文件</span><br><span class="line">- v 显示详细信息</span><br><span class="line">- f 指定压缩后的文件名</span><br><span class="line">- z 打包同时压缩</span><br><span class="line">- x 解包tar文件</span><br><span class="line">tar -zcvf a.tar.gz a.txt b.txt  <span class="comment"># 将a.txt b.txt 压缩成a.tar.gz</span></span><br><span class="line">tar -zxvf a.tar.gz  <span class="comment"># 将a.tar.gz解压到当前目录</span></span><br><span class="line">tar -zxvf a.tar.gz -C /opt/  <span class="comment"># 将a.tar.gz解压到opt目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件的所有者</span></span><br><span class="line">ls -ahl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件所有者</span></span><br><span class="line">chown 用户名 文件名</span><br><span class="line">chown 用户名:组名 文件名</span><br><span class="line">-R 递归</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件所在的组</span></span><br><span class="line">chgrp 组名 文件名</span><br><span class="line">chgrp -R groupA /home/bbb  <span class="comment"># /home/bbb下的所有文件和目录的所在组改成groupA</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前登录用户</span></span><br><span class="line">whoami</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限基本介绍</span></span><br><span class="line"><span class="comment"># drwx------  -普通文件 d目录 l软连接 c字符设备 b块文件，硬盘</span></span><br><span class="line"><span class="comment"># 0 位确定文件类型</span></span><br><span class="line"><span class="comment"># 1-3 位指定文件所有者的权限</span></span><br><span class="line"><span class="comment"># 4-6 位指定用户组的权限</span></span><br><span class="line"><span class="comment"># 7-9 位指定其他用户的权限</span></span><br><span class="line"><span class="comment"># r：read  w：write x：execute</span></span><br><span class="line"><span class="comment"># r = 4  w = 2  x = 1  rwx = 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod指令</span></span><br><span class="line">u：所有者  g：所在组  o：其他人  a：所有人</span><br><span class="line">chmod u=rwx,g=rx,o=x 文件目录名  </span><br><span class="line">chmod o+w 文件目录名</span><br><span class="line">chmod a-r 文件目录名</span><br><span class="line">chmod 777 文件目录名</span><br></pre></td></tr></table></figure>


<h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建task.sh 写入如下内容，并增加可执行权限</span></span><br><span class="line">date &gt;&gt; /home/xdk/<span class="built_in">test</span>/date.txt</span><br><span class="line"><span class="comment"># 设置任务</span></span><br><span class="line">crontab -e</span><br><span class="line">*/1 * * * * /home/xdk/<span class="built_in">test</span>/task.sh</span><br><span class="line"><span class="comment"># 查看结果</span></span><br><span class="line">[root@centos7 <span class="built_in">test</span>]<span class="comment"># cat date.txt </span></span><br><span class="line">Fri Jan 22 09:22:55 CST 2021</span><br><span class="line">Fri Jan 22 09:27:01 CST 2021</span><br><span class="line">Fri Jan 22 09:28:01 CST 2021</span><br></pre></td></tr></table></figure>


<h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 <span class="built_in">test</span>]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0   200G  0 disk </span><br><span class="line">├─sda1   8:1    0   256M  0 part /boot</span><br><span class="line">├─sda2   8:2    0     4G  0 part [SWAP]</span><br><span class="line">└─sda3   8:3    0 195.8G  0 part /</span><br><span class="line">sr0     11:0    1   4.5G  0 rom  /run/media/xdk/CentOS 7 x86_64</span><br></pre></td></tr></table></figure>
<h3 id="添加一块磁盘"><a href="#添加一块磁盘" class="headerlink" title="添加一块磁盘"></a>添加一块磁盘</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.虚拟机添加硬盘</span><br><span class="line">2.分区 fdisk /dev/sdb</span><br><span class="line">3.格式化 mkfs -t ext4 /dev/sdb1</span><br><span class="line">4.挂载</span><br><span class="line">  新建/home/newdisk</span><br><span class="line">  mount /dev/sdb1 /home/newdisk</span><br><span class="line">5.设置自动挂载</span><br><span class="line">vim /etc/fstab</span><br><span class="line">/dev/sdb1   /home/newdisk   ext4   defaults   0   0</span><br></pre></td></tr></table></figure>
<h3 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统整体磁盘使用情况</span></span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询指定目录的磁盘占用情况</span></span><br><span class="line">du -h /目录</span><br><span class="line">-s <span class="comment"># 指定目录占用大小汇总</span></span><br><span class="line">-h <span class="comment"># 带计量单位</span></span><br><span class="line">-a <span class="comment"># 含文件</span></span><br><span class="line">--max-depth=1 <span class="comment"># 子目录深度</span></span><br><span class="line">-c <span class="comment"># 列出明细的同时，增加汇总值</span></span><br><span class="line">[root@centos7 <span class="built_in">test</span>]<span class="comment"># du -ach --max-depth=1 /opt</span></span><br><span class="line">0	/opt/rh</span><br><span class="line">178M	/opt/jdk-8u181-linux-x64.tar.gz</span><br><span class="line">178M	/opt</span><br><span class="line">178M	total</span><br><span class="line"></span><br><span class="line"><span class="comment"># 树状形式显示</span></span><br><span class="line">tree</span><br></pre></td></tr></table></figure>


<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p><a href="https://www.bilibili.com/video/BV1bA411b7vs">配置静态IP</a></p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全格式显示所有进程</span></span><br><span class="line">ps -ef | grep XXX</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br><span class="line">killall 进程名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程树</span></span><br><span class="line">pstree -u  <span class="comment"># 显示用户</span></span><br><span class="line">pstree -p  <span class="comment"># 显示进程的pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看firewall服务状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="comment"># 查看firewall的状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all </span><br><span class="line"><span class="comment"># 查询端口是否开放</span></span><br><span class="line">firewall-cmd --query-port=8080/tcp</span><br><span class="line"><span class="comment"># 开放80端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br><span class="line"><span class="comment"># 移除端口</span></span><br><span class="line">firewall-cmd --permanent --remove-port=8080/tcp</span><br><span class="line"><span class="comment">#重启防火墙(修改配置后要重启防火墙)</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务名</span></span><br><span class="line">setup</span><br><span class="line">systemctl list-unit-files</span><br></pre></td></tr></table></figure>
<p><strong>服务的运行级别</strong></p>
<p>Linux 系统有 7 种运行级别：常用的是级别 3 和 5<br>• 运行级别 0：系统停机状态，系统默认运行级别不能设为 0，否则不能正常启动<br>• 运行级别 1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆<br>• 运行级别 2：多用户状态(没有 NFS)，不支持网络<br>• 运行级别 3：完全的多用户状态(有 NFS)，登陆后进入控制台命令行模式<br>• 运行级别 4：系统未使用，保留<br>• 运行级别 5：X11 控制台，登陆后进入图形 GUI 模式<br>• 运行级别 6：系统正常关闭并重启，默认运行级别不能设为 6，否则不能正常启动</p>
<p>通过<code>chkconfig</code> 命令可以给每个服务的各个运行级别设置自启动/关闭</p>
<p><strong>动态监控进程</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top [选项]</span><br><span class="line">-d：秒数，指定top命令间隔多少秒更新，默认3秒</span><br><span class="line">-i：使top不显示闲置或僵死进程</span><br><span class="line">-p：通过指定进程PID来显示相应进程状态</span><br><span class="line"></span><br><span class="line">交互操作（在top里使用的指令）</span><br><span class="line">P：以CPU使用率排序（默认此项）</span><br><span class="line">M：以内存使用率来排序</span><br><span class="line">N：以PID排序</span><br><span class="line">q：退出top</span><br></pre></td></tr></table></figure>
<p><strong>查看系统网络情况</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp</span><br><span class="line"><span class="comment"># -an 按一定顺序排列输出</span></span><br><span class="line"><span class="comment"># -p 显示哪个进程在调用</span></span><br></pre></td></tr></table></figure>


<h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询已安装的 rpm 列表</span></span><br><span class="line">rpm –qa | grep xx</span><br><span class="line"><span class="comment"># 查询软件包信息</span></span><br><span class="line">rpm -qi 软件包名 </span><br><span class="line"><span class="comment"># 查询软件包中的文件</span></span><br><span class="line">rpm -ql 软件包名 </span><br><span class="line"><span class="comment"># 查询文件所属的软件包</span></span><br><span class="line">rpm -qf 文件全路径名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载  带上--nodeps 就是强制删除</span></span><br><span class="line">rpm -e 包名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh RPM包全路径名称</span><br><span class="line">i=install 安 装</span><br><span class="line">v=verbose 提 示</span><br><span class="line">h=<span class="built_in">hash</span> 进度条</span><br></pre></td></tr></table></figure>
<h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Yum 是一个 Shell 前端软件包管理器,基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。使用 yum 的前提是可以联网。</span><br><span class="line"><span class="comment"># 查询 yum 服务器是否有需要安装的软件</span></span><br><span class="line">yum list | grep xx 软件列表</span><br><span class="line"><span class="comment"># 安装指定的 yum 包</span></span><br><span class="line">yum install xxx </span><br></pre></td></tr></table></figure>


<h2 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h2><h3 id="主键盘快捷键"><a href="#主键盘快捷键" class="headerlink" title="主键盘快捷键"></a>主键盘快捷键</h3><table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
<th>助记</th>
</tr>
</thead>
<tbody><tr>
<td>上</td>
<td>Ctrl-p</td>
<td>previous</td>
</tr>
<tr>
<td>下</td>
<td>Ctrl-n</td>
<td>next</td>
</tr>
<tr>
<td>左</td>
<td>Ctrl-b</td>
<td>backward</td>
</tr>
<tr>
<td>右</td>
<td>Ctrl-f</td>
<td>forward</td>
</tr>
<tr>
<td>Del</td>
<td>Ctrl-d</td>
<td>delete光标后面的</td>
</tr>
<tr>
<td>Home</td>
<td>Ctrl-a</td>
<td>the first letter</td>
</tr>
<tr>
<td>End</td>
<td>Ctrl-e</td>
<td>end</td>
</tr>
<tr>
<td>Backspace</td>
<td>Backspace</td>
<td>delete光标前面的</td>
</tr>
</tbody></table>
<p>Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序，用户可以用 Shell 来启动、挂起、停止甚至是编写一些程序。</p>
<h3 id="第一个shell脚本"><a href="#第一个shell脚本" class="headerlink" title="第一个shell脚本"></a>第一个shell脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello World&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 <span class="built_in">test</span>]<span class="comment"># chmod 777 hello.sh </span></span><br><span class="line">[root@centos7 <span class="built_in">test</span>]<span class="comment"># ./hello.sh </span></span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>
<h3 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）Linux Shell 中的变量分为系统变量和用户自定义变量。</span><br><span class="line">2）系统变量： $HOME、 $PWD、 $SHELL、 $USER 等等</span><br><span class="line"></span><br><span class="line">定义变量：变量&#x3D;值</span><br><span class="line">撤销变量：unset 变量</span><br><span class="line">声明静态变量：readonly 变量，注意：不能 unset</span><br><span class="line">显示当前 shell 中所有变量：set | more</span><br><span class="line"></span><br><span class="line">定义变量的规则</span><br><span class="line">1. 变量名称可以由字母、数字和下划线组成，但是不能以数字开头。</span><br><span class="line">2. 等号两侧不能有空格</span><br><span class="line">3. 变量名称一般习惯为大写</span><br></pre></td></tr></table></figure>
<h4 id="将返回值赋值给变量"><a href="#将返回值赋值给变量" class="headerlink" title="将返回值赋值给变量"></a>将返回值赋值给变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">A=`ls -la`</span><br><span class="line">A=$(ls -la)</span><br><span class="line"></span><br><span class="line">echo $A</span><br></pre></td></tr></table></figure>
<h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. export 变量名=变量值 （功能描述：将 shell 变量输出为环境变量）</span><br><span class="line">2. source 配置文件（功能描述：让修改后的配置信息立即生效）</span><br><span class="line"></span><br><span class="line">使用vim编辑/etc/profile，在文件末尾添加export语句，然后使用source命令让文件生效。</span><br><span class="line">JAVA_HOME=/usr/local/java/jdk1.8.0_181</span><br><span class="line">CLASSPATH=$JAVA_HOME/lib/</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>
<h4 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">当我们执行一个 shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量。</span><br><span class="line">语法：</span><br><span class="line"><span class="meta">$</span><span class="bash">n   n 为数字， <span class="variable">$0</span> 代表命令本身， <span class="variable">$1</span> 到 <span class="variable">$9</span> 代表第一到第九个参数，十以上的参数用大括号包含如$ &#123;10&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">*   这个变量代表命令行中所有的参数， $*把所有的参数看成一个整体</span></span><br><span class="line"><span class="meta">$</span><span class="bash">@   这个变量也代表命令行中所有的参数，不过 @把每个参数区分对待</span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="comment">#   这个变量代表命令行中所有参数的个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">@与 $*都代表全部参数，将他们用引号引起来分别对他们进行迭代时， $*一次会输出全部参数  <span class="variable">$@</span>则一个个输出。</span></span><br></pre></td></tr></table></figure>
<h4 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shell 设计者事先已经定义好的变量，可以直接在 shell 脚本中使用</span><br><span class="line">语法：</span><br><span class="line">- $$ ：当前进程的进程号（PID）</span><br><span class="line">- $! ：后台运行的最后一个进程的进程号（PID）</span><br><span class="line">- $？：最后一次执行的命令的返回状态。0表示成功，非0表示不成功。</span><br></pre></td></tr></table></figure>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. $((算术表达式))</span><br><span class="line">2. $[算术表达式]   推荐</span><br><span class="line">3. expr 算术表达式（运算符直接必须加空格）</span><br></pre></td></tr></table></figure>
<h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">[ condition ]（注意 condition 前后要有空格）</span><br><span class="line">非空返回 true，可使用 $? 验证（0 为 true，&gt;1 为 false）</span><br><span class="line"></span><br><span class="line">常用判断条件</span><br><span class="line">1. 两个整数的比较</span><br><span class="line">   = 字符串比较</span><br><span class="line">   -lt 小于</span><br><span class="line">   -le 小于等于</span><br><span class="line">   -eq 等于</span><br><span class="line">   -gt 大于</span><br><span class="line">   -ge 大于等于</span><br><span class="line">   -ne 不等于</span><br><span class="line">2. 按照文件权限进行判断</span><br><span class="line">   -r 有读的权限 [ -r 文件 ]</span><br><span class="line">   -w 有写的权限</span><br><span class="line">   -x 有执行的权限</span><br><span class="line">3. 按照文件类型进行判断</span><br><span class="line">   -f 文件存在并且是一个常规的文件</span><br><span class="line">   -e 文件存在</span><br><span class="line">   -d 文件存在并是一个目录</span><br><span class="line">   </span><br><span class="line">if [ &quot;ok&quot; = &quot;ok&quot; ]</span><br><span class="line">then echo &quot;equal&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -f a.txt ]</span><br><span class="line">then echo &quot;文件存在&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if判断</span><br><span class="line">1. if [ 条件判断式 ]</span><br><span class="line">   then</span><br><span class="line">   	程序</span><br><span class="line">   elif [ 条件判断式 ]</span><br><span class="line">   then</span><br><span class="line">   	程序</span><br><span class="line">   fi</span><br><span class="line">   </span><br><span class="line">2. if [ 条件判断式 ]</span><br><span class="line">   then</span><br><span class="line">   	程序</span><br><span class="line">   else [ 条件判断式 ]</span><br><span class="line">   then</span><br><span class="line">   	程序</span><br><span class="line">   fi</span><br><span class="line"></span><br><span class="line">注意：中括号与条件判断式之间必须要有空格</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case 语法：</span><br><span class="line"></span><br><span class="line">case $变量名 in</span><br><span class="line">&quot;值 1&quot;）</span><br><span class="line">	如果变量的值等于值 1，则执行程序 1</span><br><span class="line">;;</span><br><span class="line">&quot;值 2&quot;）</span><br><span class="line">	如果变量的值等于值 2，则执行程序 2</span><br><span class="line">;;</span><br><span class="line">	…省略其他分支…</span><br><span class="line">*）</span><br><span class="line">	如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for循环</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以测试<span class="string">&quot;$*&quot;</span>  <span class="string">&quot;<span class="variable">$@</span>&quot;</span> 的区别</span></span><br><span class="line">1. for 变量 in 值1 值2 值3…  </span><br><span class="line">   do</span><br><span class="line">   	程序</span><br><span class="line">   done</span><br><span class="line"></span><br><span class="line">2. for (( 初始值;循环控制条件;变量变化 ))</span><br><span class="line">   do</span><br><span class="line">	程序</span><br><span class="line">   done</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while循环语法</span><br><span class="line"></span><br><span class="line">while [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">  程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h4 id="read读取控制台"><a href="#read读取控制台" class="headerlink" title="read读取控制台"></a>read读取控制台</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">read(选项)(参数)</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">-p：指定读取值时的提示符；</span><br><span class="line">-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了</span><br><span class="line"></span><br><span class="line">参数变量：指定读取值的变量名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 读取输入的NUM值，10秒内输入</span></span><br><span class="line">read -t 10 -p &quot;输入一个数num&quot; NUM</span><br></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>shell 编程有系统函数，也可以自定义函数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 系统函数</span></span><br><span class="line">1 basename</span><br><span class="line">  basename [pathname][suffix]</span><br><span class="line">  basename [string][suffix]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：basename 命令会删掉所有的前缀包括最后一个 / 字符，然后将字符串显示出来，如果选项带有后缀，返回值将会把后缀删掉</span></span><br><span class="line"></span><br><span class="line">basename /home/dir/test.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> test.txt</span></span><br><span class="line">basename /home/dir/test.txt .txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span></span></span><br><span class="line"></span><br><span class="line">2 dirname </span><br><span class="line">dirname /home/dir/test.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> /home/dir</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 自定义函数</span></span><br><span class="line">[ function ] funname[()]</span><br><span class="line">&#123;</span><br><span class="line">	Action;</span><br><span class="line">	[return int;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义函数例子</span></span><br><span class="line">function getSum()&#123;</span><br><span class="line">    SUM=$[$n1+$n2]</span><br><span class="line">    echo &quot;The sum is $SUM&quot;</span><br><span class="line">&#125;</span><br><span class="line">read -p &quot;please input n1:&quot; n1</span><br><span class="line">read -p &quot;please input n2:&quot; n2</span><br><span class="line">getSum $n1 $n2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的基本使用</title>
    <url>/2021/01/20/Docker/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><a href="http://www.javaboy.org/docker/">江南一点雨Docker教程</a></p>
<h2 id="1-什么是-Docker"><a href="#1-什么是-Docker" class="headerlink" title="1.什么是 Docker"></a>1.什么是 Docker</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 官方介绍</span></span><br><span class="line">我们为你提供了一个完整的容器解决方案,不管你是谁,不管你在哪,你都可以开始容器的的旅程。</span><br><span class="line">官方定义: docker是一个容器技术。</span><br><span class="line"></span><br><span class="line">Docker 使用 Google 公司推出的 Go 语言进行开发，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</span><br></pre></td></tr></table></figure>
<h2 id="2-为什么是Docker"><a href="#2-为什么是Docker" class="headerlink" title="2.为什么是Docker"></a>2.为什么是Docker</h2><p><strong>优势</strong>：1. 一致的运行环境,更轻松的迁移  2. 对进程进行封装隔离,容器与容器之间互不影响,更高效的利用系统资源3. 通过镜像复制N多个环境一致容器</p>
<h2 id="3-Docker和虚拟机区别"><a href="#3-Docker和虚拟机区别" class="headerlink" title="3.Docker和虚拟机区别"></a>3.Docker和虚拟机区别</h2><p><img src="/2021/01/20/Docker/image-20201220222456675.png" alt="image-20201220222456675"></p>
<p>比较上面两张图，发现虚拟机是携带操作系统，本身很小的应用程序却因为携带了操作系统而变得非常大，很笨重。Docker是不携带操作系统的，所以Docker的应用就非常的轻巧。另外在调用宿主机的CPU、磁盘等等这些资源的时候，拿内存举例，虚拟机是利用Hypervisor去虚拟化内存，整个调用过程是虚拟内存 -&gt; 虚拟物理内存 -&gt; 真正物理内存，但是Docker是利用Docker Engine去调用宿主的的资源，这时候过程是虚拟内存 -&gt; 真正物理内存。</p>
<table>
<thead>
<tr>
<th></th>
<th>传统虚拟机</th>
<th>Docker容器</th>
</tr>
</thead>
<tbody><tr>
<td>磁盘占用</td>
<td>几个GB到几十个GB左右</td>
<td>几十MB到几百MB左右</td>
</tr>
<tr>
<td>CPU内存占用</td>
<td>虚拟操作系统非常占用CPU和内存</td>
<td>Docker引擎占用极低</td>
</tr>
<tr>
<td>启动速度</td>
<td>（从开机到运行项目）几分钟</td>
<td>（从开启容器到运行项目）几秒</td>
</tr>
<tr>
<td>安装管理</td>
<td>需要专门的运维技术</td>
<td>安装、管理方便</td>
</tr>
<tr>
<td>应用部署</td>
<td>每次部署都费时费力</td>
<td>从第二次部署开始轻松简捷</td>
</tr>
<tr>
<td>耦合性</td>
<td>多个应用服务安装到一起，容易互相影响</td>
<td>每个应用服务一个容器，达成隔离</td>
</tr>
<tr>
<td>系统依赖</td>
<td>无</td>
<td>需求相同或相似的内核，目前推荐是Linux</td>
</tr>
</tbody></table>
<h2 id="4-Docker安装"><a href="#4-Docker安装" class="headerlink" title="4.Docker安装"></a>4.Docker安装</h2><p><a href="https://www.cnblogs.com/yufeng218/p/8370670.html">安装步骤</a></p>
<p>1、要求 CentOS 系统的内核版本高于 3.10 。通过 **uname -r **命令查看你当前的内核版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uname -r</span></span><br></pre></td></tr></table></figure>
<p>2、使用 root 权限登录 Centos。确保 yum 包更新到最新。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum update</span></span><br></pre></td></tr></table></figure>
<p>3、卸载旧版本(如果安装过旧版本的话)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker  docker-common docker-selinux docker-engine</span></span><br></pre></td></tr></table></figure>
<p>4、安装需要的软件包， yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br></pre></td></tr></table></figure>
<p>5、设置yum源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>
<p>6、可以查看所有仓库中所有docker版本，并选择特定版本安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum list docker-ce --showduplicates | sort -r</span></span><br></pre></td></tr></table></figure>
<p>7、安装docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce  <span class="comment">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install &lt;FQPN&gt;  <span class="comment"># 例如：sudo yum install docker-ce-17.12.0.ce</span></span></span><br></pre></td></tr></table></figure>
<p>8、启动并加入开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure>
<p>9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker version</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">问题：因为之前已经安装过旧版本的docker，在安装的时候报错如下：</span><br><span class="line">Transaction check error:</span><br><span class="line">  file /usr/bin/docker from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file /usr/bin/docker-containerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file /usr/bin/docker-containerd-shim from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file /usr/bin/dockerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  </span><br><span class="line">卸载旧版本的包</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span></span><br><span class="line">再次安装docker</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce</span></span><br></pre></td></tr></table></figure>


<h2 id="5-Docker-的核心架构"><a href="#5-Docker-的核心架构" class="headerlink" title="5.Docker 的核心架构"></a>5.Docker 的核心架构</h2><p><img src="/2021/01/20/Docker/image-20200404111908085-0291323.png" alt="image-20200404111908085"></p>
<ul>
<li><code>镜像:</code> 一个镜像代表一个应用环境,他是一个只读的文件,如 mysql镜像,tomcat镜像,nginx镜像等</li>
<li><code>容器:</code> 镜像每次运行之后就是产生一个容器,就是正在运行的镜像,特点就是可读可写</li>
<li><code>仓库:</code>用来存放镜像的位置,类似于maven仓库,也是镜像下载和上传的位置</li>
<li><code>dockerFile:</code>docker生成镜像配置文件,用来书写自定义镜像的一些配置</li>
<li><code>tar:</code>一个对镜像打包的文件,日后可以还原成镜像</li>
</ul>
<h2 id="6-Docker-配置阿里镜像加速服务"><a href="#6-Docker-配置阿里镜像加速服务" class="headerlink" title="6. Docker 配置阿里镜像加速服务"></a>6. Docker 配置阿里镜像加速服务</h2><p><img src="/2021/01/20/Docker/image-20200404120356784.png" alt="image-20200404120356784"></p>
<ul>
<li>访问阿里云登录自己账号查看docker镜像加速服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://lz2nib3q.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<ul>
<li>验证docker的镜像加速是否生效</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker info</span><br><span class="line">		..........</span><br><span class="line">    127.0.0.0/8</span><br><span class="line">   Registry Mirrors:</span><br><span class="line">    &#x27;https://lz2nib3q.mirror.aliyuncs.com/&#x27;</span><br><span class="line">   Live Restore Enabled: false</span><br><span class="line">   Product License: Community Engine</span><br></pre></td></tr></table></figure>


<h2 id="7-Docker的入门应用"><a href="#7-Docker的入门应用" class="headerlink" title="7.Docker的入门应用"></a>7.Docker的入门应用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run hello-world</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>


<h2 id="8-常用命令"><a href="#8-常用命令" class="headerlink" title="8.常用命令"></a>8.常用命令</h2><h3 id="辅助命令"><a href="#辅助命令" class="headerlink" title="辅助命令"></a>辅助命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.安装完成辅助命令</span></span><br><span class="line">docker version	--	查看docker的信息</span><br><span class="line">docker info		--	查看更详细的信息</span><br><span class="line">docker --help	--	帮助命令</span><br></pre></td></tr></table></figure>
<h3 id="Images-镜像命令"><a href="#Images-镜像命令" class="headerlink" title="Images 镜像命令"></a>Images 镜像命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.查看本机中所有镜像</span></span><br><span class="line">docker images	--	列出本地所有镜像</span><br><span class="line">-a		            列出所有镜像（包含中间映像层）</span><br><span class="line">-q		            只显示镜像id</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.搜索镜像</span></span><br><span class="line">docker search [options] 镜像名	  -- 去dockerhub上查询当前镜像</span><br><span class="line">-s 指定值		                    列出收藏数不少于指定值的镜像</span><br><span class="line">--no-trunc	                       显示完整的镜像信息</span><br><span class="line"></span><br><span class="line"><span class="section"># 3.从仓库下载镜像</span></span><br><span class="line">docker pull 镜像名[:TAG|@DIGEST]</span><br><span class="line">docker inspect      -- 查看镜像详细信息</span><br><span class="line"></span><br><span class="line"><span class="section"># 4.删除镜像</span></span><br><span class="line">docker rmi 镜像名	 --  删除镜像</span><br><span class="line">-f	                   强制删除</span><br></pre></td></tr></table></figure>
<h3 id="Contrainer-容器命令"><a href="#Contrainer-容器命令" class="headerlink" title="Contrainer 容器命令"></a>Contrainer 容器命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.运行容器</span></span><br><span class="line">docker run 镜像名	--	新建并启动容器</span><br><span class="line">--name 		          为容器起一个名字</span><br><span class="line">-d			         启动守护式容器（在后台启动容器）</span><br><span class="line">-p 			         映射端口号：原始端口号</span><br><span class="line"></span><br><span class="line">例：docker run -it --name myTomcat -p 8888:8080 tomcat</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.查看运行的容器</span></span><br><span class="line">docker ps     -- 列出所有正在运行的容器</span><br><span class="line">-a			    正在运行的和历史运行过的容器</span><br><span class="line">-q			    静默模式，只显示容器编号</span><br><span class="line"></span><br><span class="line"><span class="section"># 3.停止|关闭|重启容器</span></span><br><span class="line">docker start   容器名字或者容器id  -- 开启容器</span><br><span class="line">docker restart 容器名或者容器id    -- 重启容器</span><br><span class="line">docker stop  容器名或者容器id 	    -- 正常停止容器运行</span><br><span class="line">docker kill  容器名或者容器id      -- 立即停止容器运行</span><br><span class="line"></span><br><span class="line"><span class="section"># 4.删除容器</span></span><br><span class="line">docker rm -f 容器id和容器名     </span><br><span class="line">docker rm -f $(docker ps -aq)	--	删除所有容器</span><br><span class="line"></span><br><span class="line"><span class="section"># 5.查看容器内进程</span></span><br><span class="line">docker top 容器id或者容器名   -- 查看容器内的进程</span><br><span class="line"></span><br><span class="line"><span class="section"># 6.查看查看容器内部细节</span></span><br><span class="line">docker inspect 容器id 	   -- 查看容器内部细节</span><br><span class="line"></span><br><span class="line"><span class="section"># 7.查看容器的运行日志</span></span><br><span class="line">docker logs [OPTIONS] 容器id或容器名	-- 查看容器日志</span><br><span class="line">-t			                           加入时间戳</span><br><span class="line">-f			                           跟随最新的日志打印</span><br><span class="line">--tail 数字	                          显示最后多少条</span><br><span class="line"></span><br><span class="line"><span class="section"># 8.进入容器内部</span></span><br><span class="line">docker exec [options] 容器id 容器内命令     -- 进入容器执行命令</span><br><span class="line">-i		                                     以交互模式运行容器，通常与-t一起使用</span><br><span class="line">-t		                                     分配一个伪终端    shell窗口   bash </span><br><span class="line"></span><br><span class="line"><span class="section"># 9.容器和宿主机之间复制文件</span></span><br><span class="line">docker cp 文件|目录 容器id:容器路径            --   将宿主机复制到容器内部</span><br><span class="line">docker cp 容器id:容器内资源路径 宿主机目录路径  --   将容器内资源拷贝到主机上</span><br><span class="line"></span><br><span class="line"><span class="section"># 10.数据卷(volum)实现与宿主机共享目录</span></span><br><span class="line">docker run -v 宿主机的路径|任意别名:/容器内的路径 镜像名</span><br><span class="line">注意: </span><br><span class="line"><span class="code">	1.如果是宿主机路径必须是绝对路径,宿主机目录会覆盖容器内目录内容</span></span><br><span class="line"><span class="code">	2.如果是别名则会在docker运行容器时自动在宿主机中创建一个目录,并将容器目录文件复制到宿主机中</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 11.打包镜像</span></span><br><span class="line"><span class="code">docker save 镜像名 -o 名称.tar</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 12.载入镜像</span></span><br><span class="line"><span class="code">docker load -i 名称.tar</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 13.容器打包成新的镜像</span></span><br><span class="line"><span class="code">docker commit -m &quot;描述信息&quot; -a &quot;作者信息&quot; （容器id或者名称）打包的镜像名称:标签</span></span><br></pre></td></tr></table></figure>


<h2 id="9-docker的镜像原理"><a href="#9-docker的镜像原理" class="headerlink" title="9.docker的镜像原理"></a>9.docker的镜像原理</h2><h3 id="镜像是什么？"><a href="#镜像是什么？" class="headerlink" title="镜像是什么？"></a>镜像是什么？</h3><blockquote>
<p>镜像是一种轻量级的，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时所需的库、环境变量和配置文件。</p>
</blockquote>
<h3 id="为什么一个镜像会那么大？"><a href="#为什么一个镜像会那么大？" class="headerlink" title="为什么一个镜像会那么大？"></a>为什么一个镜像会那么大？</h3><p><img src="/2021/01/20/Docker/image-20200404142950068.png" alt="image-20200404142950068"></p>
<p><code>镜像就是花卷</code></p>
<ul>
<li><p>UnionFS（联合文件系统）:</p>
<p>Union文件系统是一种分层，轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union文件系统是Docker镜像的基础。这种文件系统特性:就是一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录 。    </p>
</li>
</ul>
<h3 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h3><blockquote>
<p><code>docker的镜像实际是由一层一层的文件系统组成。</code></p>
</blockquote>
<ul>
<li><p>bootfs（boot file system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统。在docker镜像的最底层就是bootfs。这一层与Linux/Unix 系统是一样的，包含boot加载器（bootloader）和内核（kernel）。当boot加载完,后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时会卸载bootfs。</p>
</li>
<li><p>rootfs（root file system），在bootfs之上，包含的就是典型的linux系统中的/dev，/proc，/bin，/etc等标准的目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu/CentOS等等。</p>
</li>
<li><p>我们平时安装进虚拟机的centos都有1到几个GB，为什么docker这里才200MB？对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令，工具，和程序库就可以了，因为底层直接使用Host的Kernal，自己只需要提供rootfs就行了。由此可见不同的linux发行版，他们的bootfs是一致的，rootfs会有差别。因此不同的发行版可以共用bootfs。</p>
</li>
</ul>
<p><img src="/2021/01/20/Docker/1567585172(1).jpg"></p>
<h3 id="为什么docker镜像要采用这种分层结构呢"><a href="#为什么docker镜像要采用这种分层结构呢" class="headerlink" title="为什么docker镜像要采用这种分层结构呢?"></a>为什么docker镜像要采用这种分层结构呢?</h3><blockquote>
<p><code>最大的一个好处就是资源共享</code></p>
</blockquote>
<ul>
<li>比如：有多个镜像都是从相同的base镜像构建而来的，那么宿主机只需在磁盘中保存一份base镜像。同时内存中也只需要加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。Docker镜像都是只读的。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称为容器层，容器层之下都叫镜像层。</li>
</ul>
<h2 id="10-Docker安装常用服务"><a href="#10-Docker安装常用服务" class="headerlink" title="10.Docker安装常用服务"></a>10.Docker安装常用服务</h2><h3 id="1-安装mysql"><a href="#1-安装mysql" class="headerlink" title="1 安装mysql"></a>1 安装mysql</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.拉取mysql镜像到本地</span></span><br><span class="line">docker pull mysql:tag (tag不加默认最新版本)</span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code"># 2.运行mysql服务</span></span><br><span class="line"><span class="code">docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d  mysql:tag </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.进入mysql容器</span></span><br><span class="line"><span class="code">docker exec -it 容器名称|容器id bash</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.外部查看mysql日志</span></span><br><span class="line"><span class="code">docker logs 容器名称|容器id</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.使用自定义配置参数</span></span><br><span class="line"><span class="code">docker run --name mysql -v /root/mysql/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d mysql:tag</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.将容器数据位置与宿主机位置挂载保证数据安全(连起来写)</span></span><br><span class="line"><span class="code">docker run --name mysql </span></span><br><span class="line"><span class="code">-v /root/mysql/data:/var/lib/mysql </span></span><br><span class="line"><span class="code">-v /root/mysql/conf.d:/etc/mysql/conf.d </span></span><br><span class="line"><span class="code">-e MYSQL_ROOT_PASSWORD=root </span></span><br><span class="line"><span class="code">-p 3306:3306 </span></span><br><span class="line"><span class="code">-d mysql:tag</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 7.通过其他客户端访问 如在window系统|macos系统使用客户端工具访问</span></span><br><span class="line"><span class="code"># 8.将mysql数据库备份为sql文件</span></span><br><span class="line"><span class="code">docker exec mysql|容器id sh -c &#x27;exec mysqldump --all-databases -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &gt; /root/all-databases.sql  --导出全部数据</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">docker exec mysql sh -c &#x27;exec mysqldump --databases 库表 -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &gt; /root/all-databases.sql  --导出指定库数据</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">docker exec mysql sh -c &#x27;exec mysqldump --no-data --databases 库表 -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &gt; /root/all-databases.sql  --导出指定库数据不要数据</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 9.执行sql文件到mysql中</span></span><br><span class="line"><span class="code">docker exec -i mysql sh -c &#x27;exec mysql -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &lt; /root/xxx.sql</span></span><br></pre></td></tr></table></figure>
<h3 id="2-安装Redis服务"><a href="#2-安装Redis服务" class="headerlink" title="2 安装Redis服务"></a>2 安装Redis服务</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.在docker hub搜索redis镜像</span></span><br><span class="line">docker search redis</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.拉取redis镜像到本地</span></span><br><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line"><span class="section"># 3.启动redis服务运行容器</span></span><br><span class="line">docker run --name redis -p 6379:6379 -d redis:tag (暴露外部宿主机端口为6379进行连接) </span><br><span class="line"></span><br><span class="line"><span class="section"># 4.查看启动日志</span></span><br><span class="line">docker logs -t -f 容器id|容器名称</span><br><span class="line"></span><br><span class="line"><span class="section"># 5.进入容器内部查看</span></span><br><span class="line">docker exec -it 容器id|名称 bash  </span><br><span class="line"></span><br><span class="line"><span class="section"># 6.加载外部自定义配置启动redis容器</span></span><br><span class="line"><span class="code">	默认情况下redis官方镜像中没有redis.conf配置文件 需要去官网下载指定版本的配置文件</span></span><br><span class="line"><span class="code">	1. wget http://download.redis.io/releases/redis-5.0.8.tar.gz  下载官方安装包</span></span><br><span class="line"><span class="code">	2. 将官方安装包中配置文件进行复制到宿主机指定目录中如 /root/redis/redis.conf文件</span></span><br><span class="line"><span class="code">	3. 修改需要自定义的配置</span></span><br><span class="line"><span class="code">		 bind 0.0.0.0 开启远程权限</span></span><br><span class="line"><span class="code">		 appenonly yes 开启aof持久化</span></span><br><span class="line"><span class="code">	4. 加载配置启动</span></span><br><span class="line"><span class="code">	docker run --name redis -v /root/redis:/usr/local/etc/redis -p 6379:6379 -d redis redis-server /usr/local/etc/redis/redis.conf  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 7.将数据目录挂在到本地保证数据安全</span></span><br><span class="line"><span class="code">	docker run --name redis -v /root/redis/data:/data -v /root/redis/redis.conf:/usr/local/etc/redis/redis.conf -p 6379:6379 -d redis redis-server 					/usr/local/etc/redis/redis.conf  </span></span><br></pre></td></tr></table></figure>
<h3 id="3-安装Nginx"><a href="#3-安装Nginx" class="headerlink" title="3 安装Nginx"></a>3 安装Nginx</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.在docker hub搜索nginx</span></span><br><span class="line">docker search nginx</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.拉取nginx镜像到本地</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="section"># 3.启动nginx容器</span></span><br><span class="line">docker run -p 80:80 --name nginx01 -d nginx</span><br><span class="line"></span><br><span class="line"><span class="section"># 4.进入容器</span></span><br><span class="line">docker exec -it nginx01 /bin/bash</span><br><span class="line">查找目录:  whereis nginx</span><br><span class="line">配置文件:  /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="section"># 5.复制配置文件到宿主机</span></span><br><span class="line">docker cp nginx01(容器id|容器名称):/etc/nginx/nginx.conf 宿主机名录</span><br><span class="line"></span><br><span class="line"><span class="section"># 6.挂在nginx配置以及html到宿主机外部</span></span><br><span class="line">docker run --name nginx02 -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/html:/usr/share/nginx/html -p 80:80 -d nginx		</span><br></pre></td></tr></table></figure>
<h3 id="4-安装Tomcat"><a href="#4-安装Tomcat" class="headerlink" title="4 安装Tomcat"></a>4 安装Tomcat</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.在docker hub搜索tomcat</span></span><br><span class="line">docker search tomcat</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.下载tomcat镜像</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"></span><br><span class="line"><span class="section"># 3.运行tomcat镜像</span></span><br><span class="line">docker run -p 8080:8080 -d --name mytomcat tomcat</span><br><span class="line"></span><br><span class="line"><span class="section"># 4.进入tomcat容器</span></span><br><span class="line">docker exec -it mytomcat /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="section"># 5.将webapps目录挂载在外部</span></span><br><span class="line">docker run -p 8080:8080 -v /root/webapps:/usr/local/tomcat/webapps -d --name mytomcat tomcat</span><br></pre></td></tr></table></figure>
<p><strong>Docker中出现如下错误解决方案</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker search mysql 或者 docker pull 这些命令无法使用</span></span><br><span class="line">Error response from daemon: Get https://index.docker.io/v1/search?q=mysql&amp;n=<span class="number">25</span>: x509: certificate has expired or is not yet valid</span><br></pre></td></tr></table></figure>
<ul>
<li>注意:<strong>这个错误的原因在于是系统的时间和docker hub时间不一致,需要做系统时间与网络时间同步</strong></li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.安装时间同步</span></span><br><span class="line">sudo yum -y install ntp ntpdate</span><br><span class="line"><span class="section"># 2.同步时间</span></span><br><span class="line">sudo ntpdate cn.pool.ntp.org</span><br><span class="line"><span class="section"># 3.查看本机时间</span></span><br><span class="line">date</span><br><span class="line"><span class="section"># 4.重新测试</span></span><br></pre></td></tr></table></figure>


<h2 id="11-Dockerfile"><a href="#11-Dockerfile" class="headerlink" title="11.Dockerfile"></a>11.Dockerfile</h2><p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong>。Dockerfile解析过程如下：</p>
<p><img src="/2021/01/20/Docker/image-20200603181253804.png" alt="image-20200603181253804"></p>
<h3 id="Dockerfile的保留命令"><a href="#Dockerfile的保留命令" class="headerlink" title="Dockerfile的保留命令"></a>Dockerfile的保留命令</h3><p>官方说明:<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p>
<table>
<thead>
<tr>
<th>保留字</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>FROM</strong></td>
<td><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>镜像维护者的姓名和邮箱地址</td>
</tr>
<tr>
<td><strong>RUN</strong></td>
<td><strong>构建镜像时需要运行的指令</strong></td>
</tr>
<tr>
<td><strong>EXPOSE</strong></td>
<td><strong>当前容器对外暴露出的端口号</strong></td>
</tr>
<tr>
<td><strong>WORKDIR</strong></td>
<td><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td>
</tr>
<tr>
<td><strong>ENV</strong></td>
<td><strong>用来在构建镜像过程中设置环境变量</strong></td>
</tr>
<tr>
<td><strong>ADD</strong></td>
<td><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td>
</tr>
<tr>
<td><strong>COPY</strong></td>
<td><strong>类似于ADD，拷贝文件和目录到镜像中<br>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td>
</tr>
<tr>
<td><strong>VOLUME</strong></td>
<td><strong>容器数据卷，用于数据保存和持久化工作</strong></td>
</tr>
<tr>
<td><strong>CMD</strong></td>
<td><strong>指定一个容器启动时要运行的命令<br>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td>
</tr>
<tr>
<td><strong>ENTRYPOINT</strong></td>
<td><strong>指定一个容器启动时要运行的命令<br>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td>
</tr>
</tbody></table>
<h4 id="FROM-命令"><a href="#FROM-命令" class="headerlink" title="FROM 命令"></a>FROM 命令</h4><ul>
<li><p>基于哪个镜像构建新镜像，构建时自动从docker hub拉取base镜像 (必须作为Dockerfile的第一个指令出现)</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;</span><br><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latest</span><br><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;[@&lt;digest&gt;]  使用摘要</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="MAINTAINER-命令"><a href="#MAINTAINER-命令" class="headerlink" title="MAINTAINER  命令"></a>MAINTAINER  命令</h4><ul>
<li><p>镜像维护者的姓名和邮箱地址[废弃]</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MAINTAINER</span> &lt;name&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="RUN-命令"><a href="#RUN-命令" class="headerlink" title="RUN 命令"></a>RUN 命令</h4><ul>
<li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt; (shell form, the <span class="built_in">command</span> is run <span class="keyword">in</span> a shell, <span class="built_in">which</span> by default is /bin/sh -c on Linux or cmd /S /C on Windows)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>] (<span class="built_in">exec</span> form)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo hello&quot;</span>]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="EXPOSE-命令"><a href="#EXPOSE-命令" class="headerlink" title="EXPOSE 命令"></a>EXPOSE 命令</h4><ul>
<li><p>用来指定构建的镜像在运行为容器时对外暴露的端口</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/tcp  如果没有显示指定则默认暴露都是tcp</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/udp</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="CMD-命令"><a href="#CMD-命令" class="headerlink" title="CMD 命令"></a>CMD 命令</h4><ul>
<li><p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p>
</li>
<li><p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (<span class="built_in">exec</span> form, this is the preferred form)</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (as default parameters to ENTRYPOINT)</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">command</span> param1 param2 (shell form)</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="WORKDIR-命令"><a href="#WORKDIR-命令" class="headerlink" title="WORKDIR 命令"></a>WORKDIR 命令</h4><ul>
<li><p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /path/to/workdir</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /a</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> b</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> c</span></span><br><span class="line"></span><br><span class="line">注意:<span class="keyword">WORKDIR</span><span class="bash">指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="ENV-命令"><a href="#ENV-命令" class="headerlink" title="ENV 命令"></a>ENV 命令</h4><ul>
<li><p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="ADD-命令"><a href="#ADD-命令" class="headerlink" title="ADD 命令"></a>ADD 命令</h4><ul>
<li><p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> hom* /mydir/       通配符添加多个文件</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> hom?.txt /mydir/   通配符添加</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> test.txt relativeDir/  可以指定相对路径</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> test.txt /absoluteDir/ 也可以指定绝对路径</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> url </span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="COPY-命令"><a href="#COPY-命令" class="headerlink" title="COPY 命令"></a>COPY 命令</h4><ul>
<li><p>用来将context目录中指定文件复制到镜像的指定目录中</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> src dest</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="VOLUME-命令"><a href="#VOLUME-命令" class="headerlink" title="VOLUME 命令"></a>VOLUME 命令</h4><ul>
<li><p>用来定义容器运行时可以挂载到宿主机的目录</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/data&quot;</span>]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="ENTRYPOINT命令"><a href="#ENTRYPOINT命令" class="headerlink" title="ENTRYPOINT命令"></a>ENTRYPOINT命令</h4><ul>
<li><p>用来指定容器启动时执行命令和CMD类似</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></span><br></pre></td></tr></table></figure>
<p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br>CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p>
</li>
</ul>
<h3 id="Dockerfile构建springboot项目部署"><a href="#Dockerfile构建springboot项目部署" class="headerlink" title="Dockerfile构建springboot项目部署"></a>Dockerfile构建springboot项目部署</h3><p>1.准备springboot可运行项目，将可运行项目放入linux虚拟机中</p>
<p>2.编写Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /demo</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> demo.jar /demo</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>3.构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t demo .</span><br></pre></td></tr></table></figure>
<p>4.运行镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 8090:8090 demo</span><br></pre></td></tr></table></figure>
<p>5.访问项目</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://localhost:8090/</span><br></pre></td></tr></table></figure>
<h3 id="上传自己的镜像到DockerHub"><a href="#上传自己的镜像到DockerHub" class="headerlink" title="上传自己的镜像到DockerHub"></a>上传自己的镜像到DockerHub</h3><p>首先读者打开 Docker Hub ，注册一个账号，账号注册成功之后，在登录账号，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centosxdk demo]# docker login</span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class="line">Username: xudukang</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>
<p>登录成功之后，接下来就可以使用 push 命令上传我们自制的镜像了。注意，自制的镜像要能够上传，命名必须满足规范，即 <code>namespace/name</code> 格式，其中 namespace 必须是用户名，以前文我们创建的 Dockerfile 为例，这里重新构建一个本地镜像并上传到 Docker Hub ，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centosxdk demo]# docker build -t xudukang/demo:v1 .</span><br><span class="line">Sending build context to Docker daemon  18.09MB</span><br><span class="line">Step 1/6 : FROM openjdk:8</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 8ca4a86e32d8</span></span><br><span class="line">Step 2/6 : WORKDIR /demo</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> d878dd074f17</span></span><br><span class="line">Step 3/6 : ADD demo.jar /demo</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 995d993ecc40</span></span><br><span class="line">Step 4/6 : EXPOSE 8090</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 18f42e161c51</span></span><br><span class="line">Step 5/6 : ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 493d3fc903c5</span></span><br><span class="line">Step 6/6 : CMD [&quot;demo.jar&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> cc33dd9b47e1</span></span><br><span class="line">Successfully built cc33dd9b47e1</span><br><span class="line">Successfully tagged xudukang/demo:v1</span><br></pre></td></tr></table></figure>
<p>上传镜像，成功后可以在 docker hub 查看。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centosxdk demo]# docker push xudukang/demo:v1</span><br><span class="line">The push refers to repository [docker.io/xudukang/demo]</span><br><span class="line">79ab7db22181: Pushed </span><br><span class="line">fb386ab41f3d: Pushed </span><br><span class="line">8fa7dd575fe2: Mounted from library/openjdk </span><br><span class="line">7df6dd475950: Mounted from library/openjdk </span><br><span class="line">7496c5e8691b: Mounted from library/openjdk </span><br><span class="line">aa7af8a465c6: Mounted from library/openjdk </span><br><span class="line">ef9a7b8862f4: Mounted from library/openjdk </span><br><span class="line">a1f2f42922b1: Mounted from library/openjdk </span><br><span class="line">4762552ad7d8: Mounted from library/openjdk </span><br><span class="line">v1: digest: sha256:a7b19e8e2c21588d43f3734fa2a5561e55fc0c9cfc58fdef0c1a4c9d707163e6 size: 2213</span><br></pre></td></tr></table></figure>


<h2 id="12-高级网络配置"><a href="#12-高级网络配置" class="headerlink" title="12.高级网络配置"></a>12.高级网络配置</h2><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p>
<p>同时，Docker 随机分配一个本地未占用的私有网段中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p>
<p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p>
<p><img src="/2021/01/20/Docker/image-20201125105847896.png" alt="image-20201125105847896"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">查看网络信息</span><br><span class="line"><span class="section"># docker network ls</span></span><br><span class="line">创建一个网桥</span><br><span class="line"><span class="section"># docker network create -d bridge 网桥名称</span></span><br><span class="line">删除一个网桥</span><br><span class="line"><span class="section"># docker network rm 网桥名称</span></span><br></pre></td></tr></table></figure>
<h3 id="容器间使用网络通信"><a href="#容器间使用网络通信" class="headerlink" title="容器间使用网络通信"></a>容器间使用网络通信</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.查询当前网络配置</span></span><br><span class="line"><span class="bullet">-</span> docker network ls</span><br><span class="line"></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">8e424e5936b7        bridge              bridge              local</span><br><span class="line">17d974db02da        docker<span class="emphasis">_gwbridge     bridge              local</span></span><br><span class="line"><span class="emphasis">d6c326e433f7        host                host                local</span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.创建桥接网络</span></span><br><span class="line"><span class="bullet">-</span> docker network create -d bridge info</span><br><span class="line"></span><br><span class="line">[root@centos ~]# docker network create -d bridge info</span><br><span class="line">6e4aaebff79b1df43a064e0e8fdab08f52d64ce34db78dd5184ce7aaaf550a2f</span><br><span class="line">[root@centos ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">8e424e5936b7        bridge              bridge              local</span><br><span class="line">17d974db02da        docker<span class="emphasis">_gwbridge     bridge              local</span></span><br><span class="line"><span class="emphasis">d6c326e433f7        host                host                local</span></span><br><span class="line"><span class="emphasis">6e4aaebff79b        info                bridge              local</span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.启动容器指定使用网桥</span></span><br><span class="line"><span class="bullet">-</span> docker run -d -p 8890:80 --name nginx001 --network info nginx </span><br><span class="line"><span class="bullet">-</span> docker run -d -p 8891:80 --name nginx002 --network info nginx </span><br><span class="line">注意:一旦指定网桥后--name指定名字就是主机名,多个容器指定在同一个网桥时,可以在任意一个容器中使用主机名与容器进行互通</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker run -d -p 8890:80 --name nginx001 --network info nginx </span><br><span class="line">c315bcc94e9ddaa36eb6c6f16ca51592b1ac8bf1ecfe9d8f01d892f3f10825fe</span><br><span class="line">[root@centos ~]# docker run -d -p 8891:80 --name nginx002 --network info nginx</span><br><span class="line">f8682db35dd7fb4395f90edb38df7cad71bbfaba71b6a4c6e2a3a525cb73c2a5</span><br><span class="line">[root@centos ~]# docker ps</span><br><span class="line">ID           IMAGE COMMAND                CREATED  STATUS        PORTS                  NAMES</span><br><span class="line">f8682db35dd7 nginx &quot;/docker-entrypoint.…&quot; 3s ago   Up 2 seconds  0.0.0.0:8891-&gt;80/tcp   nginx002</span><br><span class="line">c315bcc94e9d nginx &quot;/docker-entrypoint.…&quot; 7s ago   Up 7 minutes  0.0.0.0:8890-&gt;80/tcp   nginx001</span><br><span class="line">b63169d43792 mysql &quot;docker-entrypoint.s…&quot; 7s ago   Up 7 minutes  3306/tcp               mysql </span><br><span class="line">[root@centos ~]# docker exec -it f8682db35dd7 /bin/bash</span><br><span class="line">root@f8682db35dd7:/# curl http://nginx001</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>


<h2 id="13-高级数据卷配置"><a href="#13-高级数据卷配置" class="headerlink" title="13.高级数据卷配置"></a>13.高级数据卷配置</h2><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>
<ul>
<li><code>数据卷</code> 可以在容器之间共享和重用</li>
<li>对 <code>数据卷</code> 的修改会立马生效</li>
<li>对 <code>数据卷</code> 的更新，不会影响镜像</li>
<li><code>数据卷</code> 默认会一直存在，即使容器被删除</li>
</ul>
<p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p>
<h3 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker volume create my-vol</span><br><span class="line">my-vol</span><br></pre></td></tr></table></figure>
<h3 id="查看数据卷"><a href="#查看数据卷" class="headerlink" title="查看数据卷"></a>查看数据卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker volume inspect my-vol       </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2020-11-25T11:43:56+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;my-vol&quot;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker run -d -P --name web  -v my-vol:/usr/share/nginx/html  nginx</span><br><span class="line">[root@centos ~]# docker inspect web</span><br><span class="line">				&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;my-vol&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/usr/share/nginx/html&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;z&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>
<h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume rm my-vol</span><br></pre></td></tr></table></figure>


<h2 id="14-Docker-Compose"><a href="#14-Docker-Compose" class="headerlink" title="14.Docker Compose"></a>14.Docker Compose</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。其定位是 定义和运行多个 Docker 容器的应用，前身是开源项目 Fig。</p>
<p>我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。<code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件来定义一组相关联的应用容器为一个项目。</p>
<p><code>Compose</code> 中有两个重要的概念：</p>
<ul>
<li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>
<li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li>
</ul>
<p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>
<p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p>
<h3 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><p>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>bash命令补全</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -L https://raw.githubusercontent.com/docker/compose/1.25.5/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span></span><br></pre></td></tr></table></figure>
<p>卸载：如果是二进制包方式安装的，删除二进制文件即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br></pre></td></tr></table></figure>
<p>测试安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose --version</span></span><br></pre></td></tr></table></figure>
<h3 id="docker-compose使用"><a href="#docker-compose使用" class="headerlink" title="docker compose使用"></a>docker compose使用</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.相关概念</span></span><br><span class="line"><span class="bullet">-</span> 服务 (service)：一个应用容器，实际上可以运行多个相同镜像的实例。</span><br><span class="line"><span class="bullet">-</span> 项目 (project)：由一组关联的应用容器组成的一个完整业务单元。一个项目可以由多个服务（容器）关联而成，Compose 面向项目进行管理。</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.场景</span></span><br><span class="line">最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。</span><br><span class="line"><span class="bullet">-</span> springboot应用</span><br><span class="line"><span class="bullet">-</span> mysql服务</span><br><span class="line"><span class="bullet">-</span> redis服务  </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.docker-compose模板</span></span><br><span class="line"><span class="bullet">-</span> 参考文档:https://docker<span class="emphasis">_practice.gitee.io/zh-cn/compose/compose_</span>file.html</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysqldb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.32</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql-compose</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3307:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/conf:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/logs:/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:4.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-compose</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/redis/data:/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.通过docker-compose运行一组容器</span></span><br><span class="line"><span class="bullet">-</span> 参考文档:https://docker<span class="emphasis">_practice.gitee.io/zh-cn/compose/commands.html</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up    	//前台启动一组服务</span><br><span class="line">docker-compose up -d 	//后台启动一组服务</span><br><span class="line">docker-compose down     //停止容器的运行</span><br></pre></td></tr></table></figure>
<h3 id="docker-compose-模板文件"><a href="#docker-compose-模板文件" class="headerlink" title="docker-compose 模板文件"></a>docker-compose 模板文件</h3><p>模板文件是使用 <code>Compose</code> 的核心，默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">examples/web</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/data&quot;</span></span><br></pre></td></tr></table></figure>
<p>注意每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</p>
<p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</p>
<p>下面分别介绍各个指令的用法。</p>
<h4 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h4><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure>
<p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p>
<p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p>
<p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="command"><a href="#command" class="headerlink" title="command"></a><code>command</code></h4><p>覆盖容器启动后默认执行的命令。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a><code>container_name</code></h4><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p>
</blockquote>
<h4 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a><code>depends_on</code></h4><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p>
</blockquote>
<h4 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a><code>env_file</code></h4><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p>
<p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p>
<p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env_file: .env</span><br><span class="line"></span><br><span class="line">env_file:</span><br><span class="line">  - ./common.env</span><br><span class="line">  - ./apps/web.env</span><br><span class="line">  - /opt/secrets.env</span><br></pre></td></tr></table></figure>
<p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># common.env: Set development environment</span></span><br><span class="line">PROG_ENV=development</span><br></pre></td></tr></table></figure>
<h4 id="environment"><a href="#environment" class="headerlink" title="environment"></a><code>environment</code></h4><p>设置环境变量。你可以使用数组或字典两种格式。</p>
<p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure>
<p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href="https://yaml.org/type/bool.html">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">y|Y|yes|Yes|YES|n|N|no|No|NO|<span class="literal">true</span>|True|TRUE|<span class="literal">false</span>|False|FALSE|on|On|ON|off|Off|OFF</span><br></pre></td></tr></table></figure>
<h4 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a><code>healthcheck</code></h4><p>通过命令检查容器是否健康运行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line">  <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h4 id="image"><a href="#image" class="headerlink" title="image"></a><code>image</code></h4><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">orchardup/postgresql</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span></span><br></pre></td></tr></table></figure>
<h4 id="networks"><a href="#networks" class="headerlink" title="networks"></a><code>networks</code></h4><p>配置容器连接的网络。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">some-network</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">some-network:</span></span><br><span class="line">  <span class="attr">other-network:</span></span><br></pre></td></tr></table></figure>
<h4 id="ports"><a href="#ports" class="headerlink" title="ports"></a><code>ports</code></h4><p>暴露端口信息。</p>
<p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br></pre></td></tr></table></figure>
<p>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</p>
<h4 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><code>sysctls</code></h4><p>配置容器内核参数。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="attr">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">  <span class="attr">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.ipv4.tcp_syncookies=0</span></span><br></pre></td></tr></table></figure>
<h4 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a><code>ulimits</code></h4><p>指定容器的 ulimits 限制值。</p>
<p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line">  <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">  <span class="attr">nofile:</span></span><br><span class="line">    <span class="attr">soft:</span> <span class="number">20000</span></span><br><span class="line">    <span class="attr">hard:</span> <span class="number">40000</span></span><br></pre></td></tr></table></figure>
<h4 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a><code>volumes</code></h4><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p>
<p>该指令中路径支持相对路径。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure>
<p>如果路径为数据卷名称，必须在文件中配置数据卷。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br></pre></td></tr></table></figure>
<h3 id="docker-compose-常用命令"><a href="#docker-compose-常用命令" class="headerlink" title="docker-compose 常用命令"></a>docker-compose 常用命令</h3><h4 id="1-命令对象与格式"><a href="#1-命令对象与格式" class="headerlink" title="1. 命令对象与格式"></a>1. 命令对象与格式</h4><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>
<p> <code>docker-compose [COMMAND] --help</code> 或 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p>
<p><code>docker-compose</code> 命令的基本的使用格式是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure>
<h4 id="2-命令选项"><a href="#2-命令选项" class="headerlink" title="2. 命令选项"></a>2. 命令选项</h4><ul>
<li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li>
<li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li>
<li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li>
<li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 <code>bridge</code></li>
<li><code>--verbose</code> 输出更多调试信息。</li>
<li><code>-v, --version</code> 打印版本并退出。</li>
</ul>
<h4 id="3-命令使用说明"><a href="#3-命令使用说明" class="headerlink" title="3.命令使用说明"></a>3.命令使用说明</h4><h5 id="up"><a href="#up" class="headerlink" title="up"></a><code>up</code></h5><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p>
<ul>
<li><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p>
</li>
<li><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p>
</li>
<li><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>
</li>
<li><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p>
</li>
<li><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p>
</li>
<li><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>
</li>
<li><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</p>
</li>
</ul>
<hr>
<h5 id="down"><a href="#down" class="headerlink" title="down"></a><code>down</code></h5><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p>
<hr>
<h5 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h5><p>进入指定的容器。</p>
<hr>
<h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h5><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p>
<p>列出项目中目前的所有容器。</p>
<p>选项：</p>
<ul>
<li><code>-q</code> 只打印容器的 ID 信息。</li>
</ul>
<hr>
<h5 id="restart"><a href="#restart" class="headerlink" title="restart"></a><code>restart</code></h5><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p>
<p>重启项目中的服务。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li>
</ul>
<hr>
<h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h5><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p>
<p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p>
<p>选项：</p>
<ul>
<li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li>
<li><code>-v</code> 删除容器所挂载的数据卷。</li>
</ul>
<hr>
<h5 id="start"><a href="#start" class="headerlink" title="start"></a><code>start</code></h5><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p>
<p>启动已经存在的服务容器。</p>
<hr>
<h5 id="stop"><a href="#stop" class="headerlink" title="stop"></a><code>stop</code></h5><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p>
<p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>
</ul>
<hr>
<h5 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h5><p>查看各个服务容器内运行的进程。</p>
<hr>
<h5 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a><code>unpause</code></h5><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p>
<p>恢复处于暂停状态中的服务。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb基础</title>
    <url>/2021/01/18/JavaWeb%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="JavaWeb基础"><a href="#JavaWeb基础" class="headerlink" title="JavaWeb基础"></a>JavaWeb基础</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tomcat目录：</span></span><br><span class="line">bin：存放各个平台下启动和停止 Tomcat 服务的脚本⽂件。</span><br><span class="line">conf：存放 Tomcat 服务器的配置⽂件。</span><br><span class="line">lib：存放 Tomcat 服务器所需要的 jar。</span><br><span class="line">logs：存放 Tomcat 服务运⾏的⽇志。</span><br><span class="line">temp：Tomcat 运⾏时的临时⽂件。</span><br><span class="line">webapps：存放允许客户端访问的资源（Java 程序）。</span><br><span class="line">work：存放 Tomcat 将 JSP 转换之后的 Servlet ⽂件。 </span><br></pre></td></tr></table></figure>


<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet 是 JavaWeb 开发的基石，与平台无关的服务器组件，运行在 Servlet 容器 / Web 应用服务器 / Tomcat，负责与客户端进行通信。 主要功能：(1) 创建并返回基于客户请求的动态 HTML。 (2) 与数据库通信。</p>
<p>Servlet 是⼀组接口，定义⼀个类并实现 Servlet 接口，该类就具备了接受客户端请求以及做出响应的功能。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>			</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">	    <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器不能直接访问 Servlet ⽂件，只能通过映射的方式来间接访问 ，映射有两种配置方式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--xml配置方式--&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注解配置，此种方式配置需要修改web.xml  metadata-complete=&quot;false&quot;</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span></span><br><span class="line"><span class="comment">//servlet名称，若不指定，则为Servlet的完整类名</span></span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"><span class="comment">//路径映射,配置多个，需要/开头</span></span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//路径映射,支持配置多个，需要/开头</span></span><br><span class="line">String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//标记容器是否在启动应用时就加载Servlet，默认或数值为负数时表示第一次请求Servlet时再加载；</span></span><br><span class="line"><span class="comment">//0或正数表示启动应用就加载</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"><span class="comment">//配置初始参数</span></span><br><span class="line">WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//是否支持异步操作模式</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br></pre></td></tr></table></figure>


<h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、当浏览器访问 Servlet 的时候，Tomcat 会查询当前 Servlet 的实例化对象是否存在，如果不存在，则通过反射机制动态创建对象，如果存在，直接执行第 <span class="number">3</span> 步。</span><br><span class="line"><span class="number">2</span>、调⽤ init ⽅法完成初始化操作。</span><br><span class="line"><span class="number">3</span>、调⽤ service ⽅法完成业务逻辑操作。</span><br><span class="line"><span class="number">4</span>、关闭 Tomcat 时，会调⽤ destory ⽅法，释放当前对象所占⽤的资源。</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Servlet 的⽣命周期⽅法：⽆参构造函数、init、service、destory</span><br><span class="line"><span class="number">1</span>、⽆参构造函数只调⽤⼀次，创建对象。</span><br><span class="line"><span class="number">2</span>、init 只调⽤⼀次，初始化对象。</span><br><span class="line"><span class="number">3</span>、service 调⽤ N 次，执⾏业务⽅法。</span><br><span class="line"><span class="number">4</span>、destory 只调⽤⼀次，卸载对象。</span><br></pre></td></tr></table></figure>


<h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该接⼝是⽤来描述 Servlet 的基本信息的。</span></span><br><span class="line">getServletName()  <span class="comment">//返回 Servlet 的名称，全类名(带着包名的类名)</span></span><br><span class="line">getInitParameter(String key)  <span class="comment">//获取 init 参数的值（web.xml）</span></span><br><span class="line">getInitParameterNames()  <span class="comment">//返回所有的 initParamter 的 name 值，⼀般⽤作遍历初始化参数</span></span><br><span class="line">getServletContext()  <span class="comment">//返回 ServletContext 对象，它是 Servlet 的上下⽂，整个 Servlet 的管理者。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servlet.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">       <span class="comment">// xml中配置的servlet-name</span></span><br><span class="line">       String servletName = config.getServletName();</span><br><span class="line">       System.out.println(<span class="string">&quot;servletName: &quot;</span> + servletName);</span><br><span class="line">	<span class="comment">// xml中配置的name</span></span><br><span class="line">       System.out.println(config.getInitParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">	<span class="comment">// xml中配置的多个参数</span></span><br><span class="line">       Enumeration&lt;String&gt; names = config.getInitParameterNames();</span><br><span class="line">       <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">           String key = names.nextElement();</span><br><span class="line">           String val = config.getInitParameter(key);</span><br><span class="line">           System.out.println(<span class="string">&quot;key:&quot;</span> + key + <span class="string">&quot;--&quot;</span> + <span class="string">&quot;val:&quot;</span> + val);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// servlet上下文，整个servlet管理者</span></span><br><span class="line">       ServletContext context = config.getServletContext();</span><br><span class="line">       System.out.println(context.getContextPath());</span><br><span class="line">       System.out.println(context.getServerInfo());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<h2 id="ServletConfig-和-ServletContext"><a href="#ServletConfig-和-ServletContext" class="headerlink" title="ServletConfig 和 ServletContext"></a>ServletConfig 和 ServletContext</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletConfig 作⽤于某个 Servlet 实例，每个 Servlet 都有对应的 ServletConfig，是⼀个是局部对象。</span><br><span class="line"></span><br><span class="line">ServletContext 作⽤于整个 Web 应⽤，⼀个 Web 应⽤对应⼀个 ServletContext，多个 Servlet 实例对应⼀个ServletContext。是一个全局对象，应用程序启动时创建，应用程序关闭时销毁。</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;url&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;www.bd.com&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取方法：</span></span><br><span class="line">ServletContext servletContext = req.getServletContext();</span><br><span class="line">String url = servletContext.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">System.out.println(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改/添加方法：数据存储形式类似于一个Map</span></span><br><span class="line">servletContext.setAttribute(<span class="string">&quot;appInfo&quot;</span>,<span class="string">&quot;www.bd.com&quot;</span>);</span><br><span class="line">String appInfo = (String)servletContext.getAttribute(<span class="string">&quot;appInfo&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;TestServlet appInfo=&quot;</span> + appInfo);</span><br></pre></td></tr></table></figure>


<h2 id="Servlet-的层次结构"><a href="#Servlet-的层次结构" class="headerlink" title="Servlet 的层次结构"></a>Servlet 的层次结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Servlet  ---&gt; GenericServlet  ---&gt; HttpServlet</span><br><span class="line"></span><br><span class="line">GenericServlet 实现 Servlet 接⼝，同时为它的⼦类屏蔽了不常⽤的⽅法，⼦类只需要重写 service ⽅法即可。</span><br><span class="line">HttpServlet 继承 GenericServlet，根据请求进⾏分发处理，GET 进⼊ doGET ⽅法，POST 进⼊doPOST ⽅法。</span><br><span class="line">开发者⾃定义的 Servlet 类只需要继承 HttpServlet 即可，重写 doGET 和 doPOST。</span><br></pre></td></tr></table></figure>


<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSP 本质上就是⼀个 Servlet，主要负责与⽤户交互，呈现界⾯，是HTML + JS + CSS + Java 的混合⽂件。</span><br><span class="line"></span><br><span class="line">当服务器接收到⼀个后缀是 jsp 的请求时，将该请求交给 JSP 引擎去处理，每⼀个 JSP ⻚⾯第⼀次被访问的时候，JSP 引擎会将它翻译成⼀个 Servlet ⽂件，再由 Web 容器调⽤ Servlet 完成响应。</span><br><span class="line"></span><br><span class="line">单纯从开发的⻆度看，JSP 就是在 HTML 中嵌⼊ Java 程序。具体的嵌⼊⽅式有 <span class="number">3</span> 种：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、JSP 脚本，执⾏ Java 逻辑代码</span><br><span class="line">&lt;% Java代码 %&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、JSP 声明：定义 Java ⽅法</span><br><span class="line">&lt;%! 声明 Java ⽅法 %&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、JSP 表达式：把 Java 对象直接输出到 HTML ⻚⾯中</span><br><span class="line">&lt;%= Java变量 %&gt;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">&lt;%! <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;HelloWorld&quot;</span>; &#125; %&gt;</span><br><span class="line">&lt;% String str = test(); %&gt;</span><br><span class="line">&lt;%=str%&gt;</span><br></pre></td></tr></table></figure>
<p><strong>内置对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、request：表示⼀次请求，HttpServletRequest。 </span><br><span class="line"><span class="number">2</span>、response：表示⼀次响应，HttpServletResponse。 </span><br><span class="line"><span class="number">3</span>、pageContext：⻚⾯上下⽂，获取⻚⾯信息，PageContext。 </span><br><span class="line"><span class="number">4</span>、session：表示⼀次会话，保存⽤户信息，HttpSession。</span><br><span class="line"><span class="number">5</span>、application：表示当前 Web 应⽤，全局对象，保存所有⽤户共享信息，ServletContext。 </span><br><span class="line"><span class="number">6</span>、config：当前 JSP 对应的 Servlet 的 ServletConfig 对象，获取当前 Servlet 的信息。</span><br><span class="line"><span class="number">7</span>、out：向浏览器输出数据，JspWriter。 </span><br><span class="line"><span class="number">8</span>、page：当前 JSP 对应的 Servlet 对象，Servlet。 </span><br><span class="line"><span class="number">9</span>、exception：表示 JSP ⻚⾯发⽣的异常，Exception。</span><br><span class="line">常⽤的是 request、response、session、application</span><br></pre></td></tr></table></figure>


<h2 id="转发与重定向"><a href="#转发与重定向" class="headerlink" title="转发与重定向"></a>转发与重定向</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">response   <span class="title">sendRedirect</span><span class="params">(String path)</span>  重定向。</span></span><br><span class="line"><span class="function">request    <span class="title">getRequestDispatcher</span><span class="params">(String path)</span>  请求转发。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">区别：</span></span><br><span class="line"><span class="function">转发是将同⼀个请求传给下⼀个页面，重定向是创建⼀个新的请求传给下⼀个页面，之前的请求结束生命周期。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">转发：同⼀个请求在服务器之间传递，地址栏不变，也叫服务器跳转, 可以用来访问WEB-INF下的文件。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">重定向：由客户端发送⼀次新的请求来访问跳转后的⽬标资源，地址栏改变，也叫客户端跳转。如果没有加 http 开头，则认为是当前应用里面的servlet重定向，默认加上应用上下文；如果有加http则会使用配置的全路径进行跳转。可用于跳转第三方地址或者应用里面的其他Servelt、jsp等。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">如果两个⻚⾯之间需要通过 request 来传值，则必须使⽤转发，不能使⽤重定向。例如⽤户登录，如果⽤户名和密码正确，则跳转到⾸⻚（转发），并且展示⽤户名，否则重新回到登录⻚⾯（重定向）。</span></span><br></pre></td></tr></table></figure>


<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">背景：HTTP协议为无状态协议，即同一个用户发出多个请求时，服务器是没有办法确定用户和请求的关系。因此需要在用户第一次请求后给用户分配一个唯一标识的ID, 用户之后的每次请求都会带上这个ID, 方便服务器进行识别。</span><br><span class="line"></span><br><span class="line">会话：就是客户端和服务器之间发⽣的⼀系列连续的请求和响应的过程，打开浏览器进⾏操作到关闭浏览器的过程。</span><br><span class="line"></span><br><span class="line">实现会话有两种⽅式：session 和 cookie</span><br></pre></td></tr></table></figure>
<p>属于同⼀次会话的请求都有⼀个相同的标识符，sessionID</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session 常⽤⽅法：</span><br><span class="line"><span class="function">String <span class="title">getId</span><span class="params">()</span>  获取 sessionID</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMaxInactiveInterval</span><span class="params">(<span class="keyword">int</span> interval)</span>  设置 session 的失效时间，单位为秒</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxInactiveInterval</span><span class="params">()</span>  获取当前 session 的失效时间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span>  设置 session ⽴即失效</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String key,Object value)</span>  通过键值对的形式来存储数据</span></span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String key)</span>  通过键获取对应的数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String key)</span>  通过键删除对应的数据</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// session例子</span></span><br><span class="line">&lt;form action=<span class="string">&quot;/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">    提交：&lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String name = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String passwd = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/welcome.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务器会为每一个会话在内存中创建Session对象，用以维护每个会话的数据信息，和cookie一样，都有有效期限，修改方法只能是Web.xml内配置，因此每个Session的失效时间一致(根据没有再次操作的时间而定）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 是服务端在 HTTP 响应中附带传给浏览器的⼀个⼩⽂本⽂件，⼀旦浏览器保存了某个 Cookie，在之后的请求和响应过程中，会将此 Cookie 来回传递，这样就可以通过 Cookie 这个载体完成客户端和服务端的数据交互。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置cookie</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;xdk&quot;</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line"><span class="comment">// 读取cookie</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">    out.write(c.getName() + <span class="string">&quot;:&quot;</span> + c.getValue() + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Webstorm-a2712ae8:0506f447-9cd4-4f79-<span class="number">9582</span>-788ab94be447</span><br><span class="line">Webstorm-44113bc2:<span class="number">55203481</span>-22c1-47c1-a41c-b7097d77da6a</span><br><span class="line">Idea-cfa6297b:5a0327c9-3f31-43d0-9a69-75394f25a2e4</span><br><span class="line">JSESSIONID:D947B13E550B7C0336A8E735DDA3B6A1</span><br><span class="line">name:xdk</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie 常⽤的⽅法</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMaxAge</span><span class="params">(<span class="keyword">int</span> age)</span>  <span class="comment">//设置 Cookie 的有效时间，单位为秒</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxAge</span><span class="params">()</span>  <span class="comment">//获取 Cookie 的有效时间</span></span></span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span>  <span class="comment">//获取 Cookie 的 name</span></span></span><br><span class="line"><span class="function">String <span class="title">getValue</span><span class="params">()</span>  <span class="comment">//获取 Cookie 的 value</span></span></span><br></pre></td></tr></table></figure>


<h2 id="Session-和-Cookie-的区别"><a href="#Session-和-Cookie-的区别" class="headerlink" title="Session 和 Cookie 的区别"></a>Session 和 Cookie 的区别</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session：保存在服务器  保存的数据是 Object  会随着会话的结束⽽销毁              保存重要信息</span><br><span class="line">cookie： 保存在浏览器  保存的数据是 String  可以⻓期保存在浏览器中，与会话⽆关   保存不重要信息</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session 存储信息：</span><br><span class="line">setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;admin&quot;</span>)  <span class="comment">//存    </span></span><br><span class="line">getAttribute(<span class="string">&quot;name&quot;</span>)  <span class="comment">//取</span></span><br><span class="line"></span><br><span class="line">session⽣命周期：</span><br><span class="line">服务端：只要 WEB 应⽤重启就销毁，客户端：只要浏览器关闭就销毁。</span><br><span class="line"></span><br><span class="line">session退出登录：session.invalidate()</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cookie 存储信息：</span><br><span class="line">response.addCookie(<span class="keyword">new</span> Cookie(name,<span class="string">&quot;admin&quot;</span>)) <span class="comment">//存</span></span><br><span class="line"></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">for</span> (Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;name&quot;</span>))&#123;</span><br><span class="line">       out.write(<span class="string">&quot;欢迎回来&quot;</span>+cookie.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//取</span></span><br><span class="line"></span><br><span class="line">cookie⽣命周期：</span><br><span class="line">不随服务端的重启⽽销毁，客户端：默认是只要关闭浏览器就销毁，我们通过 setMaxAge()⽅法设置有效期，⼀旦设置了有效期，则不随浏览器的关闭⽽销毁，⽽是由设置的时间来决定。</span><br><span class="line"></span><br><span class="line">cookie 退出登录：setMaxAge(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Cookie 和 Session 一定是结合起来使用。用户第一次请求时，服务器会创建一个SessionId并返回给用户，用户之后的请求都会带上这个SessionId，并且会在内存里分配Session对象，当用户再次请求时，服务器会根据SessionId获取对应的Session数据。SessionId会有httponly的属性，不可JS获取。Cookie保存在浏览器，Session保存在服务器，Session依赖于Cookie。</p>
</blockquote>
<h2 id="JSP-内置对象作用域"><a href="#JSP-内置对象作用域" class="headerlink" title="JSP 内置对象作用域"></a>JSP 内置对象作用域</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">page、request、session、application</span><br><span class="line"></span><br><span class="line">page 作⽤域：对应的内置对象是 pageContext。</span><br><span class="line">request 作⽤域：对应的内置对象是 request。</span><br><span class="line">session 作⽤域：对应的内置对象是 session。</span><br><span class="line">application 作⽤域：对应的内置对象是 application。</span><br><span class="line"></span><br><span class="line">page  &lt;  request  &lt;  session  &lt;  application</span><br><span class="line"></span><br><span class="line">page 只在当前页面有效。</span><br><span class="line">request 在⼀次请求内有效。</span><br><span class="line">session 在⼀次会话内有效。</span><br><span class="line">application 对应整个 WEB 应⽤的。</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"> Integer count = (Integer) application.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"> <span class="keyword">if</span>(count == <span class="keyword">null</span>)&#123;</span><br><span class="line"> 	count = <span class="number">1</span>;</span><br><span class="line"> 	application.setAttribute(<span class="string">&quot;count&quot;</span>,count);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> 	count++;</span><br><span class="line"> 	application.setAttribute(<span class="string">&quot;count&quot;</span>,count);</span><br><span class="line"> &#125;</span><br><span class="line">%&gt;</span><br><span class="line">您是当前的第&lt;%=count%&gt;位访客</span><br></pre></td></tr></table></figure>


<h2 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">便捷地取出域对象（pageContext、request、session、application）中保存的数据。</span><br><span class="line">$&#123;变量名&#125; 变量名就是 setAttribute 对应的 key 值。</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、默认查找顺序：</span><br><span class="line">按照上述的顺序进⾏查找，找到⽴即返回，在 application 中也⽆法找到，则返回 <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、指定作⽤域进⾏查找</span><br><span class="line">pageContext：$&#123;pageScope.name&#125;</span><br><span class="line">request：$&#123;requestScope.name&#125;</span><br><span class="line">session：$&#123;sessionScope.name&#125;</span><br><span class="line">application：$&#123;applicationScope.name&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">数据级联：$&#123;user.name&#125;</span><br><span class="line"></span><br><span class="line">EL 执⾏表达式:</span><br><span class="line">$&#123;num1 &amp;&amp; num2&#125;   &amp;&amp;   ||   !   &lt;   &gt;   &lt;=   &lt;=   ==   </span><br><span class="line">&amp;&amp; and    || or   ! not   == eq   != ne</span><br><span class="line">&lt; lt    &gt; gt     &lt;= le    &gt;= ge</span><br><span class="line">empty 变量为 <span class="keyword">null</span>，长度为<span class="number">0</span>的String，size为<span class="number">0</span>的集合</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="keyword">true</span>--&gt;</span><br><span class="line">&lt;h3&gt;$&#123;10 &gt; 9&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="keyword">false</span>--&gt;</span><br><span class="line">&lt;h3&gt;$&#123;&quot;1000&quot; &gt; &quot;9&quot;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="keyword">false</span>--&gt;</span><br><span class="line">&lt;h3&gt;$&#123;&quot;1&quot; &gt; &quot;2&quot;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure>


<h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><p>常⽤标签： set、out、remove、catch</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入依赖 --&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>set：向域对象中添加数据</p>
<p>out：输出域对象中的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;c:set var=&quot;name&quot; value=&quot;tom&quot;&gt;&lt;/c:set&gt; </span><br><span class="line">&lt;c:out value=&quot;$&#123;name&#125;&quot; default=&quot;未定义&quot;&gt;&lt;/c:out&gt;</span><br></pre></td></tr></table></figure>
<p>remove：删除域对象中的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;c:remove var=&quot;name&quot; scope=&quot;page&quot;&gt;&lt;/c:remove&gt; </span><br><span class="line">&lt;c:out value=&quot;$&#123;name&#125;&quot; default=&quot;未定义&quot;&gt;&lt;/c:out&gt;</span><br></pre></td></tr></table></figure>
<p>catch：捕获异常</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;c:catch var=&quot;error&quot;&gt;</span><br><span class="line"> 	&lt;% int a = 10/0; %&gt;</span><br><span class="line">&lt;/c:catch&gt;</span><br><span class="line">$&#123;error&#125;</span><br></pre></td></tr></table></figure>
<p>条件标签：if choose</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;c:set var=&quot;num1&quot; value=&quot;1&quot;&gt;&lt;/c:set&gt; &lt;c:set var=&quot;num2&quot; value=&quot;2&quot;&gt;&lt;/c:set&gt; </span><br><span class="line">&lt;c:if test=&quot;$&#123;num1&gt;num2&#125;&quot;&gt;ok&lt;/c:if&gt; </span><br><span class="line">&lt;c:if test=&quot;$&#123;num1&lt;num2&#125;&quot;&gt;fail&lt;/c:if&gt; <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line"> &lt;c:when test=&quot;$&#123;num1 &gt; num2&#125;&quot;&gt;ok&lt;/c:when&gt;</span><br><span class="line"> &lt;c:otherwise&gt;fail&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>
<p>迭代标签：forEach</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=&quot;$&#123;list&#125;&quot; var=&quot;str&quot; begin=&quot;2&quot; end=&quot;3&quot; step=&quot;2&quot; varStatus=&quot;sta&quot;&gt;</span><br><span class="line"> $&#123;sta.count&#125;、$&#123;str&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
<p>格式化标签库常⽤的标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;% request.setAttribute(&quot;date&quot;,new Date()); %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">fmt:formatDate</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;date&#125;&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">fmt:formatDate</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fmt:formatNumber</span> <span class="attr">value</span>=<span class="string">&quot;2145.234&quot;</span> <span class="attr">maxIntegerDigits</span>=<span class="string">&quot;2&quot;</span> <span class="attr">maxFractionDigits</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">fmt:formatNumber</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>函数标签库常⽤的标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;% request.setAttribute(&quot;info&quot;,&quot;Java,C&quot;); %&gt;</span><br><span class="line">$&#123;fn:contains(info,&quot;Python&quot;)&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">$&#123;fn:startsWith(info, &quot;Java&quot;)&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">$&#123;fn:endsWith(info, &quot;C&quot;)&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">$&#123;fn:indexOf(info, &quot;va&quot;)&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">$&#123;fn:replace(info, &quot;C&quot;,&quot;Python&quot;)&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">$&#123;fn:substring(info, 2, 3)&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">$&#123;fn:split(info, &quot;,&quot;)[0]&#125;-$&#123;fn:split(info, &quot;,&quot;)[1]&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">动态地拦截请求和响应，变换或使用包含在请求或响应中的信息</span><br><span class="line">在客户端的请求访问后端资源之前，拦截这些请求</span><br><span class="line">在服务器的响应发送回客户端之前，处理这些响应</span><br></pre></td></tr></table></figure>
<p>开发者只需要自定义⼀个类并且实现Filter接⼝即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                         ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xml配置方式 --&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注解配置</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/test&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该Filter是否支持异步操作模式</span></span><br><span class="line">asyncSupported      </span><br><span class="line"><span class="comment">// 指定Filter对那种dispatcher模式进行过滤 该属性支持 Async,Error Forward,include,request  </span></span><br><span class="line">dispatcherType  </span><br><span class="line"><span class="comment">// Filter 显示的名称</span></span><br><span class="line">displayName    </span><br><span class="line"><span class="comment">// Filter的名称</span></span><br><span class="line">filterName    </span><br><span class="line"><span class="comment">// Filter的配置参数</span></span><br><span class="line">initParams    </span><br><span class="line"><span class="comment">// 过滤的Servlet可以指定多个,表示对这几个特定的的servlet 进行过滤</span></span><br><span class="line">servletNames    </span><br><span class="line"><span class="comment">// 指定 Filter拦截的 URL，和上面的servletNames配置一样，用*可以表示通配符，但是不用字母后加*，应该按照模块划分，比如/user/*</span></span><br><span class="line">urlPatterns/value    </span><br></pre></td></tr></table></figure>
<p><strong>Filter 的生命周期</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">当 Tomcat 启动时，通过反射机制调⽤ Filter 的⽆参构造函数创建实例化对象，同时调⽤ init ⽅法实现初始化，doFilter ⽅法调⽤多次，当 Tomcat 服务关闭的时候，调⽤ destory 来销毁 Filter 对象。</span><br><span class="line"></span><br><span class="line">⽆参构造函数：只调⽤⼀次，当 Tomcat 启动时调⽤（Filter ⼀定要进⾏配置）</span><br><span class="line">init ⽅法：只调⽤⼀次，当 Filter 的实例化对象创建完成之后调⽤</span><br><span class="line">doFilter：调⽤多次，访问 Filter 的业务逻辑都写在 Filter 中</span><br><span class="line">destory：只调⽤⼀次，Tomcat 关闭时调⽤。</span><br><span class="line"></span><br><span class="line">同时配置多个 Filter，Filter 的调⽤顺序是由 web.xml 中的配置顺序来决定的，写在上⾯的配置先调⽤，因为 web.xml 是从上到下顺序读取的。</span><br></pre></td></tr></table></figure>


<h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><p>JavaWeb里面的监听器：ServletContextListener,  HttpSessionListener,  ServletRequestListener。</p>
<p>实现步骤：创建Java类 → 继承监听接口 → 实现监听方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前在线人数：&lt;%= session.getServletContext().getAttribute(&quot;count&quot;)%&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext servletContext = se.getSession().getServletContext();</span><br><span class="line">        Integer count = (Integer)servletContext.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == count) &#123;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext servletContext = se.getSession().getServletContext();</span><br><span class="line">        Integer count = (Integer)servletContext.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == count) &#123;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/upload&quot;)</span></span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取文件名称</span></span><br><span class="line">        Part part = req.getPart(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">        String header = part.getHeader(<span class="string">&quot;content-disposition&quot;</span>);</span><br><span class="line">        String filename = header.substring(header.indexOf(<span class="string">&quot;filename=&quot;</span>) + <span class="number">10</span>, header.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取路径  E:\IDEAWorkSpace\javaweb-filter\target\javaweb-filter-1.0-SNAPSHOT\file</span></span><br><span class="line">        String dirPath = req.getServletContext().getRealPath(<span class="string">&quot;/file&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文件夹</span></span><br><span class="line">        File dirFile = <span class="keyword">new</span> File(dirPath);</span><br><span class="line">        <span class="keyword">if</span> (!dirFile.exists()) &#123;</span><br><span class="line">            dirFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为文件重新设置文件名</span></span><br><span class="line">        String finalName = UUID.randomUUID().toString() + filename;</span><br><span class="line">        <span class="comment">//创建文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(dirFile, finalName);</span><br><span class="line">        <span class="comment">//流操作</span></span><br><span class="line">        InputStream inputStream = part.getInputStream();</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(temp)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(temp, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/file/&quot;</span> + finalName).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/download&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/x-msdownload&quot;</span>);</span><br><span class="line">        String file = <span class="string">&quot;3.jpg&quot;</span>;</span><br><span class="line">        String path = req.getServletContext().getRealPath(<span class="string">&quot;/file/&quot;</span>);</span><br><span class="line">        String filePath = path + file;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment; filename=&quot;</span> + file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果文件名不包含中文可以不设置该项</span></span><br><span class="line">        <span class="comment">//如果包含中文名，则需要设置编码，否则文件名下载后中文字符会乱码</span></span><br><span class="line">        <span class="comment">//getBytes指定了编码的方式，ISO-8859-1指定了解码（读取）的方式,想要转换编码，就是先编码，再解码</span></span><br><span class="line">        <span class="comment">//response.setHeader(&quot;Content-Disposition&quot;,&quot;attachment; filename=&quot; + new String(file.getBytes(&quot;gb2312&quot;),&quot;ISO-8859-1&quot;));</span></span><br><span class="line"></span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(buf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>Asynchronous JavaScript And XML：异步的 JavaScript 和 XML 。Ajax指异步加载，客户端和服务器的数据交互更新在局部页面的技术（局部刷新）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;h2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url: <span class="string">&quot;/test&quot;</span>,</span></span><br><span class="line"><span class="javascript">                type: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                dataType: <span class="string">&quot;text&quot;</span>,</span></span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#h2&quot;</span>).html(data)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Servlet 不能跳转到 JSP，只能将数据返回。</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        resp.getWriter().write(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">语法：$.ajax(&#123;属性&#125;)</span><br><span class="line"></span><br><span class="line">常⽤的属性参数：</span><br><span class="line">url：请求的后端服务地址</span><br><span class="line">type：请求方式，默认 get</span><br><span class="line">data：请求参数</span><br><span class="line">dataType：服务器返回的数据类型，text/json</span><br><span class="line">success：请求成功的回调函数</span><br><span class="line">error：请求失败的回调函数</span><br><span class="line">complete：请求完成的回调函数（无论成功或者失败，都会调用）</span><br></pre></td></tr></table></figure>


<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JavaScript Object Notation，⼀种轻量级数据交互格式，完成 js 与 Java 等后端开发语⾔对象数据之间的转换客户端和服务器之间传递对象数据，需要⽤ JSON 格式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line">        String json = <span class="keyword">new</span> ObjectMapper().writeValueAsString(user);</span><br><span class="line">        resp.getWriter().write(json);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url: <span class="string">&quot;/json&quot;</span>,</span></span><br><span class="line"><span class="javascript">                type: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                dataType: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(data)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">结果：&#123;id: 1, name: &quot;aa&quot;, address: &quot;bb&quot;&#125;</span><br></pre></td></tr></table></figure>


<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JDBC 的使用</span><br><span class="line"><span class="number">1</span>、加载数据库驱动，Java 程序和数据库之间的桥梁。</span><br><span class="line"><span class="number">2</span>、获取 Connection，Java 程序与数据库的⼀次连接。</span><br><span class="line"><span class="number">3</span>、创建 Statement 对象，由 Connection 产⽣，执⾏ SQL 语句。</span><br><span class="line"><span class="number">4</span>、如果需要接收返回值，创建 ResultSet 对象，保存 Statement 执行之后所查询到的结果。</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">           String url = <span class="string">&quot;jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">           String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">           String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">           Connection con = DriverManager.getConnection(url, username, password);</span><br><span class="line">           <span class="comment">//增 删 改 都与此类似</span></span><br><span class="line">           String sql1 = <span class="string">&quot;insert into book (author,name) values (&#x27;薛之谦&#x27;,&#x27;动物世界&#x27;)&quot;</span>;</span><br><span class="line">           Statement statement = con.createStatement();</span><br><span class="line">           <span class="keyword">int</span> row = statement.executeUpdate(sql1);</span><br><span class="line">           System.out.println(row);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">           throwables.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">String sql1 = <span class="string">&quot;select * from book&quot;</span>;</span><br><span class="line">Statement statement = con.createStatement();</span><br><span class="line">ResultSet resultSet = statement.executeQuery(sql1);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">     Integer id = resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">     String author = resultSet.getString(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">     String name = resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">     System.out.println(id + <span class="string">&quot;-&quot;</span> + author + <span class="string">&quot;-&quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement 的⼦类，提供了 SQL 占位符的功能</span><br><span class="line"></span><br><span class="line">使⽤ Statement 进⾏开发有两个问题：</span><br><span class="line"><span class="number">1</span>、需要频繁拼接 String 字符串，出错率较⾼。</span><br><span class="line"><span class="number">2</span>、存在 SQL 注⼊的⻛险。</span><br><span class="line"></span><br><span class="line">SQL 注⼊：利⽤某些系统没有对⽤户输⼊的信息进⾏充分检测，在⽤户输⼊的数据中注⼊⾮法的 SQL语句，从⽽利⽤系统的 SQL 引擎完成恶意⾏为的做法。</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">           String url = <span class="string">&quot;jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">           String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">           String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">           Connection con = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">           String sql1 = <span class="string">&quot;select * from book where id = ?&quot;</span>;</span><br><span class="line">           PreparedStatement preparedStatement = con.prepareStatement(sql1);</span><br><span class="line">           preparedStatement.setInt(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">           ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">           <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">               Integer id = resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">               String author = resultSet.getString(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">               String name = resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">               System.out.println(id + <span class="string">&quot;-&quot;</span> + author + <span class="string">&quot;-&quot;</span> + name);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">           throwables.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JDBC 开发流程</span><br><span class="line">- 加载驱动（只需要加载⼀次）</span><br><span class="line">- 建⽴数据库连接（Connection）</span><br><span class="line">- 执⾏ SQL 语句（Statement）</span><br><span class="line">- ResultSet 接收结果集（查询）</span><br><span class="line">- 断开连接，释放资源</span><br><span class="line"></span><br><span class="line">数据库连接对象是通过 DriverManager 来获取的，每次获取都需要向数据库申请获取连接，验证⽤户名和密码，执⾏完 SQL 语句后断开连接，这样的⽅式会造成资源的浪费，数据连接资源没有得到很好的重复利⽤。可以使⽤数据库连接池解决这⼀问题。</span><br><span class="line"></span><br><span class="line">数据库连接池的基本思想就是为数据库建⽴⼀个缓冲池，预先向缓冲池中放⼊⼀定数量的连接对象，当需要获取数据库连接的时候，只需要从缓冲池中取出⼀个对象，⽤完之后再放回到缓冲池中，供下⼀次请求使⽤，做到了资源的重复利⽤，允许程序重复使⽤⼀个现有的数据库连接对象，⽽不需要重新创建。当数据库连接池中没有空闲的连接时，新的请求就会进⼊等待队列，等待其他线程释放连接。</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入依赖 --&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">将 C3P0 的配置信息定义在 xml ⽂件中，Java 程序只需要加载配置⽂件即可完成数据库连接池的初始化操作。</span></span><br><span class="line"><span class="comment">1、配置⽂件的名字必须是 c3p0-config.xml</span></span><br><span class="line"><span class="comment">2、初始化 ComboPooledDataSource 时，传⼊的参数必须是 c3p0-config.xml 中 named-config 标签的 name 属性值。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;testc3p0&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 指定连接数据源的基本属性 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/springboot?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;testc3p0&quot;</span>);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         Connection connection = dataSource.getConnection();</span><br><span class="line">         System.out.println(connection);</span><br><span class="line">         connection.close();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<h2 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h2><p>DBUtils 可以帮助开发者完成数据的封装（结果集到 Java 对象的映射）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ResultHandler 接⼝是⽤来处理结果集，可以将查询到的结果集转换成 Java 对象，提供了 4 种实现类。</span></span><br><span class="line"><span class="comment">//BeanHandler 将结果集映射成 Java 对象</span></span><br><span class="line"><span class="comment">//BeanListHandler 将结果集映射成 List 集合 </span></span><br><span class="line"><span class="comment">//MapHandler 将结果集映射成 Map 对象</span></span><br><span class="line"><span class="comment">//MapListHandler 将结果集映射成 Map List 集合</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;testc3p0&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        String sql = <span class="string">&quot;select * from book where id = 1&quot;</span>;</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        Book book = queryRunner.query(connection, sql, <span class="keyword">new</span> BeanHandler&lt;&gt;(Book.class));</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>术语：Start Transaction，End Transaction，Commit Transaction，Rollback Transaction</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;testc3p0&quot;</span>);</span><br><span class="line">       Connection connection = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           connection = dataSource.getConnection();</span><br><span class="line">           <span class="comment">//JDBC中默认事务是自动提交的，false就不会自动提交</span></span><br><span class="line">           connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">           PreparedStatement ps1 = </span><br><span class="line">             connection.prepareStatement(<span class="string">&quot;insert into  book (author, name) values(?,?) &quot;</span>);</span><br><span class="line">           PreparedStatement ps2 = </span><br><span class="line">             connection.prepareStatement(<span class="string">&quot;insert into  book (author, name) values(?,?) &quot;</span>);</span><br><span class="line">         </span><br><span class="line">           ps1.setString(<span class="number">1</span>, <span class="string">&quot;薛之谦&quot;</span>);</span><br><span class="line">           ps1.setString(<span class="number">2</span>, <span class="string">&quot;狐狸&quot;</span>);</span><br><span class="line"></span><br><span class="line">           ps2.setString(<span class="number">1</span>, <span class="string">&quot;薛之谦&quot;</span>);</span><br><span class="line">           ps2.setString(<span class="number">2</span>, <span class="string">&quot;摩天大楼&quot;</span>);</span><br><span class="line">         </span><br><span class="line">           ps1.execute();</span><br><span class="line">           <span class="comment">//模拟异常</span></span><br><span class="line">           <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">           ps2.execute();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               connection.rollback();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">               e1.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               connection.commit();</span><br><span class="line">               connection.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><p><strong>Http请求</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Http请求消息结构:</span><br><span class="line">- 请求行</span><br><span class="line">- 请求方法</span><br><span class="line">- URL地址</span><br><span class="line">- 协议名</span><br><span class="line">- 请求头</span><br><span class="line">- 报文头包含若干个属性 格式为“属性名 : 属性值”，</span><br><span class="line">- 服务端据此获取客户端的基本信息</span><br><span class="line">- 请求体</span><br><span class="line">- 请求的参数，可以是json对象，也可以是前端表单生成的key=value&amp;key=value的字符串</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 请求头</span><br><span class="line">  - 报文头包含若干个属性 格式为“属性名:属性值”，</span><br><span class="line">  - 服务端据此获取客户端的基本信息</span><br><span class="line">  </span><br><span class="line">- 常见的请求头</span><br><span class="line">  - Accept： 览器支持的 MIME 媒体类型, 比如 text/html,application/json,image/webp,/ 等</span><br><span class="line">  - Accept-Encoding: 浏览器发给服务器,声明浏览器支持的编码类型，gzip, deflate</span><br><span class="line">  - Accept-Language: 客户端接受的语言格式,比如 zh-CN</span><br><span class="line">  - Connection: keep-alive , 开启HTTP持久连接</span><br><span class="line">  - Host：服务器的域名</span><br><span class="line">  - Origin：告诉服务器请求从哪里发起的，仅包括协议和域名 CORS跨域请求中可以看到response有对应的header，Access-Control-Allow-Origin</span><br><span class="line">  - Referer：告诉服务器请求的原始资源的URI，其用于所有类型的请求，并且包括：协议+域名+查询参数； 很多抢购服务会用这个做限制，必须通过某个入来进来才有效</span><br><span class="line">  - User-Agent: 服务器通过这个请求头判断用户的软件的应用类型、操作系统、软件开发商以及版本号、浏览器内核信息等； 风控系统、反作弊系统、反爬虫系统等基本会采集这类信息做参考</span><br><span class="line">  - Cookie: 表示服务端给客户端传的http请求状态,也是多个key=value形式组合，比如登录后的令牌等</span><br><span class="line">  - Content-Type： HTTP请求提交的内容类型，一般只有post提交时才需要设置，比如文件上传，表单提交等</span><br></pre></td></tr></table></figure>
<p><strong>Http响应</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Http响应消息结构</span><br><span class="line">- 响应行</span><br><span class="line">- 报文协议及版本、状态码</span><br><span class="line">- 响应头</span><br><span class="line">- 报文头包含若干个属性 格式为“属性名:属性值”</span><br><span class="line">- 响应正文</span><br><span class="line">- 响应报文体，我们需要的内容，多种形式比如html、json、图片、视频文件等</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">响应</span><br><span class="line">- 报文头包含若干个属性 格式为“属性名:属性值”</span><br><span class="line"></span><br><span class="line">常见的响应头</span><br><span class="line">- Allow: 服务器支持哪些请求方法</span><br><span class="line">- Content-Length: 响应体的字节长度</span><br><span class="line">- Content-Type: 响应体的MIME类型</span><br><span class="line">- Content-Encoding: 设置数据使用的编码类型</span><br><span class="line">- Date: 设置消息发送的日期和时间</span><br><span class="line">- Expires: 设置响应体的过期时间,一个GMT时间，表示该缓存的有效时间</span><br><span class="line">- cache-control: Expires的作用一致，都是指明当前资源的有效期, 控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据,优先级高于Expires,控制粒度更细，如max-age=<span class="number">240</span>，即<span class="number">4</span>分钟</span><br><span class="line">- Location：表示客户应当到哪里去获取资源，一般同时设置状态代码为3xx</span><br><span class="line">- Server: 服务器名称</span><br><span class="line">- Transfer-Encoding：chunked 表示输出的内容长度不能确定，静态网页一般没，基本出现在动态网页里面</span><br><span class="line">- Access-Control-Allow-Origin: 定哪些站点可以参与跨站资源共享</span><br></pre></td></tr></table></figure>


<h2 id="Http常见请求-响应头content-type内容类型"><a href="#Http常见请求-响应头content-type内容类型" class="headerlink" title="Http常见请求/响应头content-type内容类型"></a>Http常见请求/响应头content-type内容类型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- Content-type: 用来指定不同格式的请求响应信息，俗称 MIME媒体类型</span><br><span class="line">- 常见的取值</span><br><span class="line">  text/html ：HTML格式</span><br><span class="line">  text/plain ：纯文本格式</span><br><span class="line">  text/xml ： XML格式</span><br><span class="line">  image/gif ：gif图片格式 </span><br><span class="line">  image/jpeg ：jpg图片格式 </span><br><span class="line">  image/png：png图片格式</span><br><span class="line">  application/json：JSON数据格式 </span><br><span class="line">  application/pdf ：pdf格式 </span><br><span class="line">  application/octet-stream ：二进制流数据，一般是文件下载</span><br><span class="line">  application/x-www-form-urlencoded：form表单默认的提交数据的格式，会编码成key=value格式</span><br><span class="line">  multipart/form-data： 表单中需要上传文件的文件格式类型</span><br></pre></td></tr></table></figure>


<h2 id="JavaWeb常见面试题"><a href="#JavaWeb常见面试题" class="headerlink" title="JavaWeb常见面试题"></a>JavaWeb常见面试题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 说下servlet的生命周期</span><br><span class="line">  - 实例化-&gt; 使用构造方法创建对象</span><br><span class="line">  - 初始化-&gt; 执行init方法：Servlet 的生命期中，仅执行一次 init() 方法，它是在服务器装入 Servlet 时执行的,即第一次访问这个Servlet才执行</span><br><span class="line">  - 服务-&gt; 执行service方法，service() 方法是 Servlet 的核心。每当一个客户请求一个HttpServlet 对象，该对象的service() 方法就要被调用</span><br><span class="line">  - 销毁-&gt; 执行destroy方法,destroy() 方法仅执行一次，即在服务器停止且卸装 Servlet 时执行该方法</span><br><span class="line">  </span><br><span class="line">2. forward和redirect的区别</span><br><span class="line">  - 重定向会改变URL地址，请求转发不会改变URL地址</span><br><span class="line">  - 重定向不可以使用多个作用域的内容，请求转发可以</span><br><span class="line">  - 重定向可以用URL访问外部资源，请求转发只能跳转内部资源</span><br><span class="line">  - 重定向会触发多次请求；转发的话只在内部跳转</span><br><span class="line"></span><br><span class="line">3. 说下Cookie和Session的区别和联系</span><br><span class="line">  - cookie数据保存在客户端，session数据保存在服务端</span><br><span class="line">  - cookie不是很安全，容易泄露，因为以明文存储信息</span><br><span class="line">  - Cookie大小和数量存储有限制</span><br><span class="line"></span><br><span class="line">4. 客户端存储除了Cookie，还有什么？</span><br><span class="line">  - localStroage 和 sessionStorage</span><br><span class="line">  - sessionStorage为临时保存，而localStorage为永久保存</span><br></pre></td></tr></table></figure>


<h2 id="JDBC常见面试题"><a href="#JDBC常见面试题" class="headerlink" title="JDBC常见面试题"></a>JDBC常见面试题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 说下JDBC连接数据库的开发步骤</span><br><span class="line">  - 1.加载数据库连接驱动 </span><br><span class="line">  - 2.获取数据连接对象</span><br><span class="line">  - 3.获取语句对象, 会话对象有两种Statement和PreparedStatement </span><br><span class="line">  - 4.执行语句  </span><br><span class="line">  - 5.处理结果集  </span><br><span class="line">  - 6.关闭资源  rs.close()、st.close()、conn.close() 注意关闭顺序以及处理异常 </span><br><span class="line">    </span><br><span class="line">2. JDBC中的Statement 和PreparedStatement的区别</span><br><span class="line">  - PreparedStatement在执行之前会进行预编译</span><br><span class="line">  - 效率高于Statement,且能够有效防止SQL注入</span><br><span class="line">  - PreparedStatement支持?占位符而不是直接拼接，提高可读性</span><br><span class="line">  </span><br><span class="line">3. 数据库连接池工作原理和优点</span><br><span class="line">  - 先创建一定数量的连接对象存放在连接池</span><br><span class="line">  - 需要使用连接对象的时候，从连接池中请求一个空闲的连接</span><br><span class="line">  - 使用完毕之后，并不会把连接关闭，而是还给连接池</span><br><span class="line">  - 优点：系统响应速度加快，资源利用率高</span><br></pre></td></tr></table></figure>


<h2 id="Http常见面试题"><a href="#Http常见面试题" class="headerlink" title="Http常见面试题"></a>Http常见面试题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. http请求 get和post的区别？</span><br><span class="line">  - get是用来从服务器上获取数据，而post是用来向服务器上传递数据</span><br><span class="line">  - get是不安全的，因为在传输过程中，数据被放在请求的URL中，post是放到body里面，对小白用户不可见</span><br><span class="line">  - get传输的数据量小，主要是由于受URL长度的限制；post可以传输大量的数据，一般上传文件只能用post</span><br><span class="line">  </span><br><span class="line">2. 浏览器输入一个地址，到页面展示中间经历了哪些处理</span><br><span class="line">  1、浏览器输入url, 解析url地址是否合法</span><br><span class="line">  2、浏览器检查是否有缓存, 如果有直接显示。如果没有跳到第三步。</span><br><span class="line">  3、在发送http请求前，需要域名解析（DNS解析），解析获取对应过的ip地址。</span><br><span class="line">  4、浏览器向服务器发起tcp链接，完成tcp三次握手</span><br><span class="line">  5、握手成功后，浏览器向服务器发送http请求</span><br><span class="line">  6、服务器收到处理的请求，将数据返回至浏览器</span><br><span class="line">  7、浏览器收到http响应。</span><br><span class="line">  8、浏览器解析响应。如果响应可以缓存，则存入缓存</span><br><span class="line">  9、浏览器进行页面渲染</span><br><span class="line"></span><br><span class="line">3. 你知道HTTP有哪些状态码吗,列举下 </span><br><span class="line">  200：成功</span><br><span class="line">  302：重定向</span><br><span class="line">  404：请求失败，基本都是路径拼接错误</span><br><span class="line">  400：请求没有进入到后台服务里，比如http报文有问题</span><br><span class="line">  502：无效的响应（基本上就是Tomcat没启好或者挂了）</span><br><span class="line"></span><br><span class="line">4. 你知道http和https的区别不，简单说下</span><br><span class="line">  - HTTPS &#x3D; HTTP + SSL</span><br><span class="line">  - https有ca证书，http一般没有</span><br><span class="line">  - http是超文本传输协议，信息是明文传输。https则是具有安全性的ssl加密传输协议</span><br><span class="line">  - http默认80端口，https默认443端口。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级</title>
    <url>/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="MySQL高级"><a href="#MySQL高级" class="headerlink" title="MySQL高级"></a>MySQL高级</h1><h2 id="第一章-MySQL架构介绍"><a href="#第一章-MySQL架构介绍" class="headerlink" title="第一章 MySQL架构介绍"></a>第一章 MySQL架构介绍</h2><h3 id="MySQL中的一些文件"><a href="#MySQL中的一些文件" class="headerlink" title="MySQL中的一些文件"></a>MySQL中的一些文件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 配置文件 Windows my.ini   Linux  my.cnf        </span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 数据文件 </span><br><span class="line">MyIsam</span><br><span class="line">	frm文件(framework)  存放表结构</span><br><span class="line">	myd文件(data)   存放表数据</span><br><span class="line">	myi文件(index)  存放表索引</span><br><span class="line">Innodb</span><br><span class="line">	frm文件  存放表结构</span><br><span class="line">	ibdata1  所有表的数据都存在<span class="operator">/</span>usr<span class="operator">/</span>share<span class="operator">/</span>MySQL<span class="operator">/</span>ibdata1, 而frm文件存放在库同名的包下</span><br><span class="line">也可以单独存放，如下图所示：</span><br></pre></td></tr></table></figure>
<p> <img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/42.png" alt="42"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> 日志文件</span><br><span class="line"><span class="operator">-</span> 重做日志（redo log）</span><br><span class="line"><span class="operator">-</span> 回滚日志（undo log）</span><br><span class="line"><span class="operator">-</span> 二进制日志（binlog）</span><br><span class="line"><span class="operator">-</span> 错误日志（errorlog）</span><br><span class="line"><span class="operator">-</span> 慢查询日志（slow query log）</span><br><span class="line"><span class="operator">-</span> 一般查询日志（general query log）</span><br><span class="line"><span class="operator">-</span> 中继日志（relay log）</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 重做日志（redo log）</span></span><br><span class="line"><span class="comment">--作用：</span></span><br><span class="line">确保事务的持久性。redo日志记录事务执行后的状态，用来恢复未写入data file的已成功事务更新的数据。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启MySQL服务的时候，根据redo log进行重做，从而达到事务的持久性这一特性。</span><br><span class="line"></span><br><span class="line"><span class="comment">--内容：</span></span><br><span class="line">物理格式的日志，记录物理数据页面的修改的信息，其redo log是顺序写入redo log file的物理文件中去的。</span><br><span class="line"></span><br><span class="line"><span class="comment">--什么时候产生：</span></span><br><span class="line">事务开始之后就产生redo log，redo log的落盘并不是随着事务的提交才写入的，而是在事务的执行过程中，便开始写入redo log文件中。</span><br><span class="line"></span><br><span class="line"><span class="comment">--什么时候释放：</span></span><br><span class="line">当对应事务的脏页写入到磁盘之后，redo log的使命也就完成了，重做日志占用的空间就可以重用。</span><br><span class="line"></span><br><span class="line"><span class="comment">--很重要一点，redo log是什么时候写盘的？</span></span><br><span class="line">前面说了是在事物开始之后逐步写盘的。之所以说重做日志是在事务开始之后逐步写入重做日志文件，而不一定是事务提交才写入重做日志缓存，原因就是，重做日志有一个缓存区Innodb_log_buffer，Innodb_log_buffer的默认大小为<span class="number">8</span>M,Innodb存储引擎先将重做日志写入innodb_log_buffer中。</span><br><span class="line"></span><br><span class="line"><span class="comment">--然后会通过以下三种方式将innodb日志缓冲区的日志刷新到磁盘</span></span><br><span class="line">Master Thread 每秒一次执行刷新Innodb_log_buffer到重做日志文件。</span><br><span class="line">每个事务提交时会将重做日志刷新到重做日志文件。</span><br><span class="line">当重做日志缓存可用空间少于一半时，重做日志缓存被刷新到重做日志文件</span><br><span class="line"></span><br><span class="line">由此可以看出，重做日志通过不止一种方式写入到磁盘，尤其是对于第一种方式，Innodb_log_buffer到重做日志文件是Master Thread线程的定时任务。</span><br><span class="line">因此重做日志的写盘，并不一定是随着事务的提交才写入重做日志文件的，而是随着事务的开始，逐步开始的。</span><br><span class="line">即使某个事务还没有提交，Innodb存储引擎仍然每秒会将重做日志缓存刷新到重做日志文件。</span><br><span class="line">这一点是必须要知道的，因为这可以很好地解释再大的事务的提交（<span class="keyword">commit</span>）的时间也是很短暂的。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 回滚日志（undo log）</span></span><br><span class="line"><span class="comment">--作用：</span></span><br><span class="line">保证数据的原子性，保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读</span><br><span class="line"></span><br><span class="line"><span class="comment">--内容：</span></span><br><span class="line">逻辑格式的日志，在执行undo的时候，仅仅是将数据从逻辑上恢复至事务之前的状态，而不是从物理页面上操作实现的，这一点是不同于redo log的。</span><br><span class="line"></span><br><span class="line"><span class="comment">--什么时候产生：</span></span><br><span class="line">事务开始之前，将当前的版本生成 undo log，undo 也会产生 redo 来保证undo log的可靠性</span><br><span class="line"></span><br><span class="line"><span class="comment">--什么时候释放：</span></span><br><span class="line">当事务提交之后，undo log并不能立马被删除，而是放入待清理的链表，由purge线程判断是否由其他事务在使用undo段中表的上一个事务之前的版本信息，决定是否可以清理undo log的日志空间。</span><br><span class="line"></span><br><span class="line"><span class="comment">--对应的物理文件：</span></span><br><span class="line">MySQL5<span class="number">.6</span>之前，undo表空间位于共享表空间的回滚段中，共享表空间的默认的名称是ibdata，位于数据文件目录中。</span><br><span class="line"></span><br><span class="line">MySQL5<span class="number">.6</span>之后，undo表空间可以配置成独立的文件，但是提前需要在配置文件中配置，完成数据库初始化后生效且不可改变undo log文件的个数</span><br><span class="line"></span><br><span class="line">如果初始化数据库之前没有进行相关配置，那么就无法配置成独立的表空间了。</span><br><span class="line"></span><br><span class="line"><span class="comment">--其他：</span></span><br><span class="line">undo是在事务开始之前保存的被修改数据的一个版本，产生undo日志的时候，同样会伴随类似于保护事务持久化机制的redo log的产生。</span><br><span class="line"></span><br><span class="line">默认情况下undo文件是保持在共享表空间的，也即ibdatafile文件中，当数据库中发生一些大的事务性操作的时候，要生成大量的undo信息，全部保存在共享表空间中的。</span><br><span class="line"></span><br><span class="line">因此共享表空间可能会变的很大，默认情况下，也就是undo 日志使用共享表空间的时候，被撑大的共享表空间是不会也不能自动收缩的。</span><br><span class="line"></span><br><span class="line">因此，MySQL5<span class="number">.7</span>之后的独立undo 表空间的配置就显得很有必要了。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 二进制日志（binlog）：</span></span><br><span class="line"><span class="comment">--作用：</span></span><br><span class="line">用于复制，在主从复制中，从库利用主库上的binlog进行重播，实现主从同步。</span><br><span class="line">用于数据库的基于时间点的还原。</span><br><span class="line"></span><br><span class="line"><span class="comment">--内容：</span></span><br><span class="line">逻辑格式的日志，可以简单认为就是执行过的事务中的<span class="keyword">sql</span>语句。</span><br><span class="line"></span><br><span class="line">但又不完全是<span class="keyword">sql</span>语句这么简单，而是包括了执行的<span class="keyword">sql</span>语句（增删改）反向的信息，也就意味着<span class="keyword">delete</span>对应着<span class="keyword">delete</span>本身和其反向的<span class="keyword">insert</span>；<span class="keyword">update</span>对应着<span class="keyword">update</span>执行前后的版本的信息；<span class="keyword">insert</span>对应着<span class="keyword">delete</span>和<span class="keyword">insert</span>本身的信息。</span><br><span class="line"></span><br><span class="line">在使用MySQLbinlog解析binlog之后一些都会真相大白。</span><br><span class="line"></span><br><span class="line">因此可以基于binlog做到类似于oracle的闪回功能，其实都是依赖于binlog中的日志记录。</span><br><span class="line"></span><br><span class="line"><span class="comment">--什么时候产生：</span></span><br><span class="line">事务提交的时候，一次性将事务中的<span class="keyword">sql</span>语句（一个事物可能对应多个<span class="keyword">sql</span>语句）按照一定的格式记录到binlog中。</span><br><span class="line"></span><br><span class="line">这里与redo log很明显的差异就是redo log并不一定是在事务提交的时候刷新到磁盘，redo log是在事务开始之后就开始逐步写入磁盘。</span><br><span class="line"></span><br><span class="line">因此对于事务的提交，即便是较大的事务，提交（<span class="keyword">commit</span>）都是很快的，但是在开启了bin_log的情况下，对于较大事务的提交，可能会变得比较慢一些。</span><br><span class="line"></span><br><span class="line">这是因为binlog是在事务提交的时候一次性写入的造成的，这些可以通过测试验证。</span><br><span class="line"></span><br><span class="line"><span class="comment">--什么时候释放：</span></span><br><span class="line"></span><br><span class="line">binlog的默认是保持时间由参数expire_logs_days配置，也就是说对于非活动的日志文件，在生成时间超过expire_logs_days配置的天数之后，会被自动删除。</span><br><span class="line"></span><br><span class="line"><span class="comment">--对应的物理文件：</span></span><br><span class="line">配置文件的路径为log_bin_basename，binlog日志文件按照指定大小，当日志文件达到指定的最大的大小之后，进行滚动更新，生成新的日志文件。</span><br><span class="line"></span><br><span class="line">对于每个binlog日志文件，通过一个统一的index文件来组织。</span><br><span class="line"></span><br><span class="line"><span class="comment">--其他：</span></span><br><span class="line">二进制日志的作用之一是还原数据库的，这与redo log很类似，很多人混淆过，但是两者有本质的不同</span><br><span class="line"></span><br><span class="line">作用不同：redo log是保证事务的持久性的，是事务层面的，binlog作为还原的功能，是数据库层面的（当然也可以精确到事务层面的），虽然都有还原的意思，但是其保护数据的层次是不一样的。</span><br><span class="line"></span><br><span class="line">内容不同：redo log是物理日志，是数据页面的修改之后的物理记录，binlog是逻辑日志，可以简单认为记录的就是<span class="keyword">sql</span>语句</span><br><span class="line"></span><br><span class="line">另外，两者日志产生的时间，可以释放的时间，在可释放的情况下清理机制，都是完全不同的。</span><br><span class="line"></span><br><span class="line">恢复数据时候的效率，基于物理日志的redo log恢复数据的效率要高于语句逻辑日志的binlog</span><br><span class="line"></span><br><span class="line">关于事务提交时，redo log和binlog的写入顺序，为了保证主从复制时候的主从一致（当然也包括使用binlog进行基于时间点还原的情况），是要严格一致的，MySQL通过两阶段提交过程来完成事务的一致性的，也即redo log和binlog的一致性的，理论上是先写redo log，再写binlog，两个日志都提交成功（刷入磁盘），事务才算真正的完成。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 四、错误日志</span></span><br><span class="line">错误日志记录着MySQLd启动和停止,以及服务器在运行过程中发生的错误的相关信息。在默认情况下，系统记录错误日志的功能是关闭的，错误信息被输出到标准错误输出。</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 五、普通查询日志 general query log </span></span><br><span class="line">记录了服务器接收到的每一个查询或是命令，无论这些查询或是命令是否正确甚至是否包含语法错误，general log 都会将其记录下来 ，记录的格式为 &#123;Time ，Id ，Command，Argument &#125;。也正因为MySQL服务器需要不断地记录日志，开启General log会产生不小的系统开销。 因此，MySQL默认是把General log关闭的。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 六、慢查询日志 </span></span><br><span class="line">慢日志记录执行时间过长和没有使用索引的查询语句，报错<span class="keyword">select</span>、<span class="keyword">update</span>、<span class="keyword">delete</span>以及<span class="keyword">insert</span>语句，慢日志只会记录执行成功的语句。</span><br><span class="line"><span class="number">1.</span> 查看慢查询时间： </span><br><span class="line">　　<span class="keyword">show</span> variables <span class="keyword">like</span> &quot;long_query_time&quot;; 默认<span class="number">10</span>s</span><br><span class="line"><span class="number">2.</span> 查看慢查询配置情况： </span><br><span class="line">　　<span class="keyword">show</span> status <span class="keyword">like</span> &quot;%slow_queries%&quot;;</span><br><span class="line"><span class="number">3.</span> 查看慢查询日志路径： </span><br><span class="line">　　<span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%slow%&quot;;</span><br><span class="line"><span class="number">4.</span> 开启慢日志</span><br><span class="line">	<span class="keyword">set</span> <span class="keyword">global</span> slow_query_log <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="number">5.</span> 查看已经开启：</span><br><span class="line">	<span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%slow_query_log%&quot;;</span><br></pre></td></tr></table></figure>
<h3 id="MySQL逻辑架构介绍"><a href="#MySQL逻辑架构介绍" class="headerlink" title="MySQL逻辑架构介绍"></a>MySQL逻辑架构介绍</h3><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎的架构上，插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/41.png" alt="41"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>连接层</span><br><span class="line">最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端<span class="operator">/</span>服务端工具实现的类似于tcp<span class="operator">/</span>ip的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>服务层</span><br><span class="line"><span class="number">2.1</span>  Management Serveices <span class="operator">&amp;</span> Utilities： 系统管理和控制工具  </span><br><span class="line"><span class="number">2.2</span>  <span class="keyword">SQL</span> Interface: <span class="keyword">SQL</span>接口</span><br><span class="line">     接受用户的<span class="keyword">SQL</span>命令，并且返回用户需要查询的结果。比如<span class="keyword">select</span> <span class="keyword">from</span>就是调用<span class="keyword">SQL</span> Interface</span><br><span class="line"><span class="number">2.3</span> Parser: 解析器</span><br><span class="line">    <span class="keyword">SQL</span>命令传递到解析器的时候会被解析器验证和解析。 </span><br><span class="line"><span class="number">2.4</span> Optimizer: 查询优化器。</span><br><span class="line">    <span class="keyword">SQL</span>语句在查询之前会使用查询优化器对查询进行优化。 </span><br><span class="line">    用一个例子就可以理解： <span class="keyword">select</span> uid,name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span>  gender<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    优化器来决定先投影还是先过滤。</span><br><span class="line"><span class="number">2.5</span> Cache和Buffer： 查询缓存。</span><br><span class="line">    如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。</span><br><span class="line">    这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等</span><br><span class="line">    缓存是负责读，缓冲负责写。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span>引擎层</span><br><span class="line">存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。后面介绍MyISAM和InnoDB</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">4.</span>存储层</span><br><span class="line">数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</span><br></pre></td></tr></table></figure>
<h3 id="MySQL存储引擎"><a href="#MySQL存储引擎" class="headerlink" title="MySQL存储引擎"></a>MySQL存储引擎</h3><p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/40.png" alt="40"></p>
<h2 id="第二章-索引优化分析"><a href="#第二章-索引优化分析" class="headerlink" title="第二章  索引优化分析"></a>第二章  索引优化分析</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">性能下降的原因</span><br><span class="line">- 查询数据过多</span><br><span class="line">- 关联了太多的表，太多join </span><br><span class="line">- 没有利用到索引</span><br><span class="line">- 服务器调优及各个参数设置（缓冲、线程数等）(DBA的工作)</span><br></pre></td></tr></table></figure>
<h3 id="常见的Join查询"><a href="#常见的Join查询" class="headerlink" title="常见的Join查询"></a>常见的Join查询</h3><h4 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h4><ul>
<li><p>手写</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/43.png" alt="43"></p>
</li>
<li><p>机读</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/44.png" alt="44"></p>
</li>
<li><p>总结</p>
</li>
</ul>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/45.png" alt="45"></p>
<h4 id="JOIN图"><a href="#JOIN图" class="headerlink" title="JOIN图"></a>JOIN图</h4><p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/46.bmp" alt="46"></p>
<h4 id="7种JOIN"><a href="#7种JOIN" class="headerlink" title="7种JOIN"></a>7种JOIN</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> A、B两表共有</span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_emp a <span class="keyword">inner</span> <span class="keyword">join</span> t_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id;</span><br><span class="line"> </span><br><span class="line"><span class="number">2</span> A、B两表共有<span class="operator">+</span>A的独有</span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_emp a <span class="keyword">left</span> <span class="keyword">join</span> t_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id;</span><br><span class="line"> </span><br><span class="line"><span class="number">3</span> A、B两表共有<span class="operator">+</span>B的独有</span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_emp a <span class="keyword">right</span> <span class="keyword">join</span> t_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id;</span><br><span class="line"> </span><br><span class="line"><span class="number">4</span> A的独有 </span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_emp a <span class="keyword">left</span> <span class="keyword">join</span> t_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id <span class="keyword">where</span> b.id <span class="keyword">is</span> <span class="keyword">null</span>; </span><br><span class="line"> </span><br><span class="line"><span class="number">5</span> B的独有</span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_emp a <span class="keyword">right</span> <span class="keyword">join</span> t_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id <span class="keyword">where</span> a.deptId <span class="keyword">is</span> <span class="keyword">null</span>;  </span><br><span class="line"> </span><br><span class="line"><span class="number">6</span> AB全有</span><br><span class="line">MySQL不支持<span class="keyword">FULL</span> <span class="keyword">JOIN</span>, <span class="keyword">left</span> <span class="keyword">join</span> <span class="operator">+</span> <span class="keyword">union</span>(可去除重复数据)<span class="operator">+</span> <span class="keyword">right</span> <span class="keyword">join</span>代替</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_emp A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_dept B <span class="keyword">ON</span> A.deptId <span class="operator">=</span> B.id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_emp A <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> t_dept B <span class="keyword">ON</span> A.deptId <span class="operator">=</span> B.id</span><br><span class="line"> </span><br><span class="line"><span class="number">7</span> A的独有<span class="operator">+</span>B的独有</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_emp A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_dept B <span class="keyword">ON</span> A.deptId <span class="operator">=</span> B.id <span class="keyword">WHERE</span> B.`id` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_emp A <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> t_dept B <span class="keyword">ON</span> A.deptId <span class="operator">=</span> B.id <span class="keyword">WHERE</span> A.`deptId` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<h3 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引（Index）是帮助MySQL高效获取数据的数据结构。</span><br><span class="line"></span><br><span class="line">优势： </span><br><span class="line">- 提高数据检索的效率，降低数据库的IO成本</span><br><span class="line">- 通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗</span><br><span class="line"></span><br><span class="line">劣势：</span><br><span class="line">- 实索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也要占用空间</span><br><span class="line">- 虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。</span><br><span class="line">  因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带   来的键值变化后的索引信息</span><br><span class="line">- 索引只是提高效率的一个因素，如果MySQL有大数据量的表，就要花时间建立优秀的索引，或优化查询语句</span><br><span class="line"></span><br><span class="line">MySQL索引分类</span><br><span class="line">- 主键索引   </span><br><span class="line">- 单值索引  </span><br><span class="line">- 唯一索引 </span><br><span class="line">- 复合索引</span><br><span class="line"></span><br><span class="line">哪些情况需要创建索引</span><br><span class="line">1. 主键自动建立唯一索引</span><br><span class="line">2. 频繁作为查询条件的字段应该创建索引(where 后面的语句)</span><br><span class="line">3. 查询中与其它表关联的字段，外键关系建立索引</span><br><span class="line">4. 单键&#x2F;组合索引的选择问题(在高并发下倾向创建组合索引)</span><br><span class="line">5. 查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</span><br><span class="line">6. 查询中统计或者分组字段</span><br><span class="line"></span><br><span class="line">哪些情况不要创建索引</span><br><span class="line">1. 表记录太少</span><br><span class="line">2. 经常增删改的表</span><br><span class="line">3. Where条件里用不到的字段不创建索引</span><br><span class="line">4. 如果某个数据列包含许多重复的内容，为它建立索引就没有太大的效果</span><br></pre></td></tr></table></figure>
<h3 id="性能分析Explain"><a href="#性能分析Explain" class="headerlink" title="性能分析Explain"></a>性能分析Explain</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 能干嘛</span></span><br><span class="line"><span class="number">1.</span>表的读取顺序</span><br><span class="line"><span class="number">2.</span>哪些索引可以使用</span><br><span class="line"><span class="number">3.</span>数据读取操作的操作类型</span><br><span class="line"><span class="number">4.</span>哪些索引被实际使用</span><br><span class="line"><span class="number">5.</span>表之间的引用</span><br><span class="line"><span class="number">6.</span>每张表有多少行被优化器查询</span><br></pre></td></tr></table></figure>
<h4 id="各字段的解释"><a href="#各字段的解释" class="headerlink" title="各字段的解释"></a>各字段的解释</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- id : select查询的序列号,包含一组数字，表示查询中执行select子句或操作表的顺序</span></span><br><span class="line"><span class="operator">-</span> id相同，执行顺序由上至下</span><br><span class="line"><span class="operator">-</span> id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</span><br><span class="line"><span class="operator">-</span> id相同不同，同时存在</span><br><span class="line"></span><br><span class="line">id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</span><br><span class="line">衍生表 <span class="operator">=</span> derived2 <span class="comment">--&gt; derived + 2 (2 表示由 id =2 的查询衍生出来的表。type 肯定是 all ，因为衍生的表没有建立索引）</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/46.png" alt="46"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- select_type : 查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> SIMPLE </span><br><span class="line">   简单的 <span class="keyword">select</span> 查询,查询中不包含子查询或者<span class="keyword">UNION</span>             </span><br><span class="line"><span class="number">2.</span> <span class="keyword">PRIMARY</span>   </span><br><span class="line">   查询中若包含任何复杂的子部分，最外层查询则被标记为<span class="keyword">Primary</span>      </span><br><span class="line"><span class="number">3.</span> DERIVED       </span><br><span class="line">   在<span class="keyword">FROM</span>列表中包含的子查询被标记为DERIVED,  MySQL会递归执行这些子查询, 把结果放在临时表里。   </span><br><span class="line"><span class="number">4.</span> SUBQUERY  </span><br><span class="line">   在<span class="keyword">SELECT</span>或<span class="keyword">WHERE</span>列表中包含了子查询</span><br><span class="line"><span class="number">5.</span> DEPENDENT SUBQUERY  </span><br><span class="line">   在<span class="keyword">SELECT</span>或<span class="keyword">WHERE</span>列表中包含了子查询,子查询基于外层</span><br><span class="line"><span class="number">6.</span> UNCACHEABLE SUBQUREY    </span><br><span class="line">   无法被缓存的子查询</span><br><span class="line"><span class="number">7.</span> <span class="keyword">UNION</span>   </span><br><span class="line">   若第二个<span class="keyword">SELECT</span>出现在<span class="keyword">UNION</span>之后，则被标记为<span class="keyword">UNION</span>；</span><br><span class="line">   若<span class="keyword">UNION</span>包含在<span class="keyword">FROM</span>子句的子查询中,外层<span class="keyword">SELECT</span>将被标记为：DERIVED</span><br><span class="line"><span class="number">8.</span> <span class="keyword">UNION</span> <span class="keyword">RESULT</span>    </span><br><span class="line">   从<span class="keyword">UNION</span>表获取结果的<span class="keyword">SELECT</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- table : 显示这一行的数据是关于哪张表的</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- type : 显示的是访问类型，是较为重要的一个指标，结果值从最好到最坏依次是： </span></span><br><span class="line"><span class="keyword">system</span>  <span class="operator">&gt;</span>  const  <span class="operator">&gt;</span> eq_ref  <span class="operator">&gt;</span>  <span class="keyword">ref</span>  <span class="operator">&gt;</span>  fulltext  <span class="operator">&gt;</span>  ref_or_null  <span class="operator">&gt;</span>  index_merge  <span class="operator">&gt;</span>  unique_subquery  <span class="operator">&gt;</span> index_subquery  <span class="operator">&gt;</span>  <span class="keyword">range</span>  <span class="operator">&gt;</span>  index  <span class="operator">&gt;</span>  <span class="keyword">ALL</span> </span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/47.png" alt="47"></p>
<ol>
<li><p>system：表只有一行记录（等于系统表），这是const类型的特列，平时不会出现</p>
</li>
<li><p>const：通过索引一次就找到了，const用于比较primary key或者unique索引。只匹配一行数据，所以快</p>
<p>如将主键置于where列表中，MySQL就能将该查询转换为一个常量<img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/48.png" alt="48"></p>
</li>
<li><p>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描<img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/49.png" alt="49"></p>
</li>
<li><p>ref：非唯一性索引扫描，返回匹配某个单独值的所有行。</p>
<p>本质上是一种索引访问，返回所有匹配某个单独值的行。</p>
</li>
<li><p>range：只检索给定范围的行，使用一个索引来选择行。key 列显示使用了哪个索引。</p>
<p>一般就是在where语句中出现了between、&lt;、&gt;、in等的查询。这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。<img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/50.png" alt="50"></p>
</li>
<li><p>index：Full Index Scan，index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然all和Index都是读全表，但index是从索引中读取的，而all是从硬盘中读的）<img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/51.png" alt="51"></p>
</li>
<li><p>all：Full Table Scan，将遍历全表以找到匹配的行</p>
</li>
<li><p>index_merge：在查询过程中需要多个索引组合使用，通常出现在有 or 的关键字的sql中</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/52.png" alt="52"></p>
</li>
<li><p>ref_or_null：对于某个字段既需要关联条件，也需要null值。查询优化器会选择用ref_or_null连接查询。</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/53.png" alt="53"></p>
</li>
<li><p>index_subquery：利用索引来关联子查询，不再全表扫描。</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/54.png" alt="54"></p>
</li>
<li><p>unique_subquery ：该连接类型类似于index_subquery。 子查询中的唯一索引</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/55.png" alt="55"></p>
</li>
</ol>
<p>备注：一般来说，得保证查询至少达到range级别，最好能达到ref。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- possible_keys：显示可能应用在这张表中的索引，一个或多个。</span></span><br><span class="line">查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- key：实际使用的索引。如果为NULL，则没有使用索引</span></span><br><span class="line">查询中若使用了覆盖索引，则该索引和查询的<span class="keyword">select</span>字段重叠</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- key_len：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。 </span></span><br><span class="line">key_len字段能够帮你检查是否充分的利用上了索引</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/56.png" alt="56"></p>
<p> <img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/57.png" alt="57"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">总结：</span><br><span class="line">char(30)   utf8 --&gt;  key_len &#x3D; 30*3 +1  表示 utf8 格式需要  *3 (跟数据类型有关)   </span><br><span class="line">允许为 NULL    +1  ，不允许 +0</span><br><span class="line">动态类型 +2  (动态类型包括 : varchar , detail text() 截取字符串)</span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ref：显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值。</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/59.png" alt="59"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- rows：rows列显示MySQL认为它执行查询时必须检查的行数。（越少越好）</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Extra：包含十分重要的额外信息</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li><p>Using filesort     </p>
<p>说明MySQL会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。<br>MySQL中无法利用索引完成的排序操作称为“文件排序”</p>
</li>
<li><p>Using temporary </p>
<p>使了用临时表保存中间结果, MySQL在对查询结果排序时使用临时表。常见于排序 和分组查询。</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/60.png" alt="60"></p>
<p>create index idx_deptno_ename on emp(deptno,ename)</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/61.png" alt="61"></p>
</li>
<li><p>USING index</p>
<p>表示相应的select操作中使用了覆盖索引(Covering Index)，避免访问了表的数据行，效率不错！<br>如果同时出现using where，表明索引被用来执行索引键值的查找;<br>如果没有同时出现using where，表明索引只是用来读取数据而非利用索引执行查找。</p>
<p>注意：如果要使用覆盖索引，一定要注意select列表中只取出需要的列，不可select *，因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。</p>
</li>
<li><p>Using where              表明使用了where过滤</p>
</li>
<li><p>using join buffer       使用了连接缓存</p>
</li>
<li><p>impossible where     where子句的值总是false，不能用来获取任何元组</p>
</li>
<li><p>select tables optimized away    </p>
<p>在没有GROUPBY子句的情况下，基于索引优化MIN/MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/62.png" alt="62"></p>
</li>
<li><p>distinct                        优化distinct操作</p>
</li>
</ol>
</blockquote>
<h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><h4 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 全值匹配</span><br><span class="line"><span class="number">2.</span> 左前缀法则</span><br><span class="line">	如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。 </span><br><span class="line">	<span class="keyword">and</span> 忽略左右关系。既即使没有没有按顺序由于优化器的存在，会自动优化。</span><br><span class="line">	经过试验结论 ：建立了idx_nameAge索引  id 为主键</span><br><span class="line">    <span class="number">1</span>).当使用覆盖索引的方式时，(<span class="keyword">select</span> name<span class="operator">/</span>age<span class="operator">/</span>id <span class="keyword">from</span> staffs <span class="keyword">where</span> age<span class="operator">=</span><span class="number">10</span> 后面没有其他没有索引的	        字段条件)，即使不是以 name 开头，也会使用 idx_nameAge 索引。</span><br><span class="line">    <span class="number">2</span>).除开上述条件才满足最左前缀法则。</span><br><span class="line"><span class="number">3.</span> 不在索引列上做任何操作（计算、函数、(自动<span class="keyword">or</span>手动)类型转换），会导致索引失效转向全表扫描</span><br><span class="line"><span class="number">4.</span> 存储引擎不能使用索引中范围条件右边的列</span><br><span class="line"><span class="number">5.</span> 尽量使用覆盖索引(只访问索引的查询(索引列和查询列一致))，减少<span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="number">6.</span> 使用不等于(<span class="operator">!=</span> 或者<span class="operator">&lt;&gt;</span>) 的时候无法使用索引会导致全表扫描</span><br><span class="line">	使用 <span class="operator">!=</span> 和 <span class="operator">&lt;&gt;</span> 的字段索引失效 (<span class="operator">!=</span> 针对数值类型。 <span class="operator">&lt;&gt;</span> 针对字符类型)</span><br><span class="line">	<span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">10</span> <span class="keyword">and</span> name<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>, 这种情况下MySQL自动优化，将 name<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span> 放在 age<span class="operator">=</span><span class="number">10</span> 之前，</span><br><span class="line">	name 依然能使用索引，只是 age 的索引失效。</span><br><span class="line"><span class="number">7.</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> 和 <span class="keyword">is</span> <span class="keyword">null</span>是可以使用索引的</span><br><span class="line"><span class="number">8.</span> <span class="keyword">like</span>以通配符开头(<span class="string">&#x27;%abc...&#x27;</span>) 索引失效</span><br><span class="line">	解决<span class="keyword">like</span> <span class="string">&#x27;%字符串%&#x27;</span> 时索引不被使用 <span class="comment">--&gt; 利用覆盖索引</span></span><br><span class="line"><span class="number">9.</span> 字符串不加单引号索引失效</span><br><span class="line"><span class="number">10.</span> 用<span class="keyword">or</span>连接时会索引失效</span><br></pre></td></tr></table></figure>
<p>案例7： is not null 和 is null是可以使用索引的,见下图</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/63.png" alt="63"></p>
<p>案例8：<img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/64.png" alt="64"></p>
<p>案例10：用or连接时会索引失效<img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/65.png" alt="65"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 练习</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test03(</span><br><span class="line"> id <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line"> c1 <span class="type">char</span>(<span class="number">10</span>), c2 <span class="type">char</span>(<span class="number">10</span>),c3 <span class="type">char</span>(<span class="number">10</span>),c4 <span class="type">char</span>(<span class="number">10</span>),c5 <span class="type">char</span>(<span class="number">10</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test03(c1,c2,c3,c4,c5) <span class="keyword">values</span>(<span class="string">&#x27;a1&#x27;</span>,<span class="string">&#x27;a2&#x27;</span>,<span class="string">&#x27;a3&#x27;</span>,<span class="string">&#x27;a4&#x27;</span>,<span class="string">&#x27;a5&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test03(c1,c2,c3,c4,c5) <span class="keyword">values</span>(<span class="string">&#x27;b1&#x27;</span>,<span class="string">&#x27;b2&#x27;</span>,<span class="string">&#x27;b3&#x27;</span>,<span class="string">&#x27;b4&#x27;</span>,<span class="string">&#x27;b5&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test03(c1,c2,c3,c4,c5) <span class="keyword">values</span>(<span class="string">&#x27;c1&#x27;</span>,<span class="string">&#x27;c2&#x27;</span>,<span class="string">&#x27;c3&#x27;</span>,<span class="string">&#x27;c4&#x27;</span>,<span class="string">&#x27;c5&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test03(c1,c2,c3,c4,c5) <span class="keyword">values</span>(<span class="string">&#x27;d1&#x27;</span>,<span class="string">&#x27;d2&#x27;</span>,<span class="string">&#x27;d3&#x27;</span>,<span class="string">&#x27;d4&#x27;</span>,<span class="string">&#x27;d5&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test03(c1,c2,c3,c4,c5) <span class="keyword">values</span>(<span class="string">&#x27;e1&#x27;</span>,<span class="string">&#x27;e2&#x27;</span>,<span class="string">&#x27;e3&#x27;</span>,<span class="string">&#x27;e4&#x27;</span>,<span class="string">&#x27;e5&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> index idx_test03_c1234 <span class="keyword">on</span> test03(c1,c2,c3,c4);</span><br><span class="line">问题：我们创建了复合索引idx_test03_c1234 ,根据以下<span class="keyword">SQL</span>分析下索引使用情况？</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>)explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03 <span class="keyword">where</span> c1<span class="operator">=</span><span class="string">&#x27;a1&#x27;</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="string">&#x27;a2&#x27;</span> <span class="keyword">and</span> c4<span class="operator">=</span><span class="string">&#x27;a4&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> c3;   </span><br><span class="line">   c1 c2 用到  c3也用到了, 但用在了排序</span><br><span class="line">   </span><br><span class="line">(<span class="number">2</span>)explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03 <span class="keyword">where</span> c1<span class="operator">=</span><span class="string">&#x27;a1&#x27;</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="string">&#x27;a2&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> c3; 同上</span><br><span class="line"> </span><br><span class="line">(<span class="number">3</span>)explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03 <span class="keyword">where</span> c1<span class="operator">=</span><span class="string">&#x27;a1&#x27;</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="string">&#x27;a2&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> c4;   <span class="keyword">using</span> filesort;</span><br><span class="line"> </span><br><span class="line">(<span class="number">4</span>)explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03 <span class="keyword">where</span> c1<span class="operator">=</span><span class="string">&#x27;a1&#x27;</span> <span class="keyword">and</span> c5<span class="operator">=</span><span class="string">&#x27;a5&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> c2,c3;   </span><br><span class="line">   只用c1一个字段索引,但是c2、c3用于排序,无filesort</span><br><span class="line">   </span><br><span class="line">(<span class="number">5</span>)explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03 <span class="keyword">where</span> c1<span class="operator">=</span><span class="string">&#x27;a1&#x27;</span> <span class="keyword">and</span> c5<span class="operator">=</span><span class="string">&#x27;a5&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> c3,c2;  </span><br><span class="line">   出现了filesort，我们建的索引是<span class="number">1234</span>，它没有按照顺序来, <span class="number">3</span> <span class="number">2</span> 颠倒了</span><br><span class="line">   </span><br><span class="line">(<span class="number">6</span>)explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03 <span class="keyword">where</span> c1<span class="operator">=</span><span class="string">&#x27;a1&#x27;</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="string">&#x27;a2&#x27;</span> <span class="keyword">and</span> c5<span class="operator">=</span><span class="string">&#x27;a5&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> c2,c3;  </span><br><span class="line">   用c1、c2两个字段索引，但是c2、c3用于排序,无filesort</span><br><span class="line">   </span><br><span class="line">(<span class="number">7</span>)explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03 <span class="keyword">where</span> c1<span class="operator">=</span><span class="string">&#x27;a1&#x27;</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="string">&#x27;a2&#x27;</span> <span class="keyword">and</span> c5<span class="operator">=</span><span class="string">&#x27;a5&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> c3,c2;  </span><br><span class="line">   排序字段已经是常量了，这里没有filesort</span><br><span class="line">   </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 之前必排序，与<span class="keyword">order</span> <span class="keyword">by</span> 类似</span><br><span class="line">(<span class="number">8</span>)explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03 <span class="keyword">where</span> c1<span class="operator">=</span><span class="string">&#x27;a1&#x27;</span> <span class="keyword">and</span> c4<span class="operator">=</span><span class="string">&#x27;a4&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> c2,c3;  用c1查询</span><br><span class="line"></span><br><span class="line">(<span class="number">9</span>)explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03 <span class="keyword">where</span> c1<span class="operator">=</span><span class="string">&#x27;a1&#x27;</span> <span class="keyword">and</span> c4<span class="operator">=</span><span class="string">&#x27;a4&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> c3,c2;  </span><br><span class="line">   <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> temporary; <span class="keyword">Using</span> filesort  </span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一般性建议</span></span><br><span class="line">对于单值索引，尽量选择针对当前query过滤性更好的索引</span><br><span class="line">在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</span><br><span class="line">在选择组合索引的时候，尽量选择可以能够包含当前query中的<span class="keyword">where</span>字句中更多字段的索引</span><br><span class="line">尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的</span><br></pre></td></tr></table></figure>
<h4 id="关联查询优化"><a href="#关联查询优化" class="headerlink" title="关联查询优化"></a>关联查询优化</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 保证被驱动表的<span class="keyword">join</span>字段已经被索引（<span class="keyword">join</span>后的表为被驱动表 (需要被查询)）</span><br><span class="line"><span class="number">2.</span> <span class="keyword">left</span> <span class="keyword">join</span> 时，选择小表作为驱动表，大表作为被驱动表。</span><br><span class="line">	 a <span class="keyword">left</span> <span class="keyword">join</span> b 索引加在 b  </span><br><span class="line">     a <span class="keyword">right</span> <span class="keyword">join</span> b 索引加在a</span><br><span class="line"><span class="number">3.</span> <span class="keyword">inner</span> <span class="keyword">join</span> 时，MySQL会自己帮你把小结果集的表选为驱动表。 </span><br><span class="line">	（驱动表无论如何都会被全表扫描，所以扫描次数越少越好）</span><br><span class="line"><span class="number">4.</span> 子查询尽量不要放在被驱动表，有可能使用不到索引。</span><br><span class="line">	若必须用到子查询，可将子查询设置为驱动表，因为驱动表的type 肯定是 <span class="keyword">all</span>，</span><br><span class="line">	而子查询返回的结果表没有索引，必定也是<span class="keyword">all</span></span><br></pre></td></tr></table></figure>
<h4 id="子查询优化-用in-还是-exists"><a href="#子查询优化-用in-还是-exists" class="headerlink" title="子查询优化 (用in 还是 exists)"></a>子查询优化 (用in 还是 exists)</h4><p> <img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/66.png" alt="66"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/67.png" alt="67"></p>
<h4 id="order-by关键字优化"><a href="#order-by关键字优化" class="headerlink" title="order by关键字优化"></a>order by关键字优化</h4><p>ORDER BY子句，尽量使用Index方式排序,避免使用FileSort方式排序</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/68.png" alt="68"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/69.png" alt="69"></p>
<p>MySQL支持二种方式的排序，FileSort和Index，Index效率高。它指MySQL扫描索引本身完成排序。FileSort方式效率较低。ORDER BY满足两情况，会使用Index方式排序:</p>
<ol>
<li>ORDER BY 语句使用索引最左前列</li>
<li>使用Where子句与Order BY子句条件列组合满足索引最左前列</li>
</ol>
<ul>
<li><p>在索引列上完成排序操作，遵照索引建的最佳左前缀</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/70.png" alt="70"></p>
</li>
</ul>
<p>具体下面看几个例子：id 为主键，index(a, b, c)</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/71.png" alt="71"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/72.png" alt="72"></p>
<ul>
<li>filesort有两种算法：双路排序和单路排序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 双路排序</span></span><br><span class="line">MySQL <span class="number">4.1</span>之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据，读取行指针和orderby列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出。</span><br><span class="line">从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单路排序</span></span><br><span class="line">从磁盘读取查询需要的所有列，按照<span class="keyword">order</span> <span class="keyword">by</span>列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO,但是它会使用更多的空间，因为它把每一行都保存在内存中了。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 结论及引申出的问题</span></span><br><span class="line">由于单路是后出的，总体而言好过双路</span><br><span class="line">但是用单路有问题，在sort_buffer中，方法B比方法A要多占用很多空间，因为方法B是把所有字段都取出, 所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取取sort_buffer容量大小，再排……从而多次I<span class="operator">/</span>O。本来想省一次I<span class="operator">/</span>O操作，反而导致了大量的I<span class="operator">/</span>O操作，反而得不偿失。</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 优化策略</span></span><br><span class="line">增大sort_buffer_size参数的设置  <span class="operator">-</span>用于单路排序的内存大小</span><br><span class="line">增大max_length_for_sort_data参数的设置  <span class="operator">-</span>单次排序字段大小。(单次排序请求)</span><br><span class="line">去掉<span class="keyword">select</span> 后面不需要的字段</span><br></pre></td></tr></table></figure>
<h4 id="group-by关键字优化"><a href="#group-by关键字优化" class="headerlink" title="group by关键字优化"></a>group by关键字优化</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>实质是先排序后进行分组，遵照索引建的最佳左前缀</span><br><span class="line">当无法使用索引列，增大max_length_for_sort_data参数的设置 <span class="operator">+</span> 增大sort_buffer_size参数的设置</span><br><span class="line"><span class="keyword">where</span> 高于 <span class="keyword">having</span>，能写在<span class="keyword">where</span>限定的条件就不要去<span class="keyword">having</span>限定了。</span><br></pre></td></tr></table></figure>
<h4 id="去重优化"><a href="#去重优化" class="headerlink" title="去重优化"></a>去重优化</h4><p>尽量不要使用 distinct 关键字去重</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">t_mall_sku 表</span><br><span class="line">id      shp_id   kcdz                </span><br><span class="line"><span class="comment">------  ------ --------------------</span></span><br><span class="line">   <span class="number">3</span>       <span class="number">1</span>    北京市昌平区  </span><br><span class="line">   <span class="number">4</span>       <span class="number">1</span>    北京市昌平区  </span><br><span class="line">   <span class="number">5</span>       <span class="number">5</span>    北京市昌平区  </span><br><span class="line">   <span class="number">6</span>       <span class="number">3</span>    重庆              </span><br><span class="line">   <span class="number">8</span>       <span class="number">8</span>    天津              </span><br><span class="line">例子：<span class="keyword">select</span> <span class="keyword">distinct</span> kcdz form t_mall_sku <span class="keyword">where</span> id <span class="keyword">in</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>)   </span><br><span class="line">使用 <span class="keyword">distinct</span> 关键字去重消耗性能</span><br><span class="line">优化：<span class="keyword">select</span> kcdz form t_mall_sku <span class="keyword">where</span> id <span class="keyword">in</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span> )  <span class="keyword">group</span> <span class="keyword">by</span> kcdz 能够利用到索引</span><br></pre></td></tr></table></figure>
<h4 id="分页查询的优化—limit"><a href="#分页查询的优化—limit" class="headerlink" title="分页查询的优化—limit"></a>分页查询的优化—limit</h4><p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/74.png" alt="74"></p>
<p>优化：先利用覆盖索引把要取的数据行的主键取到，然后再用这个主键列与数据表做关联：(查询的数据量小了后)</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/75.png" alt="75"></p>
<h2 id="第三章-查询截取分析"><a href="#第三章-查询截取分析" class="headerlink" title="第三章  查询截取分析"></a>第三章  查询截取分析</h2><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><h4 id="查看是否开启及如何开启"><a href="#查看是否开启及如何开启" class="headerlink" title="查看是否开启及如何开启"></a>查看是否开启及如何开启</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">默认     <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br><span class="line">开启     <span class="keyword">set</span> <span class="keyword">global</span> slow_query_log<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h4 id="什么样的SQL才会记录到慢查询日志"><a href="#什么样的SQL才会记录到慢查询日志" class="headerlink" title="什么样的SQL才会记录到慢查询日志"></a>什么样的SQL才会记录到慢查询日志</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">这个是由参数long_query_time控制，默认情况下long_query_time的值为<span class="number">10</span>秒。</span><br><span class="line">命令：<span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;long_query_time%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">可以使用命令修改，也可以在my.cnf参数里面修改。</span><br><span class="line"> </span><br><span class="line">假如运行时间正好等于long_query_time的情况，并不会被记录下来。也就是说，在MySQL源码里是判断大于long_query_time，而非大于等于。</span><br></pre></td></tr></table></figure>
<h4 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看当前多少秒算慢</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;long_query_time%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置慢的阙值时间</span></span><br><span class="line">使用命令  <span class="string">&#x27;set global long_query_time=1&#x27;</span>  修改为阙值到<span class="number">1</span>秒钟的就是慢<span class="keyword">sql</span></span><br><span class="line">为什么设置后看不出变化？</span><br><span class="line">需要重新连接或新开一个会话才能看到修改值。 <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;long_query_time%&#x27;</span>;</span><br><span class="line">或者通过<span class="keyword">set</span> session long_query_time<span class="operator">=</span><span class="number">1</span>来改变当前session变量;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 记录慢SQL并后续分析</span></span><br><span class="line"><span class="comment">-- 查询当前系统中有多少条慢查询记录</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;%Slow_queries%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a>配置版</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQLd下配置：</span><br><span class="line">slow_query_log<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">slow_query_log_file<span class="operator">=</span><span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>MySQL<span class="operator">/</span>MySQL<span class="operator">-</span>slow.log</span><br><span class="line">long_query_time<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">log_output<span class="operator">=</span>FILE;</span><br></pre></td></tr></table></figure>
<h4 id="日志分析工具MySQLdumpslow"><a href="#日志分析工具MySQLdumpslow" class="headerlink" title="日志分析工具MySQLdumpslow"></a>日志分析工具MySQLdumpslow</h4><p>MySQLdumpslow –help<img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/81.png" alt="81"></p>
<p> <img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/82.png" alt="82"></p>
<h4 id="工作常用参考"><a href="#工作常用参考" class="headerlink" title="工作常用参考"></a>工作常用参考</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--得到返回记录集最多的10个SQL</span></span><br><span class="line">MySQLdumpslow <span class="operator">-</span>s r <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>MySQL<span class="operator">/</span>atguigu<span class="operator">-</span>slow.log</span><br><span class="line"> </span><br><span class="line"><span class="comment">--得到访问次数最多的10个SQL</span></span><br><span class="line">MySQLdumpslow <span class="operator">-</span>s c <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>MySQL<span class="operator">/</span>atguigu<span class="operator">-</span>slow.log</span><br><span class="line"> </span><br><span class="line"><span class="comment">--得到按照时间排序的前10条里面含有左连接的查询语句</span></span><br><span class="line">MySQLdumpslow <span class="operator">-</span>s t <span class="operator">-</span>t <span class="number">10</span> <span class="operator">-</span>g &quot;left join&quot; <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>MySQL<span class="operator">/</span>atguigu<span class="operator">-</span>slow.log</span><br><span class="line"> </span><br><span class="line"><span class="comment">--另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现爆屏情况</span></span><br><span class="line">MySQLdumpslow <span class="operator">-</span>s r <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>MySQL<span class="operator">/</span>atguigu<span class="operator">-</span>slow.log <span class="operator">|</span> more</span><br></pre></td></tr></table></figure>


<h3 id="大量数据案例"><a href="#大量数据案例" class="headerlink" title="大量数据案例"></a>大量数据案例</h3><p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/76.png" alt="76"></p>
<p>开始优化：<br>思路：尽量让where的过滤条件和排序使用上索引<br>但是一共两个字段(deptno,empno)上有过滤条件，一个字段(ename)有索引 </p>
<ol>
<li><p>我们建一个三个字段的组合索引可否？</p>
<p>create index idx_dno_eno_ena on emp(deptno,empno,ename);<br>但using filesort 依然存在，ename 并没有用到索引。<br>原因是因为empno是一个范围过滤，所以索引后面的字段不会再使用索引了。</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/77.png" alt="77"></p>
</li>
<li><p>但是我们可以把索引建成 create index idx_dno_ena on emp(deptno,ename);</p>
</li>
</ol>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/78.png" alt="78"></p>
<ol start="3">
<li> 但是如果我们建立 create index idx_dno_eno on emp(deptno,empno);  而放弃ename使用索引呢？</li>
</ol>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/79.png" alt="79"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/80.png" alt="80"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 原因是所有的排序都是在条件过滤之后才执行的，所以如果条件过滤了大部分数据的话，几百几千条数据进行排序其实并不是很消耗性能，即使索引优化了排序但实际提升性能很有限。 相对的 empno&lt;100100 这个条件如果没有用到索引的话，要对几万条的数据进行扫描，这是非常消耗性能的，所以索引放在这个字段上性价比最高，是最优选择。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 结论： 当范围条件和group by 或者 order by  的字段出现二选一时 ，优先观察条件字段的过滤数量，如果过滤的数据足够多，而需要排序的数据并不多时，优先把索引放在范围字段上。反之，亦然。</span></span><br></pre></td></tr></table></figure>
<h3 id="Show-Profile"><a href="#Show-Profile" class="headerlink" title="Show Profile"></a>Show Profile</h3><p>MySQL提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量。默认情况下处于关闭状态，并保存最近15次的运行结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 看看当前的MySQL版本是否支持</span><br><span class="line">	<span class="keyword">Show</span>  variables <span class="keyword">like</span> <span class="string">&#x27;profiling&#x27;</span>;  默认是关闭，使用前需要开启</span><br><span class="line">	</span><br><span class="line"><span class="number">2.</span> 开启功能，默认是关闭，使用前需要开启</span><br><span class="line">	<span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;profiling&#x27;</span>;</span><br><span class="line">	<span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line"><span class="number">3.</span> 运行<span class="keyword">SQL</span> </span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 查看结果，<span class="keyword">show</span> profiles;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 诊断<span class="keyword">SQL</span>，<span class="keyword">show</span> profile cpu, block io <span class="keyword">for</span> query n  (n为上一步前面的问题<span class="keyword">SQL</span>数字号码);</span><br><span class="line"> 	参数备注： </span><br><span class="line"> 	<span class="operator">|</span> <span class="keyword">ALL</span>                    <span class="comment">--显示所有的开销信息  </span></span><br><span class="line"> 	<span class="operator">|</span> BLOCK IO               <span class="comment">--显示块IO相关开销  </span></span><br><span class="line"> 	<span class="operator">|</span> CONTEXT SWITCHES 		<span class="comment">--上下文切换相关开销  </span></span><br><span class="line"> 	<span class="operator">|</span> CPU              		<span class="comment">--显示CPU相关开销信息  </span></span><br><span class="line"> 	<span class="operator">|</span> IPC              		<span class="comment">--显示发送和接收相关开销信息  </span></span><br><span class="line"> 	<span class="operator">|</span> MEMORY           		<span class="comment">--显示内存相关开销信息  </span></span><br><span class="line"> 	<span class="operator">|</span> PAGE FAULTS      		<span class="comment">--显示页面错误相关开销信息  </span></span><br><span class="line"> 	<span class="operator">|</span> SOURCE           		<span class="comment">--显示和Source_function，Source_file，Source_line相关的开销信息  </span></span><br><span class="line"> 	<span class="operator">|</span> SWAPS            		<span class="comment">--显示交换次数相关开销的信息</span></span><br><span class="line"> </span><br><span class="line"><span class="number">6.</span> 日常开发需要注意的结论</span><br><span class="line">	converting HEAP <span class="keyword">to</span> MyISAM 查询结果太大，内存都不够用了往磁盘上搬了。</span><br><span class="line">	Creating tmp <span class="keyword">table</span> 创建临时表。拷贝数据到临时表, 用完再删除。</span><br><span class="line">	Copying <span class="keyword">to</span> tmp <span class="keyword">table</span> <span class="keyword">on</span> disk 把内存中临时表复制到磁盘，危险。</span><br><span class="line">	locked</span><br></pre></td></tr></table></figure>
<h3 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h3><ul>
<li><p>配置启用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">在MySQL的my.cnf中，设置如下：</span><br><span class="line"># 开启</span><br><span class="line">general_log<span class="operator">=</span><span class="number">1</span>   </span><br><span class="line"># 记录日志文件的路径</span><br><span class="line">general_log_file<span class="operator">=</span><span class="operator">/</span>path<span class="operator">/</span>logfile</span><br><span class="line"># 输出格式</span><br><span class="line">log_output<span class="operator">=</span>FILE</span><br></pre></td></tr></table></figure></li>
<li><p>编码启用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"># 全局日志可以存放到日志文件中，也可以存放到MySQL系统表中。存放到日志中性能更好一些，存储到表中</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_output<span class="operator">=</span><span class="string">&#x27;TABLE&#x27;</span>;</span><br><span class="line">此后，你所编写的<span class="keyword">sql</span>语句，将会记录到MySQL库里的general_log表，可以用下面的命令查看</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> MySQL.general_log;</span><br></pre></td></tr></table></figure></li>
<li><p>尽量不要在生产环境开启这个功能。</p>
</li>
</ul>
<h2 id="第四章-主从复制"><a href="#第四章-主从复制" class="headerlink" title="第四章  主从复制"></a>第四章  主从复制</h2><h3 id="复制的基本原理"><a href="#复制的基本原理" class="headerlink" title="复制的基本原理"></a>复制的基本原理</h3><p>slave 会从 master 读取 binlog 来进行数据同步</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/83.png" alt="83"></p>
<blockquote>
<p>MySQL复制过程分成三步：<br>1 master将改变记录到二进制日志binary log。这些记录过程叫做二进制日志事件，binary log events；<br>2 slave 将master的binary log events拷贝到它的中继日志（relay log）；<br>3 slave重做中继日志中的事件，将改变应用到自己的数据库中。 MySQL复制是异步的且串行化的。</p>
</blockquote>
<h3 id="复制的基本原则"><a href="#复制的基本原则" class="headerlink" title="复制的基本原则"></a>复制的基本原则</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">每个slave只有一个master</span><br><span class="line">每个slave只能有一个唯一的服务器ID</span><br><span class="line">每个master可以有多个salve</span><br></pre></td></tr></table></figure>

<h3 id="复制的最大问题-延时"><a href="#复制的最大问题-延时" class="headerlink" title="复制的最大问题 -延时"></a>复制的最大问题 -延时</h3><h3 id="一主一从常见配置"><a href="#一主一从常见配置" class="headerlink" title="一主一从常见配置"></a>一主一从常见配置</h3><ol>
<li><p>MySQL版本一致且后台以服务运行</p>
</li>
<li><p>主从都配置在[MySQLd]结点下，都是小写</p>
</li>
<li><p>主机修改my.ini配置文件</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/84.png" alt="84"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/85.png" alt="85"></p>
</li>
</ol>
<ol start="4">
<li><p>从机修改my.cnf配置文件</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/86.png" alt="86"></p>
</li>
<li><p>因修改过配置文件，请主机+从机都重启后台MySQL服务</p>
</li>
<li><p>主机从机都关闭防火墙</p>
</li>
<li><p>在Windows主机上建立帐户并授权slave</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;zhangsan&#x27;</span>@<span class="string">&#x27;121.121.121.121&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="number">2.</span> flush privileges;</span><br><span class="line"><span class="number">3.</span> 查询master的状态</span><br><span class="line">	<span class="keyword">show</span> master status;</span><br><span class="line">	记录下File和Position的值</span><br><span class="line"><span class="number">4.</span> 执行完此步骤后不要再操作主服务器MySQL，防止主服务器状态值变化</span><br></pre></td></tr></table></figure></li>
<li><p>在Linux从机上配置需要复制的主机</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>  CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;主机IP&#x27;</span>,</span><br><span class="line">	MASTER_USER<span class="operator">=</span><span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">	MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">	MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;File名字&#x27;</span>,</span><br><span class="line">	MASTER_LOG_POS<span class="operator">=</span>Position数字;</span><br><span class="line"><span class="number">2.</span> 启动从服务器复制功能  <span class="keyword">start</span> slave;</span><br><span class="line"><span class="number">3.</span> <span class="keyword">show</span> slave status</span><br><span class="line">	下面两个参数都是Yes，则说明主从配置成功！</span><br><span class="line">	Slave_IO_Running: Yes</span><br><span class="line">	Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure></li>
<li><p>主机新建库、新建表、insert记录，从机复制</p>
</li>
<li><p>如何停止从服务复制功能    stop slave;</p>
</li>
</ol>
<h2 id="第五章-MySQL锁机制"><a href="#第五章-MySQL锁机制" class="headerlink" title="第五章  MySQL锁机制"></a>第五章  MySQL锁机制</h2><pre><code>锁是计算机协调多个进程或线程并发访问某一资源的机制。

从对数据操作的类型（读\写）来看：
1.  读锁(共享锁)：针对同一份数据，多个读操作可以同时进行而不会互相影响。
2.  写锁(排它锁)：当前写操作没有完成前，它会阻断其他写锁和读锁。

从对数据操作的粒度分来看：
1. 表锁
2. 行锁</code></pre>
<h3 id="表锁-偏读"><a href="#表锁-偏读" class="headerlink" title="表锁(偏读)"></a>表锁(偏读)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特点：</span><br><span class="line">1. 偏向MyISAM存储引擎，开销小，加锁快；</span><br><span class="line">2. 无死锁；</span><br><span class="line">3. 锁定粒度大，发生锁冲突的概率最高, 并发度最低。</span><br></pre></td></tr></table></figure>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mylock(</span><br><span class="line"> id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)engine myisam;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(name) <span class="keyword">values</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(name) <span class="keyword">values</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(name) <span class="keyword">values</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(name) <span class="keyword">values</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(name) <span class="keyword">values</span>(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">【手动增加表锁】</span><br><span class="line"> lock <span class="keyword">table</span> 表名字<span class="number">1</span> read(write)，表名字<span class="number">2</span> read(write)，其它;</span><br><span class="line">【查看表上加过的锁】</span><br><span class="line">  <span class="keyword">show</span> <span class="keyword">open</span> tables;</span><br><span class="line">【释放表锁】</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure>
<ul>
<li>加读锁 ：我们为mylock表加read锁(读阻塞写例子)</li>
</ul>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/87.png" alt="87"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/88.png" alt="88"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/89.png" alt="89"></p>
<ul>
<li>加写锁</li>
</ul>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/90.png" alt="90"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/91.png" alt="91"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/92.png" alt="92"></p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MyISAM在执行查询语句<span class="keyword">SELECT</span>前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁。 </span><br><span class="line"></span><br><span class="line">MySQL的表级锁有两种模式：</span><br><span class="line"> 表共享读锁（<span class="keyword">Table</span> Read Lock）</span><br><span class="line"> 表独占写锁（<span class="keyword">Table</span> Write Lock）</span><br><span class="line"> </span><br><span class="line">锁类型  	他人可读	他人可写</span><br><span class="line">读锁	       是	      否</span><br><span class="line">写锁	       否	      否</span><br><span class="line"> </span><br><span class="line">结论：</span><br><span class="line">结合上表，所以对MyISAM表进行操作，会有以下情况： </span><br><span class="line">  <span class="number">1</span>、对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读	锁释放后，才会执行其它进程的写操作。 </span><br><span class="line">  <span class="number">2</span>、对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进	程的读写操作。</span><br><span class="line"> 简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞。</span><br></pre></td></tr></table></figure>
<h3 id="行锁-偏写"><a href="#行锁-偏写" class="headerlink" title="行锁(偏写)"></a>行锁(偏写)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特点:</span><br><span class="line">1. 偏向InnoDB存储引擎，开销大，加锁慢；</span><br><span class="line">2. 会出现死锁；</span><br><span class="line">3. 锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</span><br><span class="line">4. InnoDB 与 MyISAM的最大不同有两点：一是支持事务，二是采用了行级锁</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">并发事务处理带来的问题:</span><br><span class="line">1. 更新丢失    一个事务的更新覆盖了由其他事务所做的更新。</span><br><span class="line">2. 脏读</span><br><span class="line">3. 不可重复读 </span><br><span class="line">4. 幻读    事务A 读取到了事务B提交的新增数据，不符合隔离性。 </span><br><span class="line"></span><br><span class="line">Repeatable Read从理论的角度是会出现幻读的，所以MySQL内部通过多版本控制机制【实际上就是对读取到的数据加锁】解决这个问题。最后，用户才可以放心大胆使用Repeatable Read这个事务隔离级别。</span><br></pre></td></tr></table></figure>
<h4 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_innodb_lock (a <span class="type">int</span>(<span class="number">11</span>),b <span class="type">varchar</span>(<span class="number">16</span>))engine<span class="operator">=</span>innodb;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;b2&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;4000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;5000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">&#x27;6000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;7000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">&#x27;8000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">&#x27;9000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;b1&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> index test_innodb_a_ind <span class="keyword">on</span> test_innodb_lock(a);</span><br><span class="line"><span class="keyword">create</span> index test_innodb_lock_b_ind <span class="keyword">on</span> test_innodb_lock(b);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>行锁定基本演示</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/93.png" alt="93"></p>
</li>
<li><p>无索引行锁升级为表锁</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/94.png" alt="94"></p>
</li>
<li><p>Select也可以加锁</p>
<ol>
<li><p>读锁</p>
<blockquote>
<p>共享锁(Share Lock)<br>共享锁又称读锁，是读取操作创建的锁。其他用户可以并发读取数据，但任何事务都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。</p>
<p>如果事务T对数据A加上共享锁后，则其他事务只能对A再加共享锁，不能加排他锁。获准共享锁的事务只能读数据，不能修改数据。</p>
<p>用法  SELECT … LOCK IN SHARE MODE;</p>
<p>在查询语句后面增加 LOCK IN SHARE MODE ，MySQL会对查询结果中的每行都加共享锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请共享锁，否则会被阻塞。其他线程也可以读取使用了共享锁的表，而且这些线程读取的是同一个版本的数据。</p>
</blockquote>
</li>
<li><p>写锁</p>
<blockquote>
<p>排他锁（eXclusive Lock）<br>共享锁又称写锁，如果事务T对数据A加上排他锁后，则其他事务不能再对A加任任何类型的封锁。获得排他锁的事务既能读数据，又能修改数据。</p>
<p>用法  SELECT … FOR UPDATE;</p>
<p>在查询语句后面增加 FOR UPDATE ，MySQL会对查询结果中的每行都加排他锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请排他锁，否则会被阻塞。</p>
</blockquote>
</li>
</ol>
</li>
<li><p>间隙锁危害</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/95.png" alt="95"></p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【什么是间隙锁】</span><br><span class="line">当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做间隙GAP，InnoDB也会对这个间隙加锁，这种锁机制就是所谓的间隙锁GAP Lock 。</span><br><span class="line"></span><br><span class="line">【危害】</span><br><span class="line">因为Query执行过程中通过过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在。</span><br><span class="line">间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如何锁定一行    </p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/96.png" alt="96"></p>
</li>
</ul>
<h4 id="案例结论"><a href="#案例结论" class="headerlink" title="案例结论"></a>案例结论</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。</span><br><span class="line"></span><br><span class="line">当系统并发量较高的时候，Innodb的整体性能和MyISAM相比就会有比较明显的优势了。但是Innodb的行级锁定同样也有其脆弱的一面，当使用不当的时，可能会让Innodb的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</span><br></pre></td></tr></table></figure>
<h4 id="行锁分析"><a href="#行锁分析" class="headerlink" title="行锁分析"></a>行锁分析</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如何分析行锁定</span></span><br><span class="line">通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况</span><br><span class="line">MySQL<span class="operator">&gt;</span><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">对各个状态量的说明如下：</span><br><span class="line">Innodb_row_lock_current_waits： 当前正在等待锁定的数量；</span><br><span class="line">Innodb_row_lock_time：          从系统启动到现在锁定总时间长度；</span><br><span class="line">Innodb_row_lock_time_avg：      每次等待所花平均时间；</span><br><span class="line">Innodb_row_lock_time_max：      从系统启动到现在等待最常的一次所花的时间；</span><br><span class="line">Innodb_row_lock_waits：         系统启动后到现在总共等待的次数；</span><br><span class="line"></span><br><span class="line">对于这<span class="number">5</span>个状态变量，比较重要的主要是</span><br><span class="line">  Innodb_row_lock_time_avg  （等待平均时长），</span><br><span class="line">  Innodb_row_lock_waits     （等待总次数）</span><br><span class="line">  Innodb_row_lock_time      （等待总时长）</span><br><span class="line">尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手指定优化计。</span><br><span class="line"> </span><br><span class="line">最后可以通过 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.INNODB_TRX\G; 来查询正在被锁阻塞的<span class="keyword">sql</span>语句。</span><br></pre></td></tr></table></figure>
<h4 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁。</span><br><span class="line">尽可能较少检索条件，避免间隙锁</span><br><span class="line">尽量控制事务大小，减少锁定资源量和时间长度</span><br><span class="line">锁住某行后，尽量不要去调别的行或表，赶紧处理被锁住的行然后释放掉锁。</span><br><span class="line">涉及相同表的事务，对于调用表的顺序尽量保持一致。</span><br><span class="line">在业务环境允许的情况下,尽可能低级别事务隔离</span><br></pre></td></tr></table></figure>


<h2 id="第六章-MySQL事务的实现原理"><a href="#第六章-MySQL事务的实现原理" class="headerlink" title="第六章  MySQL事务的实现原理"></a>第六章  MySQL事务的实现原理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事务想要做到什么效果？按我理解，无非是要做到可靠性以及并发处理</span><br><span class="line">- 可靠性：数据库要保证当 insert 或 update 操作时抛异常或者数据库 crash 的时候需要保障数据的操作前后的一致，想要做到这个，我需要知道我修改之前和修改之后的状态，所以就有了 undo log 和 redo log。</span><br><span class="line">- 并发处理：也就是说当多个并发请求过来，并且其中有一个请求是对数据修改操作的时候会有影响，为了避免读到脏数据，所以需要对事务之间的读写进行隔离，至于隔离到啥程度得看业务系统的场景了，实现这个就得用MySQL 的隔离级别。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面首先讲实现事务功能的三个技术，分别是日志文件(redo log 和 undo log)，锁技术以及MVCC，然后再讲事务的实现原理，最后在做一个总结。</span><br><span class="line">- redo log 与 undo log介绍</span><br><span class="line">- MySQL锁技术以及MVCC基础</span><br><span class="line">- 事务的实现原理</span><br><span class="line">- 总结</span><br></pre></td></tr></table></figure>
<h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redo log叫做重做日志，是用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log）,前者是在内存中，后者在磁盘中。</span><br><span class="line"></span><br><span class="line">当事务提交之后会把所有修改信息都会存到该日志中。</span><br></pre></td></tr></table></figure>
<p>假设有个表叫做tb1(id,username) ，现在要插入数据（3，ceshi）</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/97.png" alt="97"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> balance <span class="keyword">from</span> bank <span class="keyword">where</span> name<span class="operator">=</span>&quot;zhangsan&quot;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 生成 重做日志 balance<span class="operator">=</span><span class="number">600</span></span><br><span class="line"><span class="keyword">update</span> bank <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">400</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 生成 重做日志 amount<span class="operator">=</span><span class="number">400</span></span><br><span class="line"><span class="keyword">update</span> finance <span class="keyword">set</span> amount <span class="operator">=</span> amount <span class="operator">+</span> <span class="number">400</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/98.png" alt="98"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redo log 有什么作用？</span><br><span class="line">MySQL 为了提升性能不会把每次的修改都实时同步到磁盘，而是会先存到Boffer Pool(缓冲池)里头，把这个当作缓存来用。然后使用后台线程去做缓冲池和磁盘之间的同步。</span><br><span class="line">那么问题来了，如果还没来的同步的时候宕机或断电了怎么办？还没来得及执行上面图中红色的操作。这样会导致丢部分已提交事务的修改信息！</span><br><span class="line">所以引入了redo log来记录已成功提交事务的修改信息，并且会把redo log持久化到磁盘，系统重启之后在读取redo log恢复最新数据。</span><br><span class="line"></span><br><span class="line">总结：redo log是用来恢复数据的,  用于保障已提交事务的持久化特性</span><br></pre></td></tr></table></figure>
<h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">undo log 叫做回滚日志，用于记录数据被修改前的信息。正好跟前面所说的重做日志所记录的相反，重做日志记录数据被修改后的信息。undo log主要记录的是数据的逻辑变化，为了在发生错误时回滚之前的操作，需要将之前的操作都记录下来，然后在发生错误时才可以回滚。</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/99.png" alt="99"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每次写入数据或者修改数据之前都会把修改前的信息记录到 undo log。</span><br><span class="line"></span><br><span class="line">undo log 有什么作用？</span><br><span class="line">undo log 记录事务修改之前版本的数据信息，假如由于系统错误或者rollback操作而回滚的话可以根据undo log的信息来进行回滚到没被修改前的状态。</span><br><span class="line"></span><br><span class="line">总结：undo log是用来回滚数据的，用于保障未提交事务的原子性</span><br></pre></td></tr></table></figure>

<h3 id="MySQL锁技术"><a href="#MySQL锁技术" class="headerlink" title="MySQL锁技术"></a>MySQL锁技术</h3><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">共享锁(shared lock), 又叫做&quot;读锁&quot;</span><br><span class="line">读锁是可以共享的，或者说多个读请求可以共享一把锁读数据，不会造成阻塞。</span><br><span class="line"></span><br><span class="line">排他锁(exclusive lock),又叫做&quot;写锁&quot;</span><br><span class="line">写锁会排斥其他所有获取锁的请求，一直阻塞，直到写入完成释放锁。</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/100.png" alt="100"></p>
<p>总结：通过读写锁，可以做到读读可以并行，但是不能做到写读，写写并行。 事务的隔离性就是根据读写锁来实现的！！！这个后面再说。</p>
<h3 id="MVCC基础"><a href="#MVCC基础" class="headerlink" title="MVCC基础"></a>MVCC基础</h3><h4 id="1-前提概要"><a href="#1-前提概要" class="headerlink" title="1. 前提概要"></a>1. 前提概要</h4><h5 id="什么是MVCC-？"><a href="#什么是MVCC-？" class="headerlink" title="什么是MVCC ？"></a>什么是MVCC ？</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MVCC，全称Multi-Version Concurrency Control，即多版本并发控制。</span><br><span class="line">MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。</span><br></pre></td></tr></table></figure>
<h5 id="什么是当前读和快照读？"><a href="#什么是当前读和快照读？" class="headerlink" title="什么是当前读和快照读？"></a>什么是当前读和快照读？</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在学习MVCC多版本并发控制之前，我们必须先了解一下，什么是MySQL InnoDB下的当前读和快照读?</span><br><span class="line"></span><br><span class="line">- 当前读</span><br><span class="line">像select lock in share mode (共享锁),   select for update ;   update,   insert ,  delete (排他锁) 这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</span><br><span class="line"></span><br><span class="line">- 快照读</span><br><span class="line">像不加锁的  select  操作就是快照读，即不加锁的非阻塞读；</span><br><span class="line">快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；</span><br><span class="line">之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于MVCC,  可以认为 MVCC 是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；</span><br><span class="line">快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本。</span><br><span class="line"></span><br><span class="line">说白了 MVCC 就是为了实现读-写冲突不加锁，而这个读指的就是快照读,  而非当前读，当前读实际上是一种加锁的操作，是悲观锁的实现。</span><br></pre></td></tr></table></figure>
<h5 id="当前读，快照读和MVCC的关系"><a href="#当前读，快照读和MVCC的关系" class="headerlink" title="当前读，快照读和MVCC的关系"></a>当前读，快照读和MVCC的关系</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">准确的说，MVCC多版本并发控制指的是 “维持一个数据的多个版本，使得读写操作没有冲突” 这么一个概念。仅仅是一个理想概念</span><br><span class="line"></span><br><span class="line">而在MySQL中，实现这么一个MVCC理想概念，我们就需要MySQL提供具体的功能去实现它，而快照读就是MySQL为我们实现MVCC理想模型的其中一个具体非阻塞读功能。而相对而言，当前读就是悲观锁的具体功能实现</span><br><span class="line"></span><br><span class="line">要说的再细致一些，快照读本身也是一个抽象概念。MVCC模型在MySQL中的具体实现则是由 3个隐式字段，undo日志 ，Read View 等去完成的，具体可以看下面的MVCC实现原理</span><br></pre></td></tr></table></figure>

<h5 id="MVCC能解决什么问题，好处是？"><a href="#MVCC能解决什么问题，好处是？" class="headerlink" title="MVCC能解决什么问题，好处是？"></a>MVCC能解决什么问题，好处是？</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据库并发场景有三种，分别为：</span><br><span class="line">- 读-读：不存在任何问题</span><br><span class="line">- 读-写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读</span><br><span class="line">- 写-写：有线程安全问题，可能会存在更新丢失问题，比如第一类更新丢失，第二类更新丢失</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MVCC带来的好处是？</span><br><span class="line">MVCC是一种用来解决读-写冲突的无锁并发控制，也就是为事务分配单向增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照。所以MVCC可以为数据库解决以下问题:</span><br><span class="line"></span><br><span class="line">- 在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写性能</span><br><span class="line">- 同时还可以解决脏读，幻读，不可重复读等事务隔离问题，但不能解决更新丢失问题</span><br></pre></td></tr></table></figure>

<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MVCC就是因为大牛们，不满意只让数据库采用悲观锁这样性能不佳的形式去解决读-写冲突问题，而提出的解决方案，所以在数据库中，因为有了MVCC，所以我们可以形成两个组合：</span><br><span class="line"></span><br><span class="line">- MVCC + 悲观锁</span><br><span class="line">  MVCC解决读写冲突，悲观锁解决写写冲突</span><br><span class="line">  </span><br><span class="line">- MVCC + 乐观锁</span><br><span class="line">  MVCC解决读写冲突，乐观锁解决写写冲突</span><br><span class="line">  这种组合的方式就可以最大程度的提高数据库并发性能，并解决读写冲突，和写写冲突导致的问题</span><br></pre></td></tr></table></figure>
<h4 id="2-MVCC的实现原理"><a href="#2-MVCC的实现原理" class="headerlink" title="2. MVCC的实现原理"></a>2. MVCC的实现原理</h4><p>MVCC的实现原理主要是依赖记录中的 3个隐式字段，undo日志 ，Read View 来实现。</p>
<p><strong>隐式字段</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">隐式字段：每行记录除了自定义的字段，还有数据库隐式定义的DB_TRX_ID, DB_ROLL_PTR, DB_ROW_ID等字段</span><br><span class="line"><span class="comment">-- DB_TRX_ID</span></span><br><span class="line">  <span class="number">6</span>byte，最近修改(修改<span class="operator">/</span>插入)事务ID：记录创建这条记录<span class="operator">/</span>最后一次修改该记录的事务ID</span><br><span class="line"><span class="comment">-- DB_ROLL_PTR</span></span><br><span class="line">  <span class="number">7</span>byte，回滚指针，指向这条记录的上一个版本（存储于<span class="keyword">rollback</span> segment里）</span><br><span class="line"><span class="comment">-- DB_ROW_ID</span></span><br><span class="line">  <span class="number">6</span>byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</span><br><span class="line"><span class="comment">-- 实际还有一个删除flag隐藏字段, 记录被更新或删除并不代表真的删除，而是删除flag变了</span></span><br><span class="line"></span><br><span class="line">如图，DB_ROW_ID  是数据库默认为该行记录生成的唯一隐式主键，DB_TRX_ID  是当前操作该记录的事务ID, 而  DB_ROLL_PTR  是一个回滚指针，用于配合 undo 日志，指向上一个旧版本。</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/108.png" alt="108"></p>
<p><strong>undo日志</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">undo log主要分为两种：</span><br><span class="line">1. insert undo log</span><br><span class="line">代表事务在insert新记录时产生的undo log,  只在事务回滚时需要，并且在事务提交后可以被立即丢弃</span><br><span class="line"></span><br><span class="line">2. update undo log</span><br><span class="line">事务在进行update或delete时产生的undo log; 不仅在事务回滚时需要，在快照读时也需要；所以不能随便删除，只有在快照读或事务回滚不涉及该日志时，对应的日志才会被purge线程统一清除</span><br><span class="line"></span><br><span class="line">3. purge</span><br><span class="line">为了实现InnoDB的MVCC机制，更新或者删除操作都只是设置一下老记录的deleted_bit，并不真正将过时的记录删除。</span><br><span class="line"></span><br><span class="line">为了节省磁盘空间，InnoDB有专门的purge线程来清理deleted_bit为true的记录。为了不影响MVCC的正常工作，purge线程自己也维护了一个read view（这个read view相当于系统中最老活跃事务的read view）; 如果某个记录的deleted_bit为true，并且 DB_TRX_ID 相对于purge线程的read view可见，那么这条记录可以被安全清除。</span><br></pre></td></tr></table></figure>
<p>对MVCC有帮助的实质是 update undo log ，undo log 实际上就是存在 rollback segment 中旧记录链，它的执行流程如下：</p>
<ol>
<li><p>比如一个有个事务插入person表插入了一条新记录，记录如下，name为Jerry,  age为24岁，隐式主键是1，事务ID和回滚指针，我们假设为NULL</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/109.png" alt="109"></p>
</li>
<li><p>现在来了一个事务1对该记录的 name 做出了修改，改为 Tom</p>
<ul>
<li>在事务1修改该行数据时，数据库会先对该行加排他锁</li>
<li>然后把该行数据拷贝到undo log中，作为旧记录，即在undo log中有当前行的拷贝副本</li>
<li>拷贝完毕后，修改该行name为Tom，并且修改隐藏字段的事务ID为当前事务1的ID, 我们默认从1开始，之后递增，回滚指针指向拷贝到undo log的副本记录，既表示我的上一个版本就是它</li>
<li>事务提交后，释放锁</li>
</ul>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/110.png" alt="110"></p>
</li>
<li><p>又来了个事务2修改person表的同一个记录，将age修改为30岁</p>
<ul>
<li>在事务2修改该行数据时，数据库也先为该行加锁</li>
<li>然后把该行数据拷贝到undo log中，作为旧记录，发现该行记录已经有undo log了，那么最新的旧数据作为链表的表头，插在该行记录的undo log最前面</li>
<li>修改该行age为30岁，并且修改隐藏字段的事务ID为当前事务2的ID, 那就是2，回滚指针指向刚刚拷贝到undo log的副本记录</li>
<li>事务提交，释放锁</li>
</ul>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/111.png" alt="111"></p>
<p>从上面，我们就可以看出，不同事务或者相同事务的对同一记录的修改，会导致该记录的 undo log 成为一条记录版本的链表，undo log 的链首就是最新的旧记录，链尾就是最早的旧记录（当然就像之前说的该 undo log 的节点可能是会被 purge 线程清除掉，像图中的第一条 insert undo log，其实在事务提交之后可能就被删除丢失了，不过这里为了演示，所以还放在这里）</p>
</li>
</ol>
<p><strong>Read View(读视图)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Read View 就是事务进行快照读操作的时候生产的读视图 (Read View)，在该事务执行快照读的那一刻，会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的ID (当每个事务开启时，都会被分配一个ID,  这个ID是递增的，所以越新的事务，ID值越大)。</span><br><span class="line"></span><br><span class="line">Read View主要是用来做可见性判断的, 即当我们某个事务执行快照读的时候，对该记录创建一个Read View读视图，把它作为条件用来判断当前事务能够看到哪个版本的数据，既可能是当前最新的数据，也有可能是该行记录的undo log里面的某个版本的数据。</span><br><span class="line"></span><br><span class="line">Read View遵循一个可见性算法，主要是将 要被修改数据的最新记录中的 DB_TRX_ID（即当前事务ID）取出来，与系统当前其他活跃事务的ID去对比（由Read View维护），如果DB_TRX_ID 跟 Read View 的属性做了某些比较，不符合可见性，那就通过DB_ROLL_PTR 回滚指针去取出 Undo Log 中的 DB_TRX_ID 再比较，即遍历链表的DB_TRX_ID（从链首到链尾，即从最近的一次修改查起），直到找到满足特定条件的 DB_TRX_ID, 那么这个DB_TRX_ID 所在的旧记录就是当前事务能看见的最新老版本。</span><br></pre></td></tr></table></figure>
<p><strong>那么这个判断条件是什么呢？</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在展示之前，先简化一下Read View，可以把 Read View 简单的理解成有三个全局属性</span><br><span class="line">1. tx_list   一个数值列表，用来维护 Read View 生成时刻系统正活跃的事务 ID</span><br><span class="line">2. up_limit_id  记录 tx_list 列表中事务 ID 最小的 ID</span><br><span class="line">3. low_limit_id  ReadView 生成时刻系统尚未分配的下一个事务ID，即目前已出现过的事务ID的最大值+1</span><br><span class="line"></span><br><span class="line">1. 首先比较 DB_TRX_ID  &lt;  up_limit_id,  如果小于，则当前事务能看到 DB_TRX_ID 所在的记录，如果大于等于    进入下一个判断</span><br><span class="line">2. 接下来判断 DB_TRX_ID  大于等于  low_limit_id ,  如果大于等于则代表 DB_TRX_ID 所在的记录在 Read      View生成后才出现的，那对当前事务肯定不可见，如果小于则进入下一个判断</span><br><span class="line">3. 判断 DB_TRX_ID 是否在活跃事务之中，tx_list.contains(DB_TRX_ID)，如果在，则代表我Read View生成时      刻，你这个事务还在活跃，还没有Commit，你修改的数据，我当前事务也是看不见的；如果不在，则说明你这个事    务在Read View生成之前就已经Commit了，修改的结果当前事务是能看见的。</span><br></pre></td></tr></table></figure>
<h5 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h5><p>在了解了隐式字段，undo log， 以及Read View之后，就可以来看看MVCC实现的整体流程是怎么样了</p>
<ul>
<li><p>当事务2 对某行数据执行了快照读，数据库为该行数据生成一个 Read View 读视图，假设当前事务 ID 为2，此时还有事务1 和事务3 在活跃中，事务4 在事务2 快照读前一刻提交更新了，所以 Read View 记录了系统当前活跃事务1，3的ID，维护在一个列表上，假设我们称为tx_list。</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/112.png" alt="112"></p>
</li>
<li><p>Read View不仅仅会通过一个列表tx_list来维护事务 2 执行快照读那刻系统正活跃的事务ID，还会有两个属性up_limit_id（记录tx_list列表中事务ID最小的ID），low_limit_id(记录tx_list列表中事务ID最大的ID，也有人说目前已出现过的事务ID的最大值+1，我更倾向于后者；所以在这里 up_limit_id 就是 1，low_limit_id 就是 4 + 1 = 5，tx_list 集合的值是 1,3，Read View 如下图。<br><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/113.png" alt="113"></p>
</li>
<li><p>我们的例子中，只有事务4 修改过该行记录，并在事务2 执行快照读前，就提交了事务，所以当前该行的 undo log 如下图所示；我们的事务2 在快照读该行记录的时候，就会拿该行记录的 DB_TRX_ID 去跟up_limit_id, low_limit_id 和活跃事务ID 列表 (tx_list) 进行比较，判断当前事务2 能看到该记录的版本是哪个。</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/114.png" alt="114"></p>
</li>
<li><p>所以先拿该记录 DB_TRX_ID 字段记录的事务ID 4 去跟 Read View 的的 up_limit_id 比较，看4是否小于up_limit_id(1)，所以不符合条件，继续判断 4 是否大于等于  low_limit_id(5)， 也不符合条件，最后判断4是否处于  tx_list  中的活跃事务, 最后发现事务ID 为4 的事务不在当前活跃事务列表中, 符合可见性条件，所以事务4 修改后提交的最新结果对事务2 快照读时是可见的，所以事务2 能读到的最新数据记录是 事务4 提交的版本，而事务4 提交的版本也是全局角度上最新的版本。</p>
</li>
<li><p>也正是 Read View 生成时机的不同，从而造成 RC,  RR 级别下快照读的结果的不同。</p>
</li>
</ul>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/115.png" alt="115"></p>
<h5 id="放大图后看过程"><a href="#放大图后看过程" class="headerlink" title="放大图后看过程"></a>放大图后看过程</h5><p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/mvcc1.png" alt="mvcc1"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/mvcc2.png" alt="mvcc2"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/mvcc3.png" alt="mvcc3"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/mvcc4.png" alt="mvcc4"></p>
<h4 id="3-MVCC相关问题"><a href="#3-MVCC相关问题" class="headerlink" title="3. MVCC相关问题"></a>3. MVCC相关问题</h4><h5 id="RR-是如何在-RC-级的基础上解决不可重复读的？"><a href="#RR-是如何在-RC-级的基础上解决不可重复读的？" class="headerlink" title="RR 是如何在 RC 级的基础上解决不可重复读的？"></a>RR 是如何在 RC 级的基础上解决不可重复读的？</h5><p>当前读和快照读在RR级别下的区别：</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/116.png" alt="116"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/117.png" alt="117"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在第二张表中，事务B 在事务A 提交后的快照读和当前读都是实时的新数据400，这是为什么呢？</span><br><span class="line">- 这里与第一张表的唯一区别仅仅是表1 的事务B 在事务A 修改金额前快照读过一次金额数据，而表2 的事务B在事务A修改金额前没有进行过快照读。</span><br><span class="line"></span><br><span class="line">- 所以我们知道事务中快照读的结果是非常依赖该事务首次出现快照读的地方，即某个事务中首次出现快照读的地方非常关键，它有决定该事务后续快照读结果的能力。</span><br><span class="line"></span><br><span class="line">- 这里测试的是更新，同时删除和更新也是一样的，如果事务B 的快照读是在事务A 操作之后进行的，事务B的快照读也是能读取到最新的数据的。</span><br></pre></td></tr></table></figure>

<h5 id="RC-RR级别下的-InnoDB-快照读有什么不同？"><a href="#RC-RR级别下的-InnoDB-快照读有什么不同？" class="headerlink" title="RC,  RR级别下的 InnoDB 快照读有什么不同？"></a>RC,  RR级别下的 InnoDB 快照读有什么不同？</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正是Read View生成时机的不同，从而造成RC, RR级别下快照读的结果的不同。</span><br><span class="line"></span><br><span class="line">- 在 RR 级别下的某个事务对某条记录的第一次快照读会创建一个快照及Read View,  将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，还是使用的是同一个Read View，所以只要当前事务在其他事务提交更新之前使用过快照读，那么之后的快照读使用的都是同一个Read View，所以对之后的修改不可见；</span><br><span class="line"></span><br><span class="line">- 即RR级别下，快照读生成 Read View 时，Read View 会记录此时所有其他活动事务的快照，这些事务的修改对于当前事务都是不可见的。而早于 Read View 创建的事务所做的修改均是可见。</span><br><span class="line"></span><br><span class="line">- 而在RC级别下的事务中，每次快照读都会新生成一个快照和 Read View , 这就是我们在 RC 级别下的事务中可以看到别的事务提交的更新的原因。</span><br><span class="line"></span><br><span class="line">总之在 RC 隔离级别下，是每个快照读都会生成并获取最新的 Read View；而在 RR 隔离级别下，则是同一个事务中的第一个快照读才会创建 Read View , 之后的快照读获取的都是同一个 Read View。</span><br></pre></td></tr></table></figure>
<h3 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面讲的重做日志，回滚日志以及锁技术就是实现事务的基础。</span><br><span class="line">- 事务的原子性是通过 undo log 来实现的</span><br><span class="line">- 事务的持久性性是通过 redo log 来实现的</span><br><span class="line">- 事务的隔离性是通过 (读写锁+MVCC)来实现的</span><br><span class="line">- 而事务的终极大 boss 一致性是通过原子性，持久性，隔离性来实现的！！！</span><br><span class="line">原子性，持久性，隔离性折腾半天的目的也是为了保障数据的一致性！</span><br><span class="line">总之，ACID只是个概念，事务最终目的是要保障数据的可靠性，一致性。</span><br></pre></td></tr></table></figure>
<h4 id="原子性的实现"><a href="#原子性的实现" class="headerlink" title="原子性的实现"></a>原子性的实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是原子性：一个事务必须被视为不可分割的最小工作单位，一个事务中的所有操作要么全部成功提交，要么全部失败回滚，对于一个事务来说不可能只执行其中的部分操作，这就是事务的原子性。</span><br><span class="line"></span><br><span class="line">那么数据库是怎么实现的呢？就是通过回滚操作。所谓回滚操作就是当发生错误异常或者显式的执行rollback语句时需要把数据还原到原先的模样，所以这时候就需要用到undo log来进行回滚，接下来看一下undo log在实现事务原子性时怎么发挥作用的。</span><br></pre></td></tr></table></figure>
<h5 id="1-undo-log-的生成"><a href="#1-undo-log-的生成" class="headerlink" title="1. undo log 的生成"></a>1. undo log 的生成</h5><p>假设有两个表  bank 和  finance，表中原始数据如图所示，当进行插入，删除以及更新操作时生成的 undo log 如下面图所示：<img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/99.png" alt="99"></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/101.png" alt="101"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从上图可以了解到数据的变更都伴随着回滚日志的产生：</span><br><span class="line">(1) 产生了被修改前数据(zhangsan,1000) 的回滚日志</span><br><span class="line">(2) 产生了被修改前数据(zhangsan,0) 的回滚日志</span><br><span class="line"></span><br><span class="line">根据上面流程可以得出如下结论：</span><br><span class="line">1. 每条数据变更(insert&#x2F;update&#x2F;delete)都伴随一条undo log的生成，并且回滚日志必须先于数据持久化到磁盘上</span><br><span class="line">2. 所谓的回滚就是根据回滚日志做逆向操作，比如delete的逆向操作为insert，insert的逆向操作为delete，update的逆向为update等。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>思考：为什么先写日志后写数据库？—稍后做解释</p>
</blockquote>
<h5 id="2-根据undo-log-进行回滚"><a href="#2-根据undo-log-进行回滚" class="headerlink" title="2. 根据undo log 进行回滚"></a>2. 根据undo log 进行回滚</h5><p>为了做到同时成功或者失败，当系统发生错误或者执行rollback操作时需要根据undo log 进行回滚</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/102.png" alt="102"></p>
<p>回滚操作就是要还原到原来的状态，undo log记录了数据被修改前的信息以及新增和被删除的数据信息，根据undo log生成回滚语句，比如：</p>
<ul>
<li>如果在回滚日志里有新增数据记录，则生成删除该条的语句</li>
<li>如果在回滚日志里有删除数据记录，则生成生成该条的语句</li>
<li>如果在回滚日志里有修改数据记录，则生成修改到原先数据的语句</li>
</ul>
<h4 id="持久性的实现"><a href="#持久性的实现" class="headerlink" title="持久性的实现"></a>持久性的实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事务一旦提交，其所做的修改会永久保存到数据库中，此时即使系统崩溃修改的数据也不会丢失。</span><br><span class="line"></span><br><span class="line">MySQL的表数据存放在磁盘上，因此想要存取的时候都要经历磁盘IO，即使是使用SSD磁盘IO也是非常消耗性能的。</span><br><span class="line">为了提升性能InnoDB提供了缓冲池(Buffer Pool)，Buffer Pool中包含了磁盘数据页的映射，可以当做缓存来使用：</span><br><span class="line">- 读数据：会首先从缓冲池中读取，如果缓冲池中没有，则从磁盘读取再放入缓冲池；</span><br><span class="line">- 写数据：会首先写入缓冲池，缓冲池中的数据会定期同步到磁盘中；</span><br><span class="line">这种缓冲池的措施在性能方面带来了质的飞跃，但也带来了新的问题，当MySQL系统宕机，断电时可能会丢数据！</span><br><span class="line">因为数据已经提交，但此时是在缓冲池里，还没来得及在磁盘持久化，所以我们急需一种机制，需要存一下已提交事务的数据，为恢复数据使用。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">于是 redo log就派上用场了。</span><br><span class="line">事务开始之后就产生redo log，redo log的落盘并不是随着事务的提交才写入的，而是在事务的执行过程中，便开始写入redo log文件中。</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/98.png" alt="98"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">既然redo log也需要存储，也涉及磁盘IO为啥还用它？</span><br><span class="line">- redo log 的存储是顺序存储，而缓存同步是随机操作。</span><br><span class="line">- 缓存同步是以数据页为单位的，每次传输的数据大小大于redo log。</span><br></pre></td></tr></table></figure>

<h4 id="隔离性实现"><a href="#隔离性实现" class="headerlink" title="隔离性实现"></a>隔离性实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">隔离性是事务ACID特性里最复杂的一个。在SQL标准里定义了四种隔离级别，每一种级别都规定一个事务中的修改，哪些是事务之间可见的，哪些是不可见的。级别越低的隔离级别可以执行越高的并发，但同时实现复杂度以及开销也越大。</span><br><span class="line"></span><br><span class="line">MySQL 隔离级别有以下四种（级别由低到高）：</span><br><span class="line">- READ UNCOMMITED </span><br><span class="line">- READ COMMITED </span><br><span class="line">- REPEATABLE READ </span><br><span class="line">- SERIALIZABLE</span><br><span class="line"></span><br><span class="line">只要彻底理解了隔离级别以及实现原理就相当于理解了ACID里的隔离性。</span><br><span class="line">前面说过原子性，隔离性，持久性的目的都是为了要做到一致性，但隔离性跟其他两个有所区别。</span><br><span class="line">原子性和持久性是为了要实现数据的可性保障靠，比如要做到宕机后的恢复，以及错误后的回滚。</span><br><span class="line">那么隔离性是要做到什么呢？隔离性是要管理多个并发读写请求的访问顺序。这种顺序包括串行或并行。说明一点，写请求不仅仅是指insert操作，又包括update操作。</span><br><span class="line"></span><br><span class="line">总之，从隔离性的实现可以看出这是一场数据的可靠性与性能之间的权衡。</span><br><span class="line">- 可靠性性高的，并发性能低(比如 Serializable)</span><br><span class="line">- 可靠性低的，并发性能高(比如 Read Uncommited)</span><br></pre></td></tr></table></figure>

<h5 id="READ-UNCOMMITTED"><a href="#READ-UNCOMMITTED" class="headerlink" title="READ UNCOMMITTED"></a>READ UNCOMMITTED</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在READ UNCOMMITTED隔离级别下，事务可以读取未提交的数据，造成脏读。</span><br><span class="line">- 优点：读写并行，性能高</span><br><span class="line">- 缺点：造成脏读</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/103.png" alt="103"></p>
<h5 id="READ-COMMITTED"><a href="#READ-COMMITTED" class="headerlink" title="READ COMMITTED"></a>READ COMMITTED</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个事务在他提交之前的所有修改，对其他事务都是不可见的。其他事务能读到已提交的修改变化。</span><br><span class="line">InnoDB中的 READ COMMITTED，使用排它锁，读取数据不加锁而是使用MVCC机制。该级别会产生不可重读以及幻读。</span><br></pre></td></tr></table></figure>
<p><strong>什么是不可重读？</strong></p>
<p>在一个事务内多次读取的结果不一样。</p>
<p><strong>为什么会产生不可重复读？</strong></p>
<p>这跟 READ COMMITTED 级别下的MVCC机制有关系，在该隔离级别下每次 select的时候新生成一个版本号，所以每次select读的不是一个副本而是不同的副本。在每次select之间有其他事务更新了我们读取的数据并提交了，那就出现了不可重复读。</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/104.png" alt="104"></p>
<h5 id="REPEATABLE-READ-默认"><a href="#REPEATABLE-READ-默认" class="headerlink" title="REPEATABLE READ(默认)"></a>REPEATABLE READ(默认)</h5><p>在一个事务内的多次读取的结果是一样的。这种级别下可以避免脏读，不可重复读。MySQL有两种机制可以达到这种隔离级别的效果，分别是采用读写锁以及MVCC。</p>
<p><strong>采用读写锁实现：</strong></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/105.png" alt="105"></p>
<p>为什么能重复读？只要没释放读锁，再次读的时候还是可以读到第一次读的数据。</p>
<ul>
<li>优点：实现起来简单</li>
<li>缺点：无法做到读写并行</li>
</ul>
<p><strong>采用MVCC实现：</strong></p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/106.png" alt="106"></p>
<p>为什么能重复读？因为多次读取只生成一个版本，读到的自然是相同数据。</p>
<ul>
<li>优点：读写并行</li>
<li>缺点：实现的复杂度高</li>
</ul>
<p>但是在该隔离级别下仍会存在幻读的问题。</p>
<h5 id="SERIALIZABLE"><a href="#SERIALIZABLE" class="headerlink" title="SERIALIZABLE"></a>SERIALIZABLE</h5><p>该隔离级别理解起来最简单，实现也最简单。在隔离级别下除了不会造成数据不一致问题，没其他优点。</p>
<p><img src="/2021/01/25/MySQL%E9%AB%98%E7%BA%A7/107.png" alt="107"></p>
<h4 id="一致性的实现"><a href="#一致性的实现" class="headerlink" title="一致性的实现"></a>一致性的实现</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数据库总是从一个一致性的状态转移到另一个一致性的状态.</span></span><br><span class="line"><span class="comment">-- 下面举个例子:zhangsan 从银行卡转400到理财账户</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> balance <span class="keyword">from</span> bank <span class="keyword">where</span> name<span class="operator">=</span>&quot;zhangsan&quot;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 生成 重做日志 balance<span class="operator">=</span><span class="number">600</span></span><br><span class="line"><span class="keyword">update</span> bank <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">400</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 生成 重做日志 amount<span class="operator">=</span><span class="number">400</span></span><br><span class="line"><span class="keyword">update</span> finance <span class="keyword">set</span> amount <span class="operator">=</span> amount <span class="operator">+</span> <span class="number">400</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 假如执行完 update bank set balance &#x3D; balance - 400; 发生异常了，银行卡的钱也不能平白无辜的减少，而是回滚到最初状态。</span><br><span class="line">2. 事务提交之后，缓冲池还没同步到磁盘的时候宕机了，这也是不能接受的，应该在重启的时候恢复并持久化。</span><br><span class="line">3. 假如有并发事务请求的时候也应该做好事务之间的可见性问题，避免造成脏读，不可重复读，幻读等。在涉及并发的情况下往往在性能和一致性之间做平衡，做一定的取舍，所以隔离性也是对一致性的一种破坏。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL整理</title>
    <url>/2021/01/24/MySQL%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="MySQL整理"><a href="#MySQL整理" class="headerlink" title="MySQL整理"></a>MySQL整理</h1><h2 id="第1篇：MySQL基础知识"><a href="#第1篇：MySQL基础知识" class="headerlink" title="第1篇：MySQL基础知识"></a>第1篇：MySQL基础知识</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql登录命令</span></span><br><span class="line">mysql <span class="operator">-</span>h ip <span class="operator">-</span>P 端口 <span class="operator">-</span>u 用户名 <span class="operator">-</span>p</span><br><span class="line"><span class="comment">-- 查看数据库版本, 用于在未登录情况下，查看mysql版本</span></span><br><span class="line">mysql <span class="operator">-</span>V </span><br><span class="line"><span class="comment">-- 登录情况下，查看版本</span></span><br><span class="line"><span class="keyword">select</span> version(); </span><br><span class="line"><span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="comment">-- 进入指定的库</span></span><br><span class="line">use 库名; </span><br><span class="line"><span class="comment">-- 显示当前库中所有的表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="comment">-- 查看其他库中所有的表</span></span><br><span class="line"><span class="keyword">show</span> tables <span class="keyword">from</span> 库名;</span><br><span class="line"><span class="comment">-- 查看表的创建语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> 表名;</span><br><span class="line"><span class="comment">-- 查看当前所在库</span></span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"><span class="comment">-- 查看当前mysql支持的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br><span class="line"><span class="comment">-- 查看系统变量及其值</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES;</span><br><span class="line"><span class="comment">-- 查看某个系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">like</span> <span class="string">&#x27;变量名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 不区分大小写，但建议关键字大写，表名、列名小写</span><br><span class="line"><span class="number">2.</span> 每条命令最好用英文分号结尾</span><br><span class="line"><span class="number">3.</span> 每条命令根据需要，可以进行缩进或换行</span><br><span class="line"><span class="number">4.</span> 注释   </span><br><span class="line">	 单行注释：#注释文字</span><br><span class="line">     单行注释：<span class="comment">-- 注释文字 ，注意， 这里需要加空格</span></span><br><span class="line">   	 多行注释：<span class="comment">/* 注释文字 */</span></span><br></pre></td></tr></table></figure>
<h3 id="SQL的语言分类"><a href="#SQL的语言分类" class="headerlink" title="SQL的语言分类"></a>SQL的语言分类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DQL（Data Query Language）：数据查询语言 select 相关语句</span><br><span class="line">DML（Data Manipulate Language）：数据操作语言 insert 、update、delete 语句</span><br><span class="line">DDL（Data Define Languge）：数据定义语言 create、drop、alter 语句</span><br><span class="line">TCL（Transaction Control Language）：事务控制语言 set autocommit&#x3D;0、start transaction、savepoint、commit、rollback</span><br></pre></td></tr></table></figure>
<h3 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 1NF：字段不可分;</span><br><span class="line">- 2NF：有主键，非主键字段都完全依赖主键;</span><br><span class="line">例：A(仓库号， 设备号， 数量， 地点) </span><br><span class="line">关键字是（仓库号， 设备号） 存在部份依赖仓库号 --&gt; 地点</span><br><span class="line">分解： B(仓库号， 设备号， 数量)   B(仓库号，地点)</span><br><span class="line">- 3NF：非主键字段不能相互依赖;（消除非主属性对主属性的传递依赖）</span><br><span class="line">例：A(仓库号，所在省，所在城市)</span><br><span class="line">所在城市 --&gt; 所在省 --&gt; 仓库号</span><br><span class="line">分解： B(仓库号，所在城市)  B(省，城市)</span><br></pre></td></tr></table></figure>


<h2 id="第2篇：MySQL中数据类型"><a href="#第2篇：MySQL中数据类型" class="headerlink" title="第2篇：MySQL中数据类型"></a>第2篇：MySQL中数据类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主要包括以下五大类</span><br><span class="line">- 整数类型： bit 、bool 、tinyint 、smallint 、mediumint 、int 、bigint</span><br><span class="line">- 浮点数类型： float 、double 、decimal</span><br><span class="line">- 字符串类型： char 、varchar 、tinyblob 、blob 、mediumblob 、longblob 、tinytext 、text 			、mediumtext 、longtext</span><br><span class="line">- 日期类型： Date 、DateTime 、TimeStamp 、Time 、Year</span><br><span class="line">- 其他数据类型：暂不介绍，用的比较少。</span><br></pre></td></tr></table></figure>

<h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/1.png" alt="1"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有些定义整型的写法是int(11)，这种写法个人感觉在开发过程中没有什么用途， int(N) 需要记住两点：</span></span><br><span class="line"><span class="comment">1. 无论N等于多少，int永远占4个字节</span></span><br><span class="line"><span class="comment">2. N表示显示宽度，不足的用0补足，超过的无视长度而直接显示整个数字，</span></span><br><span class="line"><span class="comment">但这要整型设置了unsigned zerofill才有效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test3 ( </span><br><span class="line">  `a` <span class="type">int</span>, </span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">5</span>), </span><br><span class="line">  `c` <span class="type">int</span>(<span class="number">5</span>) unsigned, </span><br><span class="line">  `d` <span class="type">int</span>(<span class="number">5</span>) zerofill, </span><br><span class="line">  `e` <span class="type">int</span>(<span class="number">5</span>) unsigned zerofill, </span><br><span class="line">  `f` <span class="type">int</span> zerofill, </span><br><span class="line">  `g` <span class="type">int</span> unsigned zerofill ); </span><br><span class="line">  Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec) </span><br><span class="line">  </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test3 <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>), (<span class="number">12345</span>,<span class="number">12345</span>,<span class="number">12345</span>,<span class="number">12345</span>,<span class="number">12345</span>,<span class="number">12345</span>,<span class="number">12345</span>); </span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec) Records: <span class="number">3</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test3;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+-------+-------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> a     <span class="operator">|</span> b     <span class="operator">|</span> c     <span class="operator">|</span> d     <span class="operator">|</span> e     <span class="operator">|</span> f          <span class="operator">|</span> g          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+-------+-------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> <span class="number">00001</span> <span class="operator">|</span> <span class="number">00001</span> <span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">11</span> <span class="operator">|</span>    <span class="number">11</span> <span class="operator">|</span>    <span class="number">11</span> <span class="operator">|</span> <span class="number">00011</span> <span class="operator">|</span> <span class="number">00011</span> <span class="operator">|</span> <span class="number">0000000011</span> <span class="operator">|</span> <span class="number">0000000011</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12345</span> <span class="operator">|</span> <span class="number">12345</span> <span class="operator">|</span> <span class="number">12345</span> <span class="operator">|</span> <span class="number">12345</span> <span class="operator">|</span> <span class="number">12345</span> <span class="operator">|</span> <span class="number">0000012345</span> <span class="operator">|</span> <span class="number">0000012345</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+-------+-------+------------+------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">int(5) 输出宽度不满5时，前面用0来进行填充</span></span><br><span class="line"><span class="comment">int(n) 中的n省略的时候，宽度为对应类型无符号最大值的十进制的长度，如bigint无符号最大值为</span></span><br><span class="line"><span class="comment">18446744073709551615 ；长度是20位。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/2.png" alt="2"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">float数值类型用于表示单精度浮点数值，而double数值类型用于表示双精度浮点数值，float和double都是浮点型，而decimal是定点型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">浮点型和定点型可以用类型名称后加（M，D）来表示，M表示该值的总共长度，D表示小数点后面的长度，M和D又称为精度和标度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">float和double在不指定精度时，默认会按照实际的精度显示，而DECIMAL在不指定精度时，默认整数为10，小数为0。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">create</span> <span class="keyword">table</span> test5(a <span class="type">float</span>(<span class="number">5</span>,<span class="number">2</span>),b <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>),c <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test5 <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2.1</span>,<span class="number">2.1</span>,<span class="number">2.1</span>),(<span class="number">3.123</span>,<span class="number">3.123</span>,<span class="number">3.123</span>), (<span class="number">4.125</span>,<span class="number">4.125</span>,<span class="number">4.125</span>),(<span class="number">5.115</span>,<span class="number">5.115</span>,<span class="number">5.115</span>),(<span class="number">6.126</span>,<span class="number">6.126</span>,<span class="number">6.126</span>),(<span class="number">7.116</span>,<span class="number">7.116</span>,<span class="number">7.116</span>), (<span class="number">8.1151</span>,<span class="number">8.1151</span>,<span class="number">8.1151</span>),(<span class="number">9.1251</span>,<span class="number">9.1251</span>,<span class="number">9.1251</span>),(<span class="number">10.11501</span>,<span class="number">10.11501</span>,<span class="number">10.11501</span>), (<span class="number">11.12501</span>,<span class="number">11.12501</span>,<span class="number">11.12501</span>);</span><br><span class="line">Query OK, <span class="number">11</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">11</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">9</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+</span></span><br><span class="line"><span class="operator">|</span> a     <span class="operator">|</span> b     <span class="operator">|</span> c     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1.00</span> <span class="operator">|</span>  <span class="number">1.00</span> <span class="operator">|</span> <span class="number">1.00</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2.10</span> <span class="operator">|</span>  <span class="number">2.10</span> <span class="operator">|</span> <span class="number">2.10</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3.12</span> <span class="operator">|</span>  <span class="number">3.12</span> <span class="operator">|</span> <span class="number">3.12</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4.12</span> <span class="operator">|</span>  <span class="number">4.12</span> <span class="operator">|</span> <span class="number">4.13</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5.12</span> <span class="operator">|</span>  <span class="number">5.12</span> <span class="operator">|</span> <span class="number">5.12</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6.13</span> <span class="operator">|</span>  <span class="number">6.13</span> <span class="operator">|</span> <span class="number">6.13</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7.12</span> <span class="operator">|</span>  <span class="number">7.12</span> <span class="operator">|</span> <span class="number">7.12</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8.12</span> <span class="operator">|</span>  <span class="number">8.12</span> <span class="operator">|</span> <span class="number">8.12</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9.13</span> <span class="operator">|</span>  <span class="number">9.13</span> <span class="operator">|</span> <span class="number">9.13</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10.12</span> <span class="operator">|</span> <span class="number">10.12</span> <span class="operator">|</span> <span class="number">10.12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11.13</span> <span class="operator">|</span> <span class="number">11.13</span> <span class="operator">|</span> <span class="number">11.13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.07</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 结果说明（注意看）：</span></span><br><span class="line"><span class="comment">c是decimal类型，认真看一下输入和输出，发现decimal采用的是四舍五入。认真看一下 a 和 b 的输入和输出，不是四舍五入，float和double采用的是四舍六入五成双，decimal插入的数据超精度之后会触发警告。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 什么是四舍六入五成双？</span></span><br><span class="line"><span class="comment">就是5以下舍弃,5以上进位，如果需要处理数字为5的时候，需要看5后面是否还有不为0的任何数字，如果有，则直接进位，如果没有，需要看5前面的数字，若是奇数则进位，若是偶数则将5舍掉。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test6(a <span class="type">float</span>,b <span class="keyword">double</span>,c <span class="type">decimal</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test6 <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">1.234</span>,<span class="number">1.234</span>,<span class="number">1.4</span>),(<span class="number">1.234</span>,<span class="number">0.01</span>,<span class="number">1.5</span>);</span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.09</span> sec)</span><br><span class="line">Records: <span class="number">3</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test6;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---+</span></span><br><span class="line"><span class="operator">|</span> a     <span class="operator">|</span> b     <span class="operator">|</span> c <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1.234</span> <span class="operator">|</span> <span class="number">1.234</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1.234</span> <span class="operator">|</span>  <span class="number">0.01</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.06</span> sec)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 说明：</span></span><br><span class="line"><span class="comment">a和b的数据正确插入，而c被截断了</span></span><br><span class="line"><span class="comment">浮点数float、double如果不写精度和标度，则会按照实际显示</span></span><br><span class="line"><span class="comment">decimal不写精度和标度，小数点后面的会进行四舍五入，并且插入时会有警告!</span></span><br><span class="line"><span class="comment">*</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">sum</span>(a),<span class="built_in">sum</span>(b),<span class="built_in">sum</span>(c) <span class="keyword">from</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">sum</span>(a) <span class="operator">|</span> <span class="built_in">sum</span>(b) <span class="operator">|</span> <span class="built_in">sum</span>(c) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">67.21</span> <span class="operator">|</span>  <span class="number">67.21</span> <span class="operator">|</span> <span class="number">67.22</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.10</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">sum</span>(a),<span class="built_in">sum</span>(b),<span class="built_in">sum</span>(c) <span class="keyword">from</span> test6;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">sum</span>(a)             <span class="operator">|</span> <span class="built_in">sum</span>(b)             <span class="operator">|</span> <span class="built_in">sum</span>(c) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3.4679999351501465</span> <span class="operator">|</span> <span class="number">2.2439999999999998</span> <span class="operator">|</span> <span class="number">4</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.14</span> sec)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从上面sum的结果可以看出 float 、 double 会存在精度问题， </span></span><br><span class="line"><span class="comment">decimal 精度正常的，比如银行对统计结果要求比较精准的建议使用 decimal 。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/3.png" alt="3"></p>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型<img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/4.png" alt="4"></h3><ul>
<li>char类型占用固定长度，如果存放的数据为固定长度的建议使用char类型，如手机号码</li>
<li>表格中的L表示存储的数据本身占用的字节，L 以外所需的额外字节为存放该值的长度所需的字节数。</li>
<li>MySQL 通过存储值的内容及其长度来处理可变长度的值，这些额外的字节是无符号整数。</li>
</ul>
<h3 id="MySQL类型和Java对应关系"><a href="#MySQL类型和Java对应关系" class="headerlink" title="MySQL类型和Java对应关系"></a>MySQL类型和Java对应关系<img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/5.png" alt="5"></h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/6.png" alt="6"></p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/7.png" alt="7"></p>
<h3 id="数据类型选择的一些建议"><a href="#数据类型选择的一些建议" class="headerlink" title="数据类型选择的一些建议"></a>数据类型选择的一些建议</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 选小不选大：一般情况下选择可以正确存储数据的最小数据类型，越小的数据类型通常更快，占用磁盘，内存和CPU缓存更小。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 简单就好：简单的数据类型的操作通常需要更少的CPU周期，例如：整型比字符操作代价要小得多，因为字符集和校对规则(排序规则)使字符比整型比较更加复杂。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 尽量避免NULL：尽量制定列为NOT NULL，除非真的需要NULL类型的值，有NULL的列值会使得索引、索引统计和值比较更加复杂。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 浮点类型的建议统一选择decimal。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 记录时间的建议使用int或者bigint类型，将时间转换为时间戳格式，如将时间转换为秒、毫秒，进行存储，方便走索引。</span></span><br></pre></td></tr></table></figure>


<h2 id="第3篇：管理员常用命令"><a href="#第3篇：管理员常用命令" class="headerlink" title="第3篇：管理员常用命令"></a>第3篇：管理员常用命令</h2><h3 id="MySQL权限工作原理"><a href="#MySQL权限工作原理" class="headerlink" title="MySQL权限工作原理"></a>MySQL权限工作原理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- mysql是如何来识别一个用户的呢？</span><br><span class="line">mysql为了安全性考虑，采用 主机名+用户名 来判断一个用户的身份，因为在互联网中很难通过用户名来判断一个用户的身份，但是我们可以通过ip或者主机名判断一台机器，某个用户通过这个机器过来的，我们可以识别为一个用户，所以mysql中采用用户名+主机名来识别用户的身份。当一个用户对mysql发送指令的时候，mysql就是通过用户名和主机来断定用户的权限。</span><br><span class="line"></span><br><span class="line">- Mysql权限验证分为2个阶段：</span><br><span class="line">阶段1：连接数据库，此时mysql会根据你的用户名及你的来源（ip或者主机名称）判断是否有权限连接</span><br><span class="line">阶段2：对mysql服务器发起请求操作，如create table、select、delete、update、create index等操作，此时mysql会判断你是否有权限操作这些指令</span><br></pre></td></tr></table></figure>
<h3 id="权限生效时间"><a href="#权限生效时间" class="headerlink" title="权限生效时间"></a>权限生效时间</h3><p>用户及权限信息放在库名为mysql的库中，mysql启动时，这些内容被读进内存并且从此时生效，所以如果通过直接操作这些表来修改用户及权限信息的，需要重启mysql或者执行flush privileges; 才可以生效。用户登录之后，mysql会和当前用户之间创建一个连接，此时用户相关的权限信息都保存在这个连接中，存放在内存中，此时如果有其他地方修改了当前用户的权限，这些变更的权限会在下一次登录时生效。</p>
<h3 id="查看mysql中所有用户"><a href="#查看mysql中所有用户" class="headerlink" title="查看mysql中所有用户"></a>查看mysql中所有用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">用户信息在 mysql.user 表中，如下：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span>,host <span class="keyword">from</span> <span class="keyword">user</span>; </span><br></pre></td></tr></table></figure>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名@主机名 identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"><span class="number">1.</span> 主机名默认值为<span class="operator">%</span>，表示这个用户可以从任何主机连接mysql服务器</span><br><span class="line"><span class="number">2.</span> 密码可以省略，表示无密码登录</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test2&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">说明：test2的主机为localhost表示本机，此用户只能登陆本机的mysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test3&#x27;</span>@<span class="operator">%</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">说明：test3可以从任何机器连接到mysql服务器</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test4&#x27;</span>@<span class="string">&#x27;192.168.11.%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">说明：test4可以从<span class="number">192.168</span><span class="number">.11</span>段的机器连接mysql</span><br></pre></td></tr></table></figure>
<h3 id="修改密码【3种方式】"><a href="#修改密码【3种方式】" class="headerlink" title="修改密码【3种方式】"></a>修改密码【3种方式】</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式1：通过管理员修改密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;密码&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2：create user 用户名@主机名  identified by &#x27;密码&#x27;;</span></span><br><span class="line"><span class="keyword">set</span> password <span class="operator">=</span> password(<span class="string">&#x27;密码&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式3：通过修改mysql.user表修改密码</span></span><br><span class="line">use mysql; </span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string <span class="operator">=</span> password(<span class="string">&#x27;321&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;test1&#x27;</span> <span class="keyword">and</span> host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span>; </span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">通过表的方式修改之后，需要执行 flush privileges; 才能生效。</span><br><span class="line">MySQL5<span class="number">.7</span>中<span class="keyword">user</span>表中的authentication_string字段表示密码，老的一些版本中密码字段是password。</span><br></pre></td></tr></table></figure>
<h3 id="给用户授权"><a href="#给用户授权" class="headerlink" title="给用户授权"></a>给用户授权</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> privileges <span class="keyword">ON</span> database.table <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>[@<span class="string">&#x27;host&#x27;</span>] [<span class="keyword">with</span> <span class="keyword">grant</span> option]</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span>命令说明：</span><br><span class="line"><span class="comment">-- priveleges (权限列表)，可以是 all ，表示所有权限，也可以是 select、update 等权限，多个权限之间用逗号分开。</span></span><br><span class="line"><span class="comment">-- ON 用来指定权限针对哪些库和表，格式为 数据库.表名 。</span></span><br><span class="line"><span class="comment">-- TO 表示将权限赋予某个用户, 格式为 username@host ，@前面为用户名，@后面接限制的主机，可以是IP、IP段、域名以及%，%表示任何地方。</span></span><br><span class="line"><span class="comment">-- WITH GRANT OPTION 这个选项表示该用户可以将自己拥有的权限授权给别人。</span></span><br><span class="line"><span class="comment">-- 注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。备注：可以使用GRANT重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">说明：给test1授权可以操作所有库所有权限，相当于dba</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> seata.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">说明：test1可以对seata库中所有的表执行<span class="keyword">select</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">update</span> <span class="keyword">on</span> seata.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">说明：test1可以对seata库中所有的表执行<span class="keyword">select</span>、<span class="keyword">update</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>(<span class="keyword">user</span>,host) <span class="keyword">on</span> mysql.user <span class="keyword">to</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">说明：test1用户只能查询mysql.user表的<span class="keyword">user</span>,host字段</span><br></pre></td></tr></table></figure>
<h3 id="查看用户有哪些权限"><a href="#查看用户有哪些权限" class="headerlink" title="查看用户有哪些权限"></a>查看用户有哪些权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>[@<span class="string">&#x27;主机&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>主机可以省略，默认值为%，示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> grants <span class="keyword">for</span> root;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Grants <span class="keyword">for</span> root@<span class="operator">%</span>                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.10</span> sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查看当前用户的权限</span></span><br><span class="line"><span class="keyword">show</span> grants;</span><br></pre></td></tr></table></figure>
<h3 id="撤销用户的权限"><a href="#撤销用户的权限" class="headerlink" title="撤销用户的权限"></a>撤销用户的权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> privileges <span class="keyword">ON</span> database.table <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>[@<span class="string">&#x27;主机&#x27;</span>];</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Grants <span class="keyword">for</span> test1<span class="variable">@localhost</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">GRANT</span> USAGE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="keyword">GRANT</span> <span class="keyword">SELECT</span> (host, <span class="keyword">user</span>) <span class="keyword">ON</span> `mysql`.`<span class="keyword">user</span>` <span class="keyword">TO</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------------------+ </span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">revoke</span> <span class="keyword">select</span>(host) <span class="keyword">on</span> mysql.user <span class="keyword">from</span> test1<span class="variable">@localhost</span>; </span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Grants <span class="keyword">for</span> test1<span class="variable">@localhost</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">GRANT</span> USAGE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="keyword">GRANT</span> <span class="keyword">SELECT</span> (<span class="keyword">user</span>) <span class="keyword">ON</span> `mysql`.`<span class="keyword">user</span>` <span class="keyword">TO</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> </span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span><span class="comment">--------------------------------------------------------------+ </span></span><br></pre></td></tr></table></figure>
<h3 id="删除用户【2种方式】"><a href="#删除用户【2种方式】" class="headerlink" title="删除用户【2种方式】"></a>删除用户【2种方式】</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式1：</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>[@<span class="string">&#x27;主机&#x27;</span>]</span><br><span class="line"><span class="keyword">drop</span>的方式删除用户之后，用户下次登录就会起效。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2：</span></span><br><span class="line">通过删除mysql.user表数据的方式删除，如下：</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;用户名&#x27;</span> <span class="keyword">and</span> host<span class="operator">=</span><span class="string">&#x27;主机&#x27;</span>; </span><br><span class="line">flush privileges;</span><br><span class="line">注意通过表的方式删除的，需要调用 flush privileges; 刷新权限信息（权限启动的时候在内存中保存着，通过表的方式修改之后需要刷新一下）。</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 通过命令的方式操作用户和权限不需要刷新，下次登录自动生效</span><br><span class="line">2. 通过操作mysql库中表的方式修改用户信息，需要调用 flush privileges; 刷新一下，下次登录自动生效</span><br><span class="line">3. mysql识别用户身份的方式是：用户名+主机</span><br><span class="line">4. 本文中讲到的一些指令中带主机的，主机都可以省略，默认值为%，表示所有机器</span><br><span class="line">5. mysql中用户和权限的信息在库名为mysql的库中</span><br></pre></td></tr></table></figure>


<h2 id="第4篇：DDL常见操作汇总"><a href="#第4篇：DDL常见操作汇总" class="headerlink" title="第4篇：DDL常见操作汇总"></a>第4篇：DDL常见操作汇总</h2><h3 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建库</span></span><br><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] 库名; </span><br><span class="line"><span class="comment">-- 删除库</span></span><br><span class="line"><span class="keyword">drop</span> databases [if <span class="keyword">exists</span>] 库名;</span><br><span class="line"><span class="comment">-- 建库通用的写法</span></span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> 旧库名; </span><br><span class="line"><span class="keyword">create</span> database 新库名; </span><br></pre></td></tr></table></figure>
<h3 id="表管理"><a href="#表管理" class="headerlink" title="表管理"></a>表管理</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名( </span><br><span class="line">  字段名<span class="number">1</span> 类型[(宽度)] [约束条件] [comment <span class="string">&#x27;字段说明&#x27;</span>], </span><br><span class="line">  字段名<span class="number">2</span> 类型[(宽度)] [约束条件] [comment <span class="string">&#x27;字段说明&#x27;</span>], </span><br><span class="line">  字段名<span class="number">3</span> 类型[(宽度)] [约束条件] [comment <span class="string">&#x27;字段说明&#x27;</span>] </span><br><span class="line">)[表的一些设置];</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1.</span> 同一张表中字段名不能相同</span><br><span class="line"><span class="number">2.</span> 宽度和约束条件为可选参数，字段名和类型是必须的</span><br><span class="line"><span class="number">3.</span> 最后一个字段后不能加逗号</span><br><span class="line"><span class="number">4.</span> 类型是用来限制字段必须以何种数据类型来存储记录</span><br><span class="line"><span class="number">5.</span> 类型其实也是对字段的约束</span><br><span class="line"><span class="number">6.</span> 类型后写的约束条件是在类型之外的额外添加的约束</span><br><span class="line"></span><br><span class="line">约束说明:</span><br><span class="line"><span class="number">1.</span> <span class="keyword">not</span> <span class="keyword">null</span>：标识该字段不能为空</span><br><span class="line"><span class="number">2.</span> <span class="keyword">default</span> <span class="keyword">value</span>：为该字段设置默认值，默认值为<span class="keyword">value</span></span><br><span class="line"><span class="number">3.</span> <span class="keyword">primary</span> <span class="keyword">key</span>：标识该字段为该表的主键，可以唯一的标识记录，插入重复会报错。两种写法，如下：</span><br><span class="line">   方式<span class="number">1</span>：跟在列后，如下：</span><br><span class="line">       mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test3(a <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;字段a&#x27;</span> <span class="keyword">primary</span> <span class="keyword">key</span>);</span><br><span class="line">   方式<span class="number">2</span>：在所有列定义之后定义，如下：</span><br><span class="line">       mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test4( </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> a <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;字段a&#x27;</span>, </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> b <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;字段b&#x27;</span>, </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">primary</span> <span class="keyword">key</span>(a) </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">         </span><br><span class="line"><span class="number">4.</span> <span class="keyword">foreign</span> <span class="keyword">key</span>：为表中的字段设置外键</span><br><span class="line">   语法：<span class="keyword">foreign</span> <span class="keyword">key</span>(当前表的列名) <span class="keyword">references</span> 引用的外键表(外键表中字段名称)</span><br><span class="line">   例：<span class="keyword">foreign</span> <span class="keyword">key</span>(ts5_a) <span class="keyword">references</span> test5(a)</span><br><span class="line">   注意：</span><br><span class="line">   <span class="operator">-</span> 两张表中需要建立外键关系的字段类型需要一致</span><br><span class="line">   <span class="operator">-</span> 要设置外键的字段不能为主键</span><br><span class="line">   <span class="operator">-</span> 被引用的字段需要为主键</span><br><span class="line">   <span class="operator">-</span> 被插入的值在外键表必须存在，如上面向test6中插入ts5_a为<span class="number">2</span>的时候报错 (<span class="number">2</span>的值在test5表中不存在)</span><br><span class="line">   </span><br><span class="line"><span class="number">5.</span> <span class="keyword">unique</span> key(uq)：标识该字段的值是唯一的</span><br><span class="line">   支持一个到多个字段，插入重复的值会报违反唯一约束，插入失败。定义有<span class="number">2</span>种方式。</span><br><span class="line">   方式<span class="number">1</span>：跟在字段后，如下：</span><br><span class="line">       mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test8(a <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;字段a&#x27;</span> <span class="keyword">unique</span> key);</span><br><span class="line">   方式<span class="number">2</span>：所有列定义之后定义，如下：</span><br><span class="line">       mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test9( </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> a <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;字段a&#x27;</span>, </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">unique</span> key(a) </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">   方式<span class="number">2</span>支持多字段，多个之间用逗号隔开，示例：</span><br><span class="line">       mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test10( </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> a <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;字段a&#x27;</span>, </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> b <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;字段b&#x27;</span>, </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">unique</span> key(a,b) </span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">         </span><br><span class="line"><span class="number">6.</span> auto_increment：标识该字段的值自动增长（整数类型，而且为主键）</span><br><span class="line">   注意：自增长列当前值存储在内存中，数据库每次重启之后，会查询当前表中自增列的最大值作为当前值，如</span><br><span class="line">   果表数据被清空之后，数据库重启了，自增列的值将从初始值开始</span><br></pre></td></tr></table></figure>
<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [if <span class="keyword">exists</span>] 表名;</span><br></pre></td></tr></table></figure>
<h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename [<span class="keyword">to</span>] 新表名; </span><br></pre></td></tr></table></figure>
<h4 id="表设置备注"><a href="#表设置备注" class="headerlink" title="表设置备注"></a>表设置备注</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 comment <span class="string">&#x27;备注信息&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只复制表结构</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">like</span> 被复制的表名;</span><br><span class="line"><span class="comment">-- 复制表结构+数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 [<span class="keyword">as</span>] <span class="keyword">select</span> 字段,... <span class="keyword">from</span> 被复制的表 [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure>
<h4 id="表中列的管理"><a href="#表中列的管理" class="headerlink" title="表中列的管理"></a>表中列的管理</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 列名 类型 [列约束];</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test14 <span class="keyword">add</span> <span class="keyword">column</span> c <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;字段c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify <span class="keyword">column</span> 列名 新类型 [约束]; </span><br><span class="line">或者</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change <span class="keyword">column</span> 列名 新列名 新类型 [约束];</span><br><span class="line"><span class="number">2</span>种方式区别：modify不能修改列名，change可以修改列名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 列名;</span><br></pre></td></tr></table></figure>
<h3 id="约束管理（补充）"><a href="#约束管理（补充）" class="headerlink" title="约束管理（补充）"></a>约束管理（补充）</h3><p>MySQL中主要有6种约束：主键约束、外键约束、唯一约束、检查约束、非空约束和默认值约束。</p>
<h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一个表只能定义一个主键；</span></span><br><span class="line"><span class="comment">-- 主键值必须唯一标识表中的每一行，并且不能出现null的情况，即表中不能存在有相同主键的两行或两行以上数据，严格遵守唯一性原则；</span></span><br><span class="line"><span class="comment">-- 一个字段名只能在联合主键字段表中出现一次；</span></span><br><span class="line"><span class="comment">-- 联合主键不能包含不必要的多余字段，以满足最小化原则。</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>）在定义字段的时候设置主键约束，语法格式：</span><br><span class="line"><span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> [默认值]</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）在定义完所有字段之后指定部件，语法格式：</span><br><span class="line">[<span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>] <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> [字段名]</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>) 联合主键</span><br><span class="line"><span class="keyword">primary</span> <span class="keyword">key</span>(id, name)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）在修改表的时候添加主键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>数据表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>(<span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>）删除主键约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">primary</span> <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>
<h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">在定义外键时需要遵守以下规则：</span><br><span class="line"><span class="comment">-- 主表必须已经存在于数据库中，或者是当前正在创建的表。如果是后一种情况，则主表与从表是同一个表，这样的表称做自参照表，这种结构称做自参照完整性；</span></span><br><span class="line"><span class="comment">-- 必须为主表定义主键；</span></span><br><span class="line"><span class="comment">-- 主键不能包含空值，但允许在外键中出现空值；</span></span><br><span class="line"><span class="comment">-- 在主表的表名后面指定列名或列名的组合，这个列或列的组合必须是主表的主键或候选键；</span></span><br><span class="line"><span class="comment">-- 外键中列的数目必须和主表的主键中列的数目相同；</span></span><br><span class="line"><span class="comment">-- 外键中列的数据类型必须和主表主键中对应列的数据类型相同。</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) 在创建表时设置外键约束</span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="operator">&lt;</span>外键名<span class="operator">&gt;</span>(字段名<span class="number">1</span>，字段名<span class="number">2.</span>..)</span><br><span class="line"><span class="keyword">REFERENCES</span> <span class="operator">&lt;</span>关联表<span class="operator">&gt;</span>(主键字段名)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) 在修改表时添加外键约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 </span><br><span class="line"><span class="keyword">add</span> </span><br><span class="line"><span class="keyword">constraint</span> 约束名</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span> <span class="operator">&lt;</span>外键名<span class="operator">&gt;</span>(字段)</span><br><span class="line"><span class="keyword">references</span> <span class="operator">&lt;</span>关联表<span class="operator">&gt;</span>(主键字段名);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）删除外键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">DROP</span> </span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="operator">&lt;</span>外键名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 唯一约束就是指所有记录中字段的值不能重复出现，比如给&#x27;id&#x27;字段加上唯一约束之后，每条记录的id值都是唯一的，不能出现重复的情况。</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) 在创建表时设置唯一约束</span><br><span class="line"><span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="keyword">UNIQUE</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) 在修改表时添加唯一约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">ADD</span> </span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>唯一约束名<span class="operator">&gt;</span> <span class="keyword">UNIQUE</span>(列名);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>) 删除唯一约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">DROP</span> INDEX <span class="operator">&lt;</span>唯一约束名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="检查约束、非空约束和默认值约束"><a href="#检查约束、非空约束和默认值约束" class="headerlink" title="检查约束、非空约束和默认值约束"></a>检查约束、非空约束和默认值约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) 在创建表时设置检查约束</span><br><span class="line"><span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="keyword">CHECK</span>(<span class="keyword">condition</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) 在创建表时设置非空约束</span><br><span class="line"><span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [<span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>) 在创建表时设置默认值约束</span><br><span class="line"><span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="keyword">DEFAULT</span></span><br></pre></td></tr></table></figure>


<h2 id="第5篇：DML常见操作"><a href="#第5篇：DML常见操作" class="headerlink" title="第5篇：DML常见操作"></a>第5篇：DML常见操作</h2><h3 id="插入单行2种方式"><a href="#插入单行2种方式" class="headerlink" title="插入单行2种方式"></a>插入单行2种方式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名[(字段,字段)] <span class="keyword">values</span> (值,值);</span><br><span class="line">说明：</span><br><span class="line">值和字段需要对应</span><br><span class="line">如果是字符型或日期类型，值需要用单引号引起来；如果是数值类型，不需要用单引号</span><br><span class="line">字段和值的个数必须一致，位置对应</span><br><span class="line">字段如果不能为空，则必须插入值</span><br><span class="line">可以为空的字段可以不用插入值，但需要注意：字段和值都不写；或字段写上，值用<span class="keyword">null</span>代替</span><br><span class="line">表名后面的字段可以省略不写，此时表示所有字段，顺序和表中字段顺序一致。</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">set</span> 字段 <span class="operator">=</span> 值,字段 <span class="operator">=</span> 值; <span class="comment">-- 不建议使用</span></span><br></pre></td></tr></table></figure>
<h3 id="批量插入2种方式"><a href="#批量插入2种方式" class="headerlink" title="批量插入2种方式"></a>批量插入2种方式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 [(字段,字段)] <span class="keyword">values</span> (值,值),(值,值),(值,值);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表 [(字段,字段)] 数据来源<span class="keyword">select</span>语句;</span><br><span class="line">例： <span class="keyword">insert</span> <span class="keyword">into</span> test1 (a,b) <span class="keyword">select</span> c2,c3 <span class="keyword">from</span> test2 <span class="keyword">where</span> c1<span class="operator">&gt;=</span><span class="number">200</span>;</span><br><span class="line">说明：数据来源<span class="keyword">select</span>语句可以有很多种写法，</span><br><span class="line">需要注意：<span class="keyword">select</span>返回的结果和插入数据的字段数量、顺序、类型需要一致。</span><br></pre></td></tr></table></figure>
<h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 [[<span class="keyword">as</span>] 别名] <span class="keyword">set</span> [别名.]字段 <span class="operator">=</span> 值,[别名.]字段 <span class="operator">=</span> 值 [<span class="keyword">where</span>条件];</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> [[<span class="keyword">as</span>] 别名<span class="number">1</span>],表<span class="number">2</span> [[<span class="keyword">as</span>] 别名<span class="number">2</span>] <span class="keyword">set</span> [别名.]字段 <span class="operator">=</span> 值,[别名.]字段 <span class="operator">=</span> 值 [<span class="keyword">where</span>条件]</span><br></pre></td></tr></table></figure>
<h3 id="删除数据操作"><a href="#删除数据操作" class="headerlink" title="删除数据操作"></a>删除数据操作</h3><ul>
<li><p>使用delete删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> [别名] <span class="keyword">from</span> 表名 [[<span class="keyword">as</span>] 别名] [<span class="keyword">where</span>条件];</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> [别名<span class="number">1</span>,别名<span class="number">2</span>] <span class="keyword">from</span> 表<span class="number">1</span> [[<span class="keyword">as</span>] 别名<span class="number">1</span>],表<span class="number">2</span> [[<span class="keyword">as</span>] 别名<span class="number">2</span>] [<span class="keyword">where</span>条件];</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">delete</span> t1 <span class="keyword">from</span> test1 t1,test2 t2 <span class="keyword">where</span> t1.a<span class="operator">=</span>t2.c2;</span><br><span class="line"><span class="keyword">delete</span> t2,t1 <span class="keyword">from</span> test1 t1,test2 t2 <span class="keyword">where</span> t1.a<span class="operator">=</span>t2.c2;</span><br></pre></td></tr></table></figure></li>
<li><p>使用truncate删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> 表名;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="drop，truncate，delete区别"><a href="#drop，truncate，delete区别" class="headerlink" title="drop，truncate，delete区别"></a>drop，truncate，delete区别</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- drop (删除表)：</span></span><br><span class="line">  <span class="number">1.</span> 删除内容和定义，释放空间，简单来说就是把整个表去掉，以后要新增数据是不可能的，除非新增一个表。</span><br><span class="line">  <span class="number">2.</span> <span class="keyword">drop</span>语句将删除表的结构，被依赖的约束（constrain），触发器（<span class="keyword">trigger</span>），索引（index），依赖于该表的      存储过程<span class="operator">/</span>函数将被保留，但其状态会变为：invalid。</span><br><span class="line">  <span class="number">3.</span> 如果要删除表定义及其数据，请使用 <span class="keyword">drop</span> <span class="keyword">table</span> 语句。</span><br><span class="line"><span class="comment">-- truncate (清空表中的数据)：</span></span><br><span class="line">  <span class="number">1.</span> 删除内容、释放空间但不删除定义(保留表的数据结构)，与<span class="keyword">drop</span>不同的是，只是清空表数据而已。</span><br><span class="line">  <span class="number">2.</span> 注意：<span class="keyword">truncate</span>不能删除具体行数据，要删就要把整个表清空了。</span><br><span class="line"><span class="comment">-- delete (删除表中的数据)：</span></span><br><span class="line">  <span class="number">1.</span> <span class="keyword">delete</span> 语句用于删除表中的行。<span class="keyword">delete</span>语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操      作作为事务记录在日志中保存，以便进行进行回滚操作。</span><br><span class="line">  <span class="number">2.</span> <span class="keyword">truncate</span>与不带<span class="keyword">where</span>的<span class="keyword">delete</span> ：只删除数据，而不删除表的结构（定义）</span><br><span class="line">  <span class="number">3.</span> <span class="keyword">truncate</span> <span class="keyword">table</span> 删除表中的所有行，但表结构及其列、约束、索引等保持不变。</span><br><span class="line">  <span class="number">4.</span> 对于由<span class="keyword">foreign</span> <span class="keyword">key</span>约束引用的表，不能使用<span class="keyword">truncate</span> <span class="keyword">table</span> ，而应使用不带<span class="keyword">where</span>子句的<span class="keyword">delete</span>语句。由于      <span class="keyword">truncate</span> <span class="keyword">table</span> 记录在日志中，所以它不能激活触发器。</span><br><span class="line">  <span class="number">5.</span> <span class="keyword">delete</span>语句是数据库操作语言(dml)，这个操作会放到 <span class="keyword">rollback</span> segement 中，事务提交之后才生效；如果有      相应的 <span class="keyword">trigger</span>，执行的时候将被触发。</span><br><span class="line">  <span class="number">6.</span> <span class="keyword">truncate</span>、<span class="keyword">drop</span> 是数据库定义语言(ddl)，操作立即生效，原数据不放到 <span class="keyword">rollback</span> segment 中，不能回滚，      操作不触发 <span class="keyword">trigger</span>。</span><br><span class="line">  <span class="number">7.</span> 如果有自增列，<span class="keyword">truncate</span>方式删除之后，自增列的值会被初始化，<span class="keyword">delete</span>方式要分情况（如果数据库被重启了，      自增列值也会被初始化，数据库未被重启，则不变）</span><br><span class="line">  <span class="number">8.</span> 如果要删除表定义及其数据，请使用 <span class="keyword">drop</span> <span class="keyword">table</span> 语句</span><br><span class="line">  <span class="number">9.</span> 安全性：小心使用 <span class="keyword">drop</span> 和 <span class="keyword">truncate</span>，尤其没有备份的时候</span><br><span class="line">  <span class="number">10.</span> 删除速度，一般来说: <span class="keyword">drop</span><span class="operator">&gt;</span> <span class="keyword">truncate</span> <span class="operator">&gt;</span> <span class="keyword">delete</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/8.png" alt="8"></p>
<h2 id="第6篇：select查询基础"><a href="#第6篇：select查询基础" class="headerlink" title="第6篇：select查询基础"></a>第6篇：select查询基础</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 基本语法</span></span><br><span class="line"><span class="keyword">select</span> 查询的列 <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="comment">-- 查询常量</span></span><br><span class="line"><span class="keyword">select</span> 常量值<span class="number">1</span>,常量值<span class="number">2</span>,常量值<span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 查询表达式</span></span><br><span class="line"><span class="keyword">select</span> 表达式;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span><span class="operator">+</span><span class="number">2</span>,<span class="number">3</span><span class="operator">*</span><span class="number">10</span>,<span class="number">10</span><span class="operator">/</span><span class="number">3</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+--------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span><span class="operator">+</span><span class="number">2</span> <span class="operator">|</span> <span class="number">3</span><span class="operator">*</span><span class="number">10</span> <span class="operator">|</span> <span class="number">10</span><span class="operator">/</span><span class="number">3</span>   <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+--------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>   <span class="operator">|</span> <span class="number">30</span>   <span class="operator">|</span> <span class="number">3.3333</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+--------+ </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询函数</span></span><br><span class="line"><span class="keyword">select</span> 函数;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">10</span>,<span class="number">4</span>),</span><br><span class="line">    		isnull(<span class="keyword">null</span>),</span><br><span class="line">    		ifnull(<span class="keyword">null</span>,<span class="string">&#x27;第一个参数为空返回这个 值&#x27;</span>),</span><br><span class="line">    		ifnull(<span class="number">1</span>,<span class="string">&#x27;第一个参数为空返回这个值，否知返回第一个参数&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定的字段</span></span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="comment">-- 查询所有列</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列别名</span></span><br><span class="line"><span class="keyword">select</span> 列 [<span class="keyword">as</span>] 别名 <span class="keyword">from</span> 表;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用双引号创建别名：</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a &quot;列1&quot;,b &quot;列2&quot; <span class="keyword">from</span> test1; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> 列<span class="number">1</span> <span class="operator">|</span> 列<span class="number">2</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> a <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> b <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> c <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="comment">-- 使用单引号创建别名：</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="string">&#x27;列1&#x27;</span>,b <span class="string">&#x27;列2&#x27;</span> <span class="keyword">from</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> 列<span class="number">1</span> <span class="operator">|</span> 列<span class="number">2</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> a <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> b <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> c <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="comment">-- 不用引号创建别名</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a 列<span class="number">1</span>,b 列<span class="number">2</span> <span class="keyword">from</span> test1; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> 列<span class="number">1</span> <span class="operator">|</span> 列<span class="number">2</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> a <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> b <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> c <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="comment">-- 使用as创建别名</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">as</span> 列<span class="number">1</span>,b <span class="keyword">as</span> <span class="string">&#x27;列 2&#x27;</span> <span class="keyword">from</span> test1; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+ </span></span><br><span class="line"><span class="operator">|</span> 列<span class="number">1</span> <span class="operator">|</span> 列 <span class="number">2</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> a <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> b <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> c <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+ </span></span><br><span class="line"><span class="comment">-- 别名中有特殊符号的，比如空格，此时别名必须用引号引起来。</span></span><br></pre></td></tr></table></figure>
<p><strong>懵逼示例，看效果</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="string">&#x27;a&#x27;</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> a  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> ab <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="string">&#x27;a&#x27;</span> b;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> b <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="string">&#x27;a&#x27;</span> &quot;b&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> a  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> ab <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">as</span> &quot;b&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> b <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第1个和第3个返回的结果，是不是懵逼状态，建议最好使用as，as后面跟上别名。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表别名</span></span><br><span class="line"><span class="keyword">select</span> 别名.字段,别名.<span class="operator">*</span> <span class="keyword">from</span> 表名 [<span class="keyword">as</span>] 别名;</span><br></pre></td></tr></table></figure>


<h2 id="第7篇：select条件查询"><a href="#第7篇：select条件查询" class="headerlink" title="第7篇：select条件查询"></a>第7篇：select条件查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 条件查询</span></span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列 运算符 值</span><br><span class="line"><span class="comment">-- 条件查询运算符  =  !=  &lt;&gt;  &gt;  &lt;  &gt;=  &lt;=</span></span><br><span class="line"><span class="comment">-- 注意：&lt;&gt; 这个是最早的用法。 !=是后来才加上的。两者意义相同，在可移植性上前者优于后者。故而sql语句中尽量使用&lt;&gt;来做不等判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 逻辑查询运算符  AND  OR</span></span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件<span class="number">1</span> <span class="keyword">and</span> 条件<span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件<span class="number">1</span> <span class="keyword">or</span> 条件<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- like（模糊查询）</span></span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列 <span class="keyword">like</span> <span class="keyword">pattern</span>;</span><br><span class="line"><span class="comment">-- pattern 中可以包含通配符，有以下通配符：</span></span><br><span class="line"><span class="comment">-- %：表示匹配任意一个或多个字符</span></span><br><span class="line"><span class="comment">-- _：表示匹配任意一个字符。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- BETWEEN AND(区间查询)</span></span><br><span class="line"><span class="keyword">BETWEEN</span> ... <span class="keyword">AND</span> 会选取介于两个值之间的数据范围，这些值可以是数值、文本或者日期，属于闭区间查询。</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列名 <span class="keyword">between</span> 值<span class="number">1</span> <span class="keyword">and</span> 值<span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 返回对应的列的值在[值1,值2]区间中的记录, 使用between and可以提高语句的简洁度</span></span><br><span class="line"><span class="comment">-- 两个临界值不要调换位置，只能是大于等于左边的值，并且小于等于右边的值。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- IN查询</span></span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段 <span class="keyword">in</span> (值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>,值<span class="number">4</span>);</span><br><span class="line"><span class="comment">-- in 后面括号中可以包含多个值，对应记录的字段满足 in 中任意一个都会被返回</span></span><br><span class="line"><span class="comment">-- in 列表的值类型必须一致或兼容</span></span><br><span class="line"><span class="comment">-- in 列表中不支持通配符。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- NOT IN查询</span></span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段 <span class="keyword">not</span> <span class="keyword">in</span> (值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>,值<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- NULL存在的坑</span></span><br><span class="line"><span class="comment">-- 结论：查询运算符、like、between  and、in、not  in 对 NULL 值查询不起效。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- IS NULL/IS NOT NULL（NULL值专用查询）</span></span><br><span class="line"><span class="keyword">IS</span> <span class="keyword">NULL</span>（返回值为空的记录）</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列 <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>（返回值不为空的记录）</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- &lt;=&gt;（安全等于）</span></span><br><span class="line"><span class="operator">&lt;=&gt;</span>：既可以判断<span class="keyword">NULL</span>值，又可以判断普通的数值，可读性较低，用得较少</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 两条 sql 查询结果一致吗？</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students; </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 当name没有NULL值时，返回的结果一样。</span></span><br><span class="line"><span class="comment">-- 当name有NULL值时，第2个sql查询不出name为NULL的记录。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 总结</span></span><br><span class="line"><span class="keyword">like</span> 中的 <span class="operator">%</span> 可以匹配一个到多个任意的字符，_ 可以匹配任意一个字符</span><br><span class="line">空值查询需要使用 <span class="keyword">IS</span> <span class="keyword">NULL</span> 或者 <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>，其他查询运算符对 <span class="keyword">NULL</span> 值无效</span><br><span class="line">建议创建表的时候，尽量设置表的字段不能为空，给字段设置一个默认值</span><br><span class="line"><span class="operator">&lt;=&gt;</span>（安全等于）玩玩可以，建议少使用</span><br></pre></td></tr></table></figure>


<h2 id="第8篇：排序和分页"><a href="#第8篇：排序和分页" class="headerlink" title="第8篇：排序和分页"></a>第8篇：排序和分页</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 排序查询（order by）</span></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>],字段<span class="number">2</span> [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>];</span><br><span class="line"><span class="comment">-- 需要排序的字段跟在 order by 之后；asc | desc表示排序的规则，asc：升序，desc：降序，默认为asc；</span></span><br><span class="line"><span class="comment">-- 支持多个字段进行排序，多字段排序之间用逗号隔开。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--例：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,id <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> age <span class="string">&#x27;年龄&#x27;</span>,id <span class="keyword">as</span> <span class="string">&#x27;学号&#x27;</span> <span class="keyword">from</span> stu <span class="keyword">order</span> <span class="keyword">by</span> 年龄 <span class="keyword">asc</span>,学号 <span class="keyword">desc</span>;</span><br><span class="line"><span class="comment">-- year函数：属于日期函数，可以获取对应日期中的年份。--</span></span><br><span class="line"><span class="keyword">SELECT</span> id 编号,birth 出生日期,<span class="keyword">year</span>(birth) 出生年份,name 姓名 <span class="keyword">from</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">year</span>(birth) <span class="keyword">asc</span>,id <span class="keyword">asc</span>; </span><br><span class="line"><span class="comment">-- where之后进行排序 --</span></span><br><span class="line"><span class="keyword">select</span> a.id, a.price <span class="keyword">from</span> t_order a <span class="keyword">where</span> a.price<span class="operator">&gt;=</span><span class="number">100</span> <span class="keyword">order</span> <span class="keyword">by</span> a.price <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- limit介绍</span></span><br><span class="line"><span class="keyword">select</span> 列 <span class="keyword">from</span> 表 limit [<span class="keyword">offset</span>,] count;</span><br><span class="line"><span class="comment">-- 说明：</span></span><br><span class="line"><span class="comment">-- offset：表示偏移量，通俗点讲就是跳过多少行，offset可以省略，默认为0，表示跳过0行；范围：[0,+∞)。</span></span><br><span class="line"><span class="comment">-- count：跳过offset行之后开始取数据，取count行记录；范围：[0,+∞)。</span></span><br><span class="line"><span class="comment">-- limit 中 offset 和 count 的值不能用表达式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取前n行记录--</span></span><br><span class="line"><span class="keyword">select</span> 列 <span class="keyword">from</span> 表 limit <span class="number">0</span>,n; </span><br><span class="line">或者</span><br><span class="line"><span class="keyword">select</span> 列 <span class="keyword">from</span> 表 limit n;</span><br><span class="line"><span class="comment">-- 获取最大的一条记录 --</span></span><br><span class="line"><span class="keyword">select</span> a.id, a.price <span class="keyword">from</span> t_order a <span class="keyword">order</span> <span class="keyword">by</span> a.price <span class="keyword">desc</span> limit <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> a.id, a.price <span class="keyword">from</span> t_order a <span class="keyword">order</span> <span class="keyword">by</span> a.price <span class="keyword">desc</span> limit <span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 获取排名第n到m的记录 --</span></span><br><span class="line"><span class="keyword">select</span> 列 <span class="keyword">from</span> 表 limit n<span class="number">-1</span>,m<span class="operator">-</span>n<span class="operator">+</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分页查询</span></span><br><span class="line"><span class="comment">-- 开发过程中，分页我们经常使用，分页一般有2个参数：</span></span><br><span class="line"><span class="comment">-- page：表示第几页，从1开始，范围[1,+∞)</span></span><br><span class="line"><span class="comment">-- pageSize：每页显示多少条记录，范围[1,+∞)</span></span><br><span class="line"><span class="comment">-- 如：page = 2，pageSize = 10，表示获取第2页10条数据。</span></span><br><span class="line"><span class="comment">-- 我们使用limit实现分页，语法如下：</span></span><br><span class="line"><span class="keyword">select</span> 列 <span class="keyword">from</span> 表名 limit (page <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> pageSize, pageSize;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 避免踩坑</span></span><br><span class="line"><span class="comment">-- limit中不能使用表达式，limit后面只能够跟明确的数字。</span></span><br><span class="line">ERROR: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_order <span class="keyword">where</span> limit <span class="number">1</span>,<span class="number">4</span><span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- limit后面的2个数字不能为负数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排序分页存在的坑</span></span><br><span class="line"><span class="comment">-- 排序中存在相同的值时，需要再指定一个排序规则，通过这种排序规则不存在二义性</span></span><br><span class="line"><span class="comment">-- 分页排序时，排序不要有二义性，二义性情况下可能会导致分页结果乱序，可以在后面追加一个主键排序</span></span><br></pre></td></tr></table></figure>


<h2 id="第9篇：分组查询"><a href="#第9篇：分组查询" class="headerlink" title="第9篇：分组查询"></a>第9篇：分组查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, group_function,... <span class="keyword">FROM</span> <span class="keyword">table</span> </span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>] </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> group_by_expression </span><br><span class="line">[<span class="keyword">HAVING</span> group_condition];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 说明：</span></span><br><span class="line"><span class="comment">-- group_function：聚合函数。</span></span><br><span class="line"><span class="comment">-- group_by_expression：分组表达式，多个之间用逗号隔开。</span></span><br><span class="line"><span class="comment">-- group_condition：分组之后对数据进行过滤。</span></span><br><span class="line"><span class="comment">-- 分组中，select后面只能有两种类型的列：</span></span><br><span class="line"><span class="number">1.</span> 出现在<span class="keyword">group</span> <span class="keyword">by</span>后的列</span><br><span class="line"><span class="number">2.</span> 或者使用聚合函数的列</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="comment">-- max  min  count  sum  avg</span></span><br></pre></td></tr></table></figure>
<h3 id="查询案例"><a href="#查询案例" class="headerlink" title="查询案例"></a>查询案例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_order; </span><br><span class="line"><span class="comment">-- 创建订单表 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_order( </span><br><span class="line">  id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单id&#x27;</span>, </span><br><span class="line">  user_id <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;下单人id&#x27;</span>, </span><br><span class="line">  user_name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;用户名&#x27;</span>, </span><br><span class="line">  price <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;订单金额&#x27;</span>, </span><br><span class="line">  the_year <span class="type">SMALLINT</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;订单创建年份&#x27;</span>, </span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (id) ) comment <span class="string">&#x27;订单表&#x27;</span>; </span><br><span class="line"><span class="comment">-- 插入数据 </span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_order(user_id,user_name,price,the_year) <span class="keyword">values</span> </span><br><span class="line">  (<span class="number">1001</span>,<span class="string">&#x27;路人甲Java&#x27;</span>,<span class="number">11.11</span>,<span class="string">&#x27;2017&#x27;</span>), </span><br><span class="line">  (<span class="number">1001</span>,<span class="string">&#x27;路人甲Java&#x27;</span>,<span class="number">22.22</span>,<span class="string">&#x27;2018&#x27;</span>), </span><br><span class="line">  (<span class="number">1001</span>,<span class="string">&#x27;路人甲Java&#x27;</span>,<span class="number">88.88</span>,<span class="string">&#x27;2018&#x27;</span>), </span><br><span class="line">  (<span class="number">1002</span>,<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">33.33</span>,<span class="string">&#x27;2018&#x27;</span>), </span><br><span class="line">  (<span class="number">1002</span>,<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">12.22</span>,<span class="string">&#x27;2018&#x27;</span>), </span><br><span class="line">  (<span class="number">1002</span>,<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">16.66</span>,<span class="string">&#x27;2018&#x27;</span>), </span><br><span class="line">  (<span class="number">1002</span>,<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">44.44</span>,<span class="string">&#x27;2019&#x27;</span>), </span><br><span class="line">  (<span class="number">1003</span>,<span class="string">&#x27;张学友&#x27;</span>,<span class="number">55.55</span>,<span class="string">&#x27;2018&#x27;</span>), </span><br><span class="line">  (<span class="number">1003</span>,<span class="string">&#x27;张学友&#x27;</span>,<span class="number">66.66</span>,<span class="string">&#x27;2019&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 单字段分组</span></span><br><span class="line"><span class="comment">-- 需求：查询每个用户下单数量，输出：用户id、下单数量，如下：</span></span><br><span class="line"><span class="keyword">SELECT</span> user_id 用户id, <span class="built_in">COUNT</span>(id) 下单数量 <span class="keyword">FROM</span> t_order <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> 用户id <span class="operator">|</span> 下单数量 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1001</span> <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1002</span> <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1003</span> <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 多字段分组</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">user_id 用户id, the_year 年份, <span class="built_in">COUNT</span>(user_id) 下单数量 </span><br><span class="line"><span class="keyword">FROM</span> t_order </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id, the_year;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------+</span></span><br><span class="line"><span class="operator">|</span> 用户id <span class="operator">|</span> 年份 <span class="operator">|</span> 下单数量 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1001</span> <span class="operator">|</span> <span class="number">2017</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1001</span> <span class="operator">|</span> <span class="number">2018</span> <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1002</span> <span class="operator">|</span> <span class="number">2018</span> <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1002</span> <span class="operator">|</span> <span class="number">2019</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1003</span> <span class="operator">|</span> <span class="number">2018</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1003</span> <span class="operator">|</span> <span class="number">2019</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------+</span></span><br></pre></td></tr></table></figure>
<h3 id="where-和-having的区别"><a href="#where-和-having的区别" class="headerlink" title="where 和 having的区别"></a>where 和 having的区别</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- where是在分组前对记录进行筛选，而having是在分组结束后的结果里筛选。</span></span><br><span class="line"><span class="comment">-- 含having的查询操作先获得不含having子句时的sql查询结果表，然后在结果表上使用having筛选出符合的记录，最后返回这些记录。因此，having后是可以跟聚合函数的，并且这个聚集函数不必与select后面的聚集函数相同。</span></span><br></pre></td></tr></table></figure>

<h3 id="分组后排序"><a href="#分组后排序" class="headerlink" title="分组后排序"></a>分组后排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_id 用户id, <span class="built_in">max</span>(price) 最大金额 </span><br><span class="line"><span class="keyword">FROM</span> t_order t </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 最大金额 <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h3 id="where-amp-group-by-amp-having-amp-order-by-amp-limit-一起协作"><a href="#where-amp-group-by-amp-having-amp-order-by-amp-limit-一起协作" class="headerlink" title="where &amp; group by &amp; having &amp; order by &amp; limit 一起协作"></a>where &amp; group by &amp; having &amp; order by &amp; limit 一起协作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列 </span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> [查询条件] </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> [分组表达式]</span><br><span class="line"><span class="keyword">having</span> [分组过滤条件] </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> [排序条件] </span><br><span class="line">limit [<span class="keyword">offset</span>,] count;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">例：查询出<span class="number">2018</span>年，下单数量大于等于<span class="number">2</span>的，按照下单数量降序排序，最后只输出第<span class="number">1</span>条记录，显</span><br><span class="line">示：用户id，下单数量，如下：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> user_id 用户id, <span class="built_in">COUNT</span>(id) 下单数量</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">from</span> t_order</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">where</span> the_year <span class="operator">=</span> <span class="number">2018</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">having</span> <span class="built_in">COUNT</span>(id) <span class="operator">&gt;=</span> <span class="number">2</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">COUNT</span>(id) <span class="keyword">desc</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> limit <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> 用户id <span class="operator">|</span> 下单数量 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1002</span> <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br></pre></td></tr></table></figure>
<h3 id="MySQL分组中的坑"><a href="#MySQL分组中的坑" class="headerlink" title="MySQL分组中的坑"></a>MySQL分组中的坑</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">分组中<span class="keyword">select</span>后面的列只能有<span class="number">2</span>种：</span><br><span class="line"><span class="number">1.</span> 出现在<span class="keyword">group</span> <span class="keyword">by</span>后面的列</span><br><span class="line"><span class="number">2.</span> 使用聚合函数的列</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：获取每个用户下单的最大金额及下单的年份，输出：用户id，最大金额，年份，写法如下：</span></span><br><span class="line"><span class="keyword">select</span> user_id 用户id, <span class="built_in">max</span>(price) 最大金额, the_year 年份 <span class="keyword">FROM</span> t_order t <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.user_id;</span><br><span class="line"></span><br><span class="line"><span class="number">1055</span> <span class="operator">-</span> Expression #<span class="number">3</span> <span class="keyword">of</span> <span class="keyword">SELECT</span> list <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> clause <span class="keyword">and</span> <span class="keyword">contains</span> nonaggregated <span class="keyword">column</span> <span class="string">&#x27;mysqlstudy.t.the_year&#x27;</span> which <span class="keyword">is</span> <span class="keyword">not</span> functionally dependent <span class="keyword">on</span> columns <span class="keyword">in</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> clause; this <span class="keyword">is</span> incompatible <span class="keyword">with</span> sql_mode<span class="operator">=</span>only_full_group_by</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 上面的sql报错了，原因因为 the_year 不符合上面说的2条规则（select后面的列必须出现在group by中或者使用聚合函数），而 sql_mode 限制了这种规则，我们看一下 sql_mode 的配置：</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@sql</span>_mode;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@sql</span>_mode                                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,</span><br><span class="line"> NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,</span><br><span class="line"> NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="comment">-- sql_mode中包含了 ONLY_FULL_GROUP_BY ，这个表示select后面的列必须符合上面的说的2点规范。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 可以将 ONLY_FULL_GROUP_BY 去掉，select后面就可以加任意列了，我们来看一下效果。</span></span><br><span class="line"><span class="comment">-- 修改mysql中的 my.ini 文件：</span></span><br><span class="line">sql_mode<span class="operator">=</span>STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 重启mysql，再次运行，效果如下：</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> user_id 用户id, <span class="built_in">max</span>(price) 最大金额, the_year 年份 </span><br><span class="line">		<span class="keyword">FROM</span> t_order t </span><br><span class="line">		<span class="keyword">GROUP</span> <span class="keyword">BY</span> t.user_id; </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+--------+ </span></span><br><span class="line"><span class="operator">|</span> 用户id <span class="operator">|</span> 最大金额 <span class="operator">|</span> 年份 <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+--------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1001</span> <span class="operator">|</span> <span class="number">88.88</span> <span class="operator">|</span> <span class="number">2017</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">1002</span> <span class="operator">|</span> <span class="number">44.44</span> <span class="operator">|</span> <span class="number">2018</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">1003</span> <span class="operator">|</span> <span class="number">66.66</span> <span class="operator">|</span> <span class="number">2018</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+--------+</span></span><br><span class="line"><span class="comment">-- 看一下上面的数据，第一条 88.88 的年份是 2017 年，而原始数据是2018年，mysql对这种未按照规范来的列，乱序了，mysql取的是第一条。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 正确的写法，提供两种，如下：</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> user_id 用户id, price 最大金额, the_year 年份 </span><br><span class="line">		<span class="keyword">FROM</span> t_order t1 </span><br><span class="line">		<span class="keyword">WHERE</span> (t1.user_id , t1.price) <span class="keyword">IN</span> </span><br><span class="line">				(<span class="keyword">SELECT</span> t.user_id, <span class="built_in">MAX</span>(t.price) <span class="keyword">FROM</span> t_order t <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.user_id);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+------+</span></span><br><span class="line"><span class="operator">|</span> 用户id <span class="operator">|</span> 最大金额 <span class="operator">|</span> 年份 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1001</span> <span class="operator">|</span> <span class="number">88.88</span>    <span class="operator">|</span> <span class="number">2018</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1002</span> <span class="operator">|</span> <span class="number">44.44</span>    <span class="operator">|</span> <span class="number">2019</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1003</span> <span class="operator">|</span> <span class="number">66.66</span>    <span class="operator">|</span> <span class="number">2019</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.09</span> sec)</span><br><span class="line"><span class="comment">-- 该写法比较少见， in 中使用了多字段查询。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> user_id 用户id, price 最大金额, the_year 年份 </span><br><span class="line"><span class="keyword">FROM</span> t_order t1, (<span class="keyword">SELECT</span> t.user_id uid, <span class="built_in">MAX</span>(t.price) pc <span class="keyword">FROM</span> t_order t <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.user_id) t2 <span class="keyword">WHERE</span> t1.user_id <span class="operator">=</span> t2.uid <span class="keyword">AND</span> t1.price <span class="operator">=</span> t2.pc;</span><br></pre></td></tr></table></figure>
<ul>
<li>建议：在写分组查询的时候，按照规范来写，select后面出现的列必须在group by中或者必须使用聚合函数。</li>
</ul>
<h2 id="第10篇：常用函数"><a href="#第10篇：常用函数" class="headerlink" title="第10篇：常用函数"></a>第10篇：常用函数</h2><h3 id="MySQL-数值型函数"><a href="#MySQL-数值型函数" class="headerlink" title="MySQL 数值型函数"></a>MySQL 数值型函数</h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/12.png" alt="12"></p>
<h3 id="MySQL-字符串函数"><a href="#MySQL-字符串函数" class="headerlink" title="MySQL 字符串函数"></a>MySQL 字符串函数</h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/14.png" alt="14"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- length:返回字符串直接长度</span></span><br><span class="line">返回值为字符串的字节长度，使用 uft8编码字符集时，一个汉字是 <span class="number">3</span> 个字节，一个数字或字母是一个字节。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- concat:合并字符串</span></span><br><span class="line">CONCAT(sl，s2，...) 函数返回结果为连接参数产生的字符串，或许有一个或多个参数。</span><br><span class="line">若有任何一个参数为 <span class="keyword">NULL</span>，则返回值为 <span class="keyword">NULL</span>。</span><br><span class="line">若所有参数均为非二进制字符串，则结果为非二进制字符串。</span><br><span class="line">若变量中含有任一二进制字符串，则结果为一个二进制字符串。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- insert:替换字符串</span></span><br><span class="line"><span class="keyword">INSERT</span>(s1，x，len，s2) 返回字符串 s1，子字符串起始于 x 位置，并且用 len 个字符长的字符串代替 s2。 </span><br><span class="line">x的值从<span class="number">1</span>开始，第一个字符的x<span class="operator">=</span><span class="number">1</span>，若 x 超过字符串长度，则返回值为原始字符串。</span><br><span class="line">假如 len 的长度大于其他字符串的长度，则从位置 x 开始替换。</span><br><span class="line">若任何一个参数为 <span class="keyword">NULL</span>，则返回值为 <span class="keyword">NULL</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- left:从左侧截取字符串</span></span><br><span class="line"><span class="keyword">LEFT</span>(s，n) 函数返回字符串 s 最左边的 n 个字符，s<span class="operator">=</span><span class="number">1</span>表示第一个字符。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- right:从右侧截取字符串</span></span><br><span class="line"><span class="keyword">RIGHT</span>(s，n) 函数返回字符串 s 最右边的 n 个字符。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- replace:字符串替换</span></span><br><span class="line">REPLACE(s，s1，s2) 使用字符串 s2 替换字符串 s 中所有的字符串 s1。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- substr 和 substring:截取字符串</span></span><br><span class="line">substr(str,pos)</span><br><span class="line">substr(str <span class="keyword">from</span> pos)</span><br><span class="line">substr(str,pos,len)</span><br><span class="line">substr(str <span class="keyword">from</span> pos <span class="keyword">for</span> len)</span><br><span class="line">substr()是<span class="built_in">substring</span>()的同义词。</span><br><span class="line">没有len参数的形式是字符串str从位置pos开始返回一个子字符串。</span><br><span class="line">带有len参数的形式是字符串str从位置pos开始返回长度为len的子字符串。</span><br><span class="line">使用<span class="keyword">FROM</span>的形式是标准的<span class="keyword">SQL</span>语法。</span><br><span class="line">也可以对pos使用负值，在这种情况下，子字符串的开头是字符串末尾的pos字符，而不是开头。</span><br><span class="line">在这个函数的任何形式中pos可以使用负值。</span><br><span class="line">对于所有形式的<span class="built_in">substring</span>()，从中提取子串的字符串中第一个字符的位置被认为是<span class="number">1</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 第三个字符之后的子字符串：inese **/</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span>, <span class="number">3</span>); </span><br><span class="line"><span class="comment">/** 倒数第三个字符之后的子字符串：ese **/</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span>, <span class="number">-3</span>); </span><br><span class="line"><span class="comment">/** 第三个字符之后的两个字符：in **/</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span>, <span class="number">3</span>, <span class="number">2</span>); </span><br><span class="line"><span class="comment">/** 倒数第三个字符之后的两个字符：es **/</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span>, <span class="number">-3</span>, <span class="number">2</span>); </span><br><span class="line"><span class="comment">/** 第三个字符之后的子字符串：inese **/</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span> <span class="keyword">FROM</span> <span class="number">3</span>); </span><br><span class="line"><span class="comment">/** 倒数第三个字符之后的子字符串：ese **/</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span> <span class="keyword">FROM</span> <span class="number">-3</span>); </span><br><span class="line"><span class="comment">/** 第三个字符之后的两个字符：in **/</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span> <span class="keyword">FROM</span> <span class="number">3</span> <span class="keyword">FOR</span> <span class="number">2</span>); </span><br><span class="line"><span class="comment">/** 倒数第三个字符之后的两个字符：es **/</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span> <span class="keyword">FROM</span> <span class="number">-3</span> <span class="keyword">FOR</span> <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<h3 id="MySQL-日期和时间函数"><a href="#MySQL-日期和时间函数" class="headerlink" title="MySQL 日期和时间函数"></a>MySQL 日期和时间函数</h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/15.png" alt="15"></p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/16.png" alt="16"></p>
<h3 id="MySQL-聚合函数-略"><a href="#MySQL-聚合函数-略" class="headerlink" title="MySQL 聚合函数 略"></a>MySQL 聚合函数 略</h3><h3 id="MySQL-流程控制函数"><a href="#MySQL-流程控制函数" class="headerlink" title="MySQL 流程控制函数"></a>MySQL 流程控制函数</h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/18.png" alt="18"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">select</span> if(<span class="number">1</span> <span class="operator">&lt;</span> <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>) c1,if(<span class="number">1</span> <span class="operator">&gt;</span> <span class="number">5</span>, <span class="string">&#x27;√&#x27;</span>, <span class="string">&#x27;×&#x27;</span>) c2,if(strcmp(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>),<span class="string">&#x27;yes&#x27;</span>,<span class="string">&#x27;no&#x27;</span>) c3;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+-----+</span></span><br><span class="line"><span class="operator">|</span> c1 <span class="operator">|</span> c2 <span class="operator">|</span> c3  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+-----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> ×  <span class="operator">|</span> yes <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+-----+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> ifnull(<span class="keyword">null</span>,<span class="string">&#x27;路人甲Java&#x27;</span>),ifnull(<span class="string">&#x27;非空&#x27;</span>,<span class="string">&#x27;为空&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> ifnull(<span class="keyword">null</span>,<span class="string">&#x27;路人甲Java&#x27;</span>) <span class="operator">|</span> ifnull(<span class="string">&#x27;非空&#x27;</span>,<span class="string">&#x27;为空&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> 路人甲Java                <span class="operator">|</span> 非空                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+-----------------------+</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span> </span><br><span class="line">	<span class="keyword">WHEN</span> <span class="operator">&lt;</span>值<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>操作<span class="operator">&gt;</span> </span><br><span class="line">	<span class="keyword">WHEN</span> <span class="operator">&lt;</span>值<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>操作<span class="operator">&gt;</span></span><br><span class="line">    ... </span><br><span class="line">	<span class="keyword">ELSE</span> <span class="operator">&lt;</span>操作<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">	<span class="keyword">WHEN</span> <span class="operator">&lt;</span>条件<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>命令<span class="operator">&gt;</span> </span><br><span class="line">	<span class="keyword">WHEN</span> <span class="operator">&lt;</span>条件<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>命令<span class="operator">&gt;</span> </span><br><span class="line">	... </span><br><span class="line">	<span class="keyword">ELSE</span> commands </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_stu ( </span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>, </span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">10</span>) COMMENT <span class="string">&#x27;姓名&#x27;</span>, </span><br><span class="line">  sex TINYINT COMMENT <span class="string">&#x27;性别,0:未知,1:男,2:女&#x27;</span>, </span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (id) </span><br><span class="line">) COMMENT <span class="string">&#x27;学生表&#x27;</span>; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_stu (name,sex) <span class="keyword">VALUES</span> (<span class="string">&#x27;张学友&#x27;</span>,<span class="number">1</span>), (<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">1</span>), </span><br><span class="line">								 (<span class="string">&#x27;郭富城&#x27;</span>,<span class="number">1</span>), (<span class="string">&#x27;蔡依林&#x27;</span>,<span class="number">2</span>), (<span class="string">&#x27;xxx&#x27;</span>,<span class="number">0</span>);</span><br><span class="line">			</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name, (<span class="keyword">CASE</span> sex <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;未知&#x27;</span> <span class="keyword">END</span>) sex <span class="keyword">FROM</span> t_stu;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> sex  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+</span></span><br><span class="line"><span class="operator">|</span> 张学友 <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 刘德华 <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 郭富城 <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 蔡依林 <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> xxx    <span class="operator">|</span> 未知 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+</span></span><br></pre></td></tr></table></figure>
<h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/19.png" alt="19"></p>
<h2 id="第11篇：深入了解连接查询及原理"><a href="#第11篇：深入了解连接查询及原理" class="headerlink" title="第11篇：深入了解连接查询及原理"></a>第11篇：深入了解连接查询及原理</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_team; </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_team( </span><br><span class="line">  id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> comment <span class="string">&#x27;组id&#x27;</span>, </span><br><span class="line">  team_name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;名称&#x27;</span> </span><br><span class="line">) comment <span class="string">&#x27;组表&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_employee; </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_employee( </span><br><span class="line">  id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> comment <span class="string">&#x27;部门id&#x27;</span>, </span><br><span class="line">  emp_name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;员工名称&#x27;</span>, </span><br><span class="line">  team_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;员工所在组id&#x27;</span> </span><br><span class="line">) comment <span class="string">&#x27;员工表表&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_team <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;架构组&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;测试组&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;java组&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;前端组&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_employee <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;路人甲Java&#x27;</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="string">&#x27;王 五&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_team;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> team_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 架构组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 测试组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> java组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 前端组    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> emp_name   <span class="operator">|</span> team_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 路人甲Java <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 张三       <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四       <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 王 五      <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 赵六       <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+---------+</span></span><br></pre></td></tr></table></figure>
<h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 有集合A和B，笛卡尔积表示A集合中的元素和B集合中的元素任意相互关联产生的所有可能的结果。</span></span><br><span class="line"><span class="comment">-- 假如A中有m个元素，B中有n个元素，A、B笛卡尔积产生的结果有m x n个结果，相当于循环遍历两个集合中的元素，任意组合。过程：拿A集合中的第1行，去匹配集合B中所有的行，然后再拿集合A中的第2行，去匹配集合B中所有的行，最后结果数量为m x n。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- sql 中笛卡尔积的写法</span></span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span>[,表N]; </span><br><span class="line">或者</span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">join</span> 表<span class="number">2</span> [<span class="keyword">join</span> 表N];</span><br></pre></td></tr></table></figure>
<h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件; </span><br><span class="line">或</span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表<span class="number">1</span>, 表<span class="number">2</span> [<span class="keyword">where</span> 关联条件];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 内连接相当于在笛卡尔积的基础上加上了连接的条件。</span></span><br><span class="line"><span class="comment">-- 当没有连接条件的时候，内连接上升为笛卡尔积。</span></span><br><span class="line"><span class="comment">-- 总结</span></span><br><span class="line"><span class="comment">-- 内连接建议使用第3种语法，简洁：</span></span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表<span class="number">1</span>, 表<span class="number">2</span> [<span class="keyword">where</span> 关联条件];</span><br></pre></td></tr></table></figure>

<p>###外连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 外连接涉及到2个表，分为：主表和从表，要查询的信息主要来自于哪个表，谁就是主表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外连接查询结果为主表中所有记录。如果从表中有和它匹配的，则显示匹配的值，这部分相当于内连接查询出来的结果；如果从表中没有和它匹配的，则显示null。最终：外连接查询结果 = 内连接的结果 + 主表中有的而内连接结果中没有的记录。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外连接分为2种：</span></span><br><span class="line">左外链接：使用<span class="keyword">left</span> <span class="keyword">join</span>关键字，<span class="keyword">left</span> <span class="keyword">join</span>左边的是主表。</span><br><span class="line">右外连接：使用<span class="keyword">right</span> <span class="keyword">join</span>关键字，<span class="keyword">right</span> <span class="keyword">join</span>右边的是主表。</span><br></pre></td></tr></table></figure>
<h4 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列 <span class="keyword">from</span> 主表 <span class="keyword">left</span> <span class="keyword">join</span> 从表 <span class="keyword">on</span> 连接条件;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工信息，并显示员工所在组，如下:</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee te <span class="keyword">left</span> <span class="keyword">join</span> t_team tt <span class="keyword">on</span> te.team_id <span class="operator">=</span> tt.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+---------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> emp_name   <span class="operator">|</span> team_id <span class="operator">|</span> id   <span class="operator">|</span> team_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+---------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 路人甲Java <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 架构组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 张三       <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 测试组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四       <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> java组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 王 五      <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 赵六       <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+---------+------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工信息，返回组名不为空的记录，如下：（左表独有）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee te <span class="keyword">left</span> <span class="keyword">join</span> t_team tt <span class="keyword">on</span> te.team_id <span class="operator">=</span> tt.id <span class="keyword">where</span> tt.id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+---------+----+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> emp_name   <span class="operator">|</span> team_id <span class="operator">|</span> id <span class="operator">|</span> team_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+---------+----+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 路人甲Java <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 架构组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 张三       <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 测试组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四       <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> java组    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+---------+----+-----------+</span></span><br></pre></td></tr></table></figure>
<h4 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列 <span class="keyword">from</span> 从表 <span class="keyword">right</span> <span class="keyword">join</span> 主表 <span class="keyword">on</span> 连接条件;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 上面两个sql语句 使用右连接的方式</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_team tt <span class="keyword">right</span> <span class="keyword">join</span> t_employee te <span class="keyword">on</span> te.team_id <span class="operator">=</span> tt.id;</span><br><span class="line"><span class="comment">-- 右表独有</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_team tt <span class="keyword">right</span> <span class="keyword">join</span> t_employee te <span class="keyword">on</span> te.team_id <span class="operator">=</span> tt.id <span class="keyword">where</span> tt.id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<h3 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 全连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee te <span class="keyword">left</span> <span class="keyword">join</span> t_team tt <span class="keyword">on</span> te.team_id <span class="operator">=</span> tt.id</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee te <span class="keyword">right</span> <span class="keyword">join</span> t_team tt <span class="keyword">on</span> te.team_id <span class="operator">=</span> tt.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+---------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> emp_name   <span class="operator">|</span> team_id <span class="operator">|</span> id   <span class="operator">|</span> team_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+---------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 路人甲Java <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 架构组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 张三       <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 测试组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 李四       <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> java组    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> 王 五      <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> 赵六       <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> 前端组    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+---------+------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全连接去交集</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee te <span class="keyword">left</span> <span class="keyword">join</span> t_team tt <span class="keyword">on</span> te.team_id <span class="operator">=</span> tt.id <span class="keyword">where</span> tt.id <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee te <span class="keyword">right</span> <span class="keyword">join</span> t_team tt <span class="keyword">on</span> te.team_id <span class="operator">=</span> tt.id <span class="keyword">where</span> te.id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+---------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> emp_name <span class="operator">|</span> team_id <span class="operator">|</span> id   <span class="operator">|</span> team_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+---------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> 王 五    <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> 赵六     <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> 前端组    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+---------+------+-----------+</span></span><br></pre></td></tr></table></figure>
<p>表连接中还可以使用 group by 、having 、order by 、limit ，这些关键字相当于在表连接的结果上进行操作。</p>
<h2 id="第12篇：子查询"><a href="#第12篇：子查询" class="headerlink" title="第12篇：子查询"></a>第12篇：子查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">出现在<span class="keyword">select</span>语句中的<span class="keyword">select</span>语句，称为子查询或内查询。外部的<span class="keyword">select</span>查询语句，称为主查询或外查询。</span><br><span class="line">子查询的执行优先于主查询执行，因为主查询的条件用到了子查询的结果。</span><br><span class="line"><span class="comment">-- 子查询分类</span></span><br><span class="line">按结果集的行列数不同分为<span class="number">4</span>种</span><br><span class="line"><span class="number">1.</span> 标量子查询（结果集只有一行一列）</span><br><span class="line"><span class="number">2.</span> 列子查询（结果集只有一列多行）</span><br><span class="line"><span class="number">3.</span> 行子查询（结果集有一行多列）</span><br><span class="line"><span class="number">4.</span> 表子查询（结果集一般为多行多列）</span><br><span class="line"></span><br><span class="line">按子查询出现在主查询中的不同位置分类</span><br><span class="line"><span class="number">1.</span> <span class="keyword">select</span>后面：仅仅支持标量子查询。</span><br><span class="line"><span class="number">2.</span> <span class="keyword">from</span>后面：支持表子查询。</span><br><span class="line"><span class="number">3.</span> <span class="keyword">where</span> 或 <span class="keyword">having</span>后面：支持标量子查询（单列单行）、列子查询（单列多行）、行子查询（多列单行）</span><br><span class="line"><span class="number">4.</span> <span class="keyword">exists</span> 后面（即相关子查询）：表子查询（多行、多列）</span><br></pre></td></tr></table></figure>
<p><a href="http://www.itsoku.com/article/209">准备测试数据</a></p>
<h3 id="select后面的子查询"><a href="#select后面的子查询" class="headerlink" title="select后面的子查询"></a>select后面的子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询每个部门员工个数</span></span><br><span class="line"><span class="keyword">select</span> d.<span class="operator">*</span>,</span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employees e <span class="keyword">where</span> e.department_id <span class="operator">=</span> d.department_id) <span class="keyword">as</span> 员工个数</span><br><span class="line"><span class="keyword">from</span> departments d</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工号=102的部门名称</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(<span class="keyword">select</span> d.department_name</span><br><span class="line"><span class="keyword">from</span> departments d, employees e</span><br><span class="line"><span class="keyword">where</span> d.department_id <span class="operator">=</span> e.department_id <span class="keyword">and</span> e.employee_id <span class="operator">=</span> <span class="number">102</span>) <span class="keyword">as</span> 部门名</span><br></pre></td></tr></table></figure>
<h3 id="from后面的子查询"><a href="#from后面的子查询" class="headerlink" title="from后面的子查询"></a>from后面的子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将子查询的结果集充当一张表，要求必须起别名。然后将真实的表和子查询结果表进行连接查询。</span></span><br><span class="line"><span class="comment">-- 查询每个部门平均工资的工资等级</span></span><br><span class="line"><span class="keyword">select</span> t1.<span class="operator">*</span>, j.grade_level</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> e.department_id <span class="keyword">as</span> did, <span class="built_in">avg</span>(e.salary) <span class="keyword">as</span> sal <span class="keyword">from</span> employees e</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> did) t1, job_grades j</span><br><span class="line"><span class="keyword">where</span> t1.sal <span class="keyword">between</span> j.lowest_sal <span class="keyword">and</span> j.highest_sal;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> did  <span class="operator">|</span> sal          <span class="operator">|</span> grade_level <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">7000.000000</span> <span class="operator">|</span> C           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span>  <span class="number">4400.000000</span> <span class="operator">|</span> B           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">9500.000000</span> <span class="operator">|</span> C           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>  <span class="number">4150.000000</span> <span class="operator">|</span> B           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>  <span class="number">6500.000000</span> <span class="operator">|</span> C           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">50</span> <span class="operator">|</span>  <span class="number">3475.555556</span> <span class="operator">|</span> B           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">60</span> <span class="operator">|</span>  <span class="number">5760.000000</span> <span class="operator">|</span> B           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">70</span> <span class="operator">|</span> <span class="number">10000.000000</span> <span class="operator">|</span> D           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">80</span> <span class="operator">|</span>  <span class="number">8955.882353</span> <span class="operator">|</span> C           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">90</span> <span class="operator">|</span> <span class="number">19333.333333</span> <span class="operator">|</span> E           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span>  <span class="number">8600.000000</span> <span class="operator">|</span> C           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">110</span> <span class="operator">|</span> <span class="number">10150.000000</span> <span class="operator">|</span> D           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------------+-------------+</span></span><br></pre></td></tr></table></figure>
<h3 id="where和having后面的子查询"><a href="#where和having后面的子查询" class="headerlink" title="where和having后面的子查询"></a>where和having后面的子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- where或having后可以使用</span></span><br><span class="line"><span class="number">1.</span> 标量子查询（单行单列）</span><br><span class="line"><span class="number">2.</span> 列子查询（单列多行）</span><br><span class="line"><span class="number">3.</span> 行子查询（一行多列）</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 特点</span></span><br><span class="line"><span class="number">1.</span> 子查询放在小括号内。</span><br><span class="line"><span class="number">2.</span> 子查询一般放在条件的右侧。</span><br><span class="line"><span class="number">3.</span> 标量子查询，一般搭配着单行单列操作符使用 <span class="operator">&gt;</span>、<span class="operator">&lt;</span>、<span class="operator">&gt;=</span>、<span class="operator">&lt;=</span>、<span class="operator">=</span>、<span class="operator">&lt;&gt;</span>、<span class="operator">!=</span></span><br><span class="line"><span class="number">4.</span> 列子查询，一般搭配着多行操作符使用</span><br><span class="line"></span><br><span class="line"><span class="comment">-- in，any，some，all 分别是子查询关键词之一。</span></span><br><span class="line"><span class="comment">-- in：in 常用于where表达式中，其作用是查询某个范围内的数据</span></span><br><span class="line"><span class="comment">-- any 和 some 一样： 可以与=、&gt;、&gt;=、&lt;、&lt;=、&lt;&gt;结合起来使用，分别表示等于、大于、大于等于、小于、小于等于、不等于其中的任何一个数据。</span></span><br><span class="line"><span class="comment">-- all：可以与=、&gt;、&gt;=、&lt;、&lt;=、&lt;&gt;结合是来使用，分别表示等于、大于、大于等于、小于、小于等于、不等于其中的其中的所有数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- any或者some：和子查询返回的某一个值比较，比如a &gt; some (10,20,30)，a大于子查询中任意一个即可，a大于子查询中最小值即可，等同于 a &gt; min (10,20,30)。</span></span><br><span class="line"><span class="comment">-- all：和子查询返回的所有值比较，比如a &gt; all (10,20,30)，a大于子查询中所有值，换句话说，a大于子查询中最大值即可满足查询条件，等同于 a &gt; max (10,20,30)。</span></span><br></pre></td></tr></table></figure>
<h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询谁的工资比Abel的高？ 多个标量子查询也类似</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> salary <span class="operator">&gt;</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> employees <span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 子查询+分组函数 : 查询最低工资大于50号部门最低工资的部门id和其最低工资【having】</span></span><br><span class="line"><span class="keyword">select</span> department_id did, <span class="built_in">min</span>(salary) sal</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> did</span><br><span class="line"><span class="keyword">having</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">min</span>(salary) <span class="keyword">from</span> employees <span class="keyword">where</span> department_id <span class="operator">=</span> <span class="number">50</span>);</span><br></pre></td></tr></table></figure>
<h4 id="列子查询-子查询结果集一列多行"><a href="#列子查询-子查询结果集一列多行" class="headerlink" title="列子查询(子查询结果集一列多行)"></a>列子查询(子查询结果集一列多行)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列子查询需要搭配多行操作符使用：in(not in)、any/some、all。</span></span><br><span class="line"><span class="comment">-- 为了提升效率，最好去重一下distinct关键字。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回location_id是1400或1700的部门中的所有员工姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> a.last_name </span><br><span class="line"><span class="keyword">FROM</span> employees a </span><br><span class="line"><span class="keyword">WHERE</span> a.department_id <span class="keyword">IN</span> </span><br><span class="line">	(<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> departments <span class="keyword">WHERE</span> location_id <span class="keyword">IN</span> (<span class="number">1400</span>, <span class="number">1700</span>)); </span><br><span class="line">	</span><br><span class="line"><span class="comment">/*使用any实现*/</span> </span><br><span class="line"><span class="keyword">SELECT</span> a.last_name </span><br><span class="line"><span class="keyword">FROM</span> employees a </span><br><span class="line"><span class="keyword">WHERE</span> a.department_id <span class="operator">=</span> </span><br><span class="line">	<span class="keyword">ANY</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> departments <span class="keyword">WHERE</span> location_id <span class="keyword">IN</span> (<span class="number">1400</span>, <span class="number">1700</span>)); </span><br></pre></td></tr></table></figure>
<h4 id="行子查询-子查询结果集一行多列）"><a href="#行子查询-子查询结果集一行多列）" class="headerlink" title="行子查询(子查询结果集一行多列）"></a>行子查询(子查询结果集一行多列）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工编号最小并且工资最高的员工信息，3种方式。</span></span><br><span class="line"><span class="comment">-- 方式1</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> employee_id <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">min</span>(employee_id) <span class="keyword">from</span> employees)</span><br><span class="line"><span class="keyword">and</span> salary <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">max</span>(salary) <span class="keyword">from</span> employees)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">where</span> (employee_id, salary) <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">min</span>(employee_id), <span class="built_in">max</span>(salary) <span class="keyword">from</span> employees)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式3</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">where</span> (employee_id, salary) <span class="operator">=</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">min</span>(employee_id), <span class="built_in">max</span>(salary) <span class="keyword">from</span> employees)</span><br></pre></td></tr></table></figure>
<h3 id="exists后面（相关子查询）"><a href="#exists后面（相关子查询）" class="headerlink" title="exists后面（相关子查询）"></a>exists后面（相关子查询）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 语法：<span class="keyword">exists</span>(完整的查询语句)。 </span><br><span class="line"><span class="number">2.</span> <span class="keyword">exists</span>查询结果：<span class="number">1</span>或<span class="number">0</span>，<span class="keyword">exists</span>查询的结果用来判断子查询的结果集中是否有值。</span><br><span class="line"><span class="number">3.</span> 一般来说，能用<span class="keyword">exists</span>的子查询，绝对都能用<span class="keyword">in</span>代替，所以<span class="keyword">exists</span>用的少。</span><br><span class="line"><span class="number">4.</span> 和前面的查询不同，这先执行主查询，然后主查询查询的结果，在根据子查询进行过滤，子查询中涉及到主查询中用到的字段，所以叫相关子查询。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 简单示例</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">exists</span>(<span class="keyword">SELECT</span> employee_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary <span class="operator">=</span> <span class="number">300000</span>) <span class="keyword">AS</span> <span class="string">&#x27;exists返回1或者0&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">exists</span>返回<span class="number">1</span>或者<span class="number">0</span>      <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">0</span>                    <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工的部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name <span class="keyword">FROM</span> departments a</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">exists</span>(<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> employees b <span class="keyword">WHERE</span> a.department_id <span class="operator">=</span> b.department_id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> department_name <span class="keyword">FROM</span> departments </span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> department_id <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询没有员工的部门</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> departments a </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">exists</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> employees b <span class="keyword">WHERE</span> a.department_id <span class="operator">=</span> b.department_id <span class="keyword">AND</span> b.department_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> departments a </span><br><span class="line"><span class="keyword">WHERE</span> a.department_id </span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> department_id <span class="keyword">FROM</span> employees b <span class="keyword">WHERE</span> b.department_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* WHERE b.department_id IS NOT NULL 不能省略</span></span><br><span class="line"><span class="comment">* 以下sql 查询结果为empty set</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> departments a </span><br><span class="line"><span class="keyword">WHERE</span> a.department_id </span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> department_id <span class="keyword">FROM</span> employees b);</span><br></pre></td></tr></table></figure>
<h3 id="NULL的大坑"><a href="#NULL的大坑" class="headerlink" title="NULL的大坑"></a>NULL的大坑</h3><p>not in 的情况下，子查询中列的值为 NULL 时，外查询的结果为空。建议：建表时，列不允许为空。</p>
<h2 id="第13篇：细说NULL导致的坑"><a href="#第13篇：细说NULL导致的坑" class="headerlink" title="第13篇：细说NULL导致的坑"></a>第13篇：细说NULL导致的坑</h2><h3 id="比较运算符中使用NULL"><a href="#比较运算符中使用NULL" class="headerlink" title="比较运算符中使用NULL"></a>比较运算符中使用NULL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">null</span> <span class="operator">=</span> <span class="keyword">null</span>, <span class="keyword">null</span> <span class="operator">!=</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">null</span> <span class="operator">=</span> <span class="keyword">null</span> <span class="operator">|</span> <span class="keyword">null</span> <span class="operator">!=</span> <span class="keyword">null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span> <span class="operator">&gt;</span> <span class="keyword">null</span>, <span class="number">1</span> <span class="operator">&lt;</span> <span class="keyword">null</span>, <span class="number">1</span> <span class="operator">!=</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">&gt;</span> <span class="keyword">null</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">&lt;</span> <span class="keyword">null</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">!=</span> <span class="keyword">null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">in</span> (<span class="keyword">null</span>),<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">null</span>),<span class="keyword">null</span> <span class="keyword">in</span> (<span class="keyword">null</span>),<span class="keyword">null</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">null</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------------+----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">in</span> (<span class="keyword">null</span>) <span class="operator">|</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">null</span>) <span class="operator">|</span> <span class="keyword">null</span> <span class="keyword">in</span> (<span class="keyword">null</span>) <span class="operator">|</span> <span class="keyword">null</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">null</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------------+----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>            <span class="operator">|</span> <span class="keyword">NULL</span>           <span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------------+----------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span><span class="operator">=</span><span class="keyword">any</span>(<span class="keyword">select</span> <span class="keyword">null</span>),<span class="keyword">null</span><span class="operator">=</span><span class="keyword">any</span>(<span class="keyword">select</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span><span class="operator">=</span><span class="keyword">any</span>(<span class="keyword">select</span> <span class="keyword">null</span>) <span class="operator">|</span> <span class="keyword">null</span><span class="operator">=</span><span class="keyword">any</span>(<span class="keyword">select</span> <span class="keyword">null</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span><span class="operator">=</span><span class="keyword">all</span>(<span class="keyword">select</span> <span class="keyword">null</span>),<span class="keyword">null</span><span class="operator">=</span><span class="keyword">all</span>(<span class="keyword">select</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span><span class="operator">=</span><span class="keyword">all</span>(<span class="keyword">select</span> <span class="keyword">null</span>) <span class="operator">|</span> <span class="keyword">null</span><span class="operator">=</span><span class="keyword">all</span>(<span class="keyword">select</span> <span class="keyword">null</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结论：任何值和NULL使用运算符（&gt;、&lt;、&gt;=、&lt;=、!=、&lt;&gt;）或者（in、not in、any/some、all）比较时，返回值都为NULL，NULL作为布尔值的时候，不为1也不为0。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 准备数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test1(a <span class="type">int</span>,b <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="keyword">null</span>),(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> a    <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="IN和NULL比较"><a href="#IN和NULL比较" class="headerlink" title="IN和NULL比较"></a>IN和NULL比较</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> a <span class="keyword">in</span> (<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> a <span class="keyword">in</span> (<span class="keyword">null</span>, <span class="number">1</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结论：当IN和NULL比较时，无法查询出为NULL的记录。</p>
</blockquote>
<h3 id="NOT-IN-和NULL比较"><a href="#NOT-IN-和NULL比较" class="headerlink" title="NOT IN 和NULL比较"></a>NOT IN 和NULL比较</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> a <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> a <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> a <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">null</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> a <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">2</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结论：当NOT IN 后面有NULL值时，不论什么情况下，整个sql的查询结果都为空。</p>
</blockquote>
<h3 id="EXISTS、NOT-EXISTS和NULL比较"><a href="#EXISTS、NOT-EXISTS和NULL比较" class="headerlink" title="EXISTS、NOT EXISTS和NULL比较"></a>EXISTS、NOT EXISTS和NULL比较</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test2; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 t1 <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test2 t2 <span class="keyword">where</span> t1.a <span class="operator">=</span> t2.a); </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec) </span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 t1 <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test2 t2 <span class="keyword">where</span> t1.a <span class="operator">=</span> t2.a); </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询语句中使用exists、not exists 对比 test1.a=test2.a，因为=不能比较NULL，结果和预期一致。</p>
</blockquote>
<h3 id="判断NULL用IS-NULL、IS-NOT-NULL"><a href="#判断NULL用IS-NULL、IS-NOT-NULL" class="headerlink" title="判断NULL用IS NULL、IS NOT NULL"></a>判断NULL用IS NULL、IS NOT NULL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">is</span> <span class="keyword">null</span>, <span class="number">1</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>, <span class="keyword">null</span> <span class="keyword">is</span> <span class="keyword">null</span>, <span class="keyword">null</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">is</span> <span class="keyword">null</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="operator">|</span> <span class="keyword">null</span> <span class="keyword">is</span> <span class="keyword">null</span> <span class="operator">|</span> <span class="keyword">null</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>                <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------+--------------+------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="聚合函数中的NULL"><a href="#聚合函数中的NULL" class="headerlink" title="聚合函数中的NULL"></a>聚合函数中的NULL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(a), <span class="built_in">count</span>(b), <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(a) <span class="operator">|</span> <span class="built_in">count</span>(b) <span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+----------+</span></span><br><span class="line"><span class="comment">-- count(a)返回了2行记录，a字段为NULL的没有统计出来。</span></span><br><span class="line"><span class="comment">-- count(b)返回了1行记录，b为NULL的2行记录没有统计出来。</span></span><br><span class="line"><span class="comment">-- count(*)可以统计所有数据，不论字段的数据是否为NULL。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> a <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> a    <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(a) <span class="keyword">from</span> test1 <span class="keyword">where</span> a <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(a) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="comment">-- 上面第1个sql使用is null查询出了结果，第2个sql中count(a)返回的是0行。</span></span><br><span class="line"><span class="comment">-- 结论：count(字段)无法统计字段为NULL的值，count(*)可以统计值为null的行。</span></span><br></pre></td></tr></table></figure>
<h3 id="NULL不能作主键的值"><a href="#NULL不能作主键的值" class="headerlink" title="NULL不能作主键的值"></a>NULL不能作主键的值</h3><p>结论：当字段为主键的时候，字段会自动设置为not null。</p>
<h2 id="第14篇：事务详解"><a href="#第14篇：事务详解" class="headerlink" title="第14篇：事务详解"></a>第14篇：事务详解</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 什么是事务？</span></span><br><span class="line">数据库中的事务是指对数据库执行一批操作，这些操作要么全部执行成功，要么全部失败，不会存在部分成功的情况。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务的几个特性(ACID)</span></span><br><span class="line"><span class="comment">-- 原子性(Atomicity)</span></span><br><span class="line">事务的整个过程如原子操作一样，最终要么全部成功，或者全部失败，这个原子性是从最终结果来看的，从最终结果来看这个过程是不可分割的。</span><br><span class="line"><span class="comment">-- 一致性(Consistency)</span></span><br><span class="line">一个事务必须使数据库从一个一致性状态变换到另一个一致性状态。</span><br><span class="line">一致性指的是数据处于一种有意义的状态。最常见的例子是转帐。例如从帐户A转一笔钱到帐户B上，如果帐户A上的钱减少了，而帐户B上的钱却没有增加，那么认为此时数据处于不一致的状态。</span><br><span class="line">所谓一致性，从实际的业务逻辑上来说，最终结果是对的、是跟程序员的所期望的结果完全符合的</span><br><span class="line"><span class="comment">-- 隔离性(Isolation)</span></span><br><span class="line">一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</span><br><span class="line"><span class="comment">-- 持久性(Durability)</span></span><br><span class="line">一个事务一旦提交，他对数据库中数据的改变就应该是永久性的。当事务提交之后，数据会持久化到硬盘，修改是永久性的。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL中事务操作</span></span><br><span class="line">mysql中事务默认是隐式事务，执行<span class="keyword">insert</span>、<span class="keyword">update</span>、<span class="keyword">delete</span>的时候，数据库自动开启事务、提交或回滚事务。</span><br><span class="line">是否开启隐式事务是由变量 autocommit 控制的。所以事务分为隐式事务和显式事务。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 隐式事务</span></span><br><span class="line">事务自动开启、提交或回滚，比如<span class="keyword">insert</span>、<span class="keyword">update</span>、<span class="keyword">delete</span>，事务的开启、提交或回滚由mysql内部自动控制的。</span><br><span class="line">查看变量 autocommit 是否开启了自动提交</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit    <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显式事务</span></span><br><span class="line">事务需要手动开启、提交或回滚，由开发者自己控制。<span class="number">2</span>种方式手动控制事务：</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式1 设置不自动提交事务 </span></span><br><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 执行事务操作 </span></span><br><span class="line"><span class="keyword">commit</span><span class="operator">|</span><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction; </span><br><span class="line"><span class="comment">-- 执行事务操作 </span></span><br><span class="line"><span class="keyword">commit</span><span class="operator">|</span><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- savepoint关键字</span></span><br><span class="line">可以将一大批操作分为几个部分，然后指定回滚某个部分。可以使用 savepoin 来实现，效果如下：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction; </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">values</span> (<span class="number">1</span>); </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">savepoint</span> part1;<span class="operator">/</span><span class="operator">/</span>设置一个保存点 </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">values</span> (<span class="number">2</span>); </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span> <span class="keyword">to</span> part1;<span class="operator">/</span><span class="operator">/</span>将<span class="keyword">savepoint</span> <span class="operator">=</span> part1的语句到当前语句之间所有的操作回滚 </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;<span class="operator">/</span><span class="operator">/</span>提交事务 </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只读事务</span></span><br><span class="line">表示在事务中执行的是一些只读操作，如查询，但是不会做<span class="keyword">insert</span>、<span class="keyword">update</span>、<span class="keyword">delete</span>操作，数据库内部对只读事务可能会有一些性能上的优化。</span><br><span class="line">用法如下：</span><br><span class="line"><span class="keyword">start</span> transaction read <span class="keyword">only</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">--</span> <span class="string">事务中的一些问题，这些问题主要是基于数据在多个事务中的可见性来说的。</span></span><br><span class="line"><span class="comment">#1 脏读</span></span><br><span class="line"><span class="comment">#[1]Transaction01将某条记录的AGE值从20修改为30。</span></span><br><span class="line"><span class="comment">#[2]Transaction02读取了Transaction01更新后的值：30。</span></span><br><span class="line"><span class="comment">#[3]Transaction01回滚，AGE值恢复到了20。</span></span><br><span class="line"><span class="comment">#[4]Transaction02读取到的30就是一个无效的值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 不可重复读</span></span><br><span class="line"><span class="comment">#[1]Transaction01读取了AGE值为20。</span></span><br><span class="line"><span class="comment">#[2]Transaction02将AGE值修改为30。</span></span><br><span class="line"><span class="comment">#[3]Transaction01再次读取AGE值为30，和第一次读取不一致。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 幻读</span></span><br><span class="line"><span class="comment">#[1]Transaction01读取了STUDENT表中的一部分数据。</span></span><br><span class="line"><span class="comment">#[2]Transaction02向STUDENT表中插入了新的行。</span></span><br><span class="line"><span class="comment">#[3]Transaction01读取了STUDENT表时，多出了一些行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4 读已提交</span></span><br><span class="line"><span class="comment"># 即一个事务操作过程中可以读取到其他事务已经提交的数据。</span></span><br><span class="line"><span class="comment"># 事务中的每次读取操作，读取到的都是数据库中其他事务已提交的最新的数据（相当于当前读）</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 事务的隔离级别</span></span><br><span class="line">当多个事务同时进行的时候，如何确保当前事务中数据的正确性，比如A、B两个事物同时进行的时候，A是否可以看到B已提交的数据或者B未提交的数据，这个需要依靠事务的隔离级别来保证，不同的隔离级别中所产生的效果是不一样的。</span><br><span class="line"></span><br><span class="line">事务隔离级别主要是解决了上面多个事务之间数据可见性及数据正确性的问题。</span><br><span class="line">隔离级别分为<span class="number">4</span>种：</span><br><span class="line"><span class="number">1.</span> 读未提交：READ<span class="operator">-</span>UNCOMMITTED</span><br><span class="line"><span class="number">2.</span> 读已提交：READ<span class="operator">-</span>COMMITTED</span><br><span class="line"><span class="number">3.</span> 可重复读：REPEATABLE<span class="operator">-</span>READ</span><br><span class="line"><span class="number">4.</span> 串行：SERIALIZABLE</span><br><span class="line">上面<span class="number">4</span>中隔离级别越来越强，会导致数据库的并发性也越来越低。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看隔离级别</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;transaction_isolation&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name         <span class="operator">|</span> <span class="keyword">Value</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> transaction_isolation <span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 隔离级别的设置</span></span><br><span class="line">修改mysql中的my.ini文件，将隔离级别设置为：READ<span class="operator">-</span>UNCOMMITTED：</span><br><span class="line">transaction<span class="operator">-</span>isolation<span class="operator">=</span>READ<span class="operator">-</span>UNCOMMITTED</span><br><span class="line">以管理员身份打开cmd窗口，重启mysql。</span><br></pre></td></tr></table></figure>
<p><strong>各种隔离级别中会出现的问题</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#各个隔离级别解决并发问题的能力见下表</span></span><br><span class="line"><span class="comment">#                      脏读     不可重复读  幻读</span></span><br><span class="line"><span class="comment">#READ UNCOMMITTED       有         有       无</span></span><br><span class="line"><span class="comment">#READ COMMITTED         无         有       无</span></span><br><span class="line"><span class="comment">#REPEATABLE READ        无         无       有</span></span><br><span class="line"><span class="comment">#SERIALIZABLE           无         无       无</span></span><br></pre></td></tr></table></figure>
<p>和网上有些不一样，主要是幻读这块，幻读只会在可重复读级别中才会出现，其他级别下不存在。网上版本如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#各个隔离级别解决并发问题的能力见下表</span></span><br><span class="line"><span class="comment">#                      脏读     不可重复读  幻读</span></span><br><span class="line"><span class="comment">#READ UNCOMMITTED       有         有       有</span></span><br><span class="line"><span class="comment">#READ COMMITTED         无         有       有</span></span><br><span class="line"><span class="comment">#REPEATABLE READ        无         无       有</span></span><br><span class="line"><span class="comment">#SERIALIZABLE           无         无       无</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 结论：</span></span><br><span class="line"><span class="comment">-- 读未提交情况下，可以读取到其他事务还未提交的数据，多次读取结果不一样，出现了脏读、不可重复读</span></span><br><span class="line"><span class="comment">-- 读已提交情况下，无法读取到其他事务还未提交的数据，可以读取到其他事务已经提交的数据，多次读取结果不一样，未出现脏读，出现了读已提交、不可重复读。</span></span><br><span class="line"><span class="comment">-- 可重复读情况下，未出现脏读，未读取到其他事务已提交的数据，多次读取结果一致，即可重复读。</span></span><br><span class="line"><span class="comment">-- SERIALIZABLE情况下，事务只能串行执行。串行情况下不存在脏读、不可重复读、幻读的问题了。</span></span><br><span class="line"><span class="comment">-- SERIALIZABLE会让并发的事务串行执行（多个事务之间读写、写读、写写会产生互斥，效果就是串行执行，多个事务之间的读读不会产生互斥）。</span></span><br><span class="line"><span class="comment">-- 读写互斥：事务A中先读取操作，事务B发起写入操作，事务A中的读取会导致事务B中的写入处于等待状态，直到A事务完成为止。</span></span><br></pre></td></tr></table></figure>
<p><strong>幻读演示</strong></p>
<p>幻读只在 REPEATABLE-READ 级别下出现，需要先把隔离级别改为可重复读。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t_user(id <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">unique</span> key); </span><br><span class="line"><span class="comment">-- 上面我们创建t_user表，name添加了唯一约束，表示name不能重复，否则报错。</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/21.png" alt="21"></p>
<p>A 窗口如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction; </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;路人甲Java&#x27;</span>; </span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec) </span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;路人甲Java&#x27;</span>); </span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;路人甲Java&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;路人甲Java&#x27;</span>; </span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec) mysql<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">commit</span>; </span><br></pre></td></tr></table></figure>
<p>B 窗口如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction; </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;路人甲Java&#x27;</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 路人甲Java <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+ </span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<p>A想插入数据 路人甲Java ，插之前先查询了一下（T5时刻）该用户是否存在，发现不存在，然后在T7时刻执行插入，报错了，报数据已经存在了，因为T6时刻 B 已经插入了 路人甲Java 。然后A有点郁闷，刚才查的时候不存在的，然后A不相信自己的眼睛，又去查一次（T8时刻），发现 路人甲Java 还是不存在的。此时A心里想：数据明明不存在啊，为什么无法插入呢？这不是懵逼了么，A觉得如同发生了幻觉一样。</p>
<h2 id="第15篇：视图"><a href="#第15篇：视图" class="headerlink" title="第15篇：视图"></a>第15篇：视图</h2><p>视图是在mysql5之后出现的，是一种虚拟表，行和列的数据来自于定义视图时使用的一些表中，视图的数据是在使用视图的时候动态生成的，视图只保存了sql的逻辑，不保存查询的结果。</p>
<p>当多个地方使用到同样的查询结果，并且该查询结果比较复杂的时候，可以使用视图来隐藏复杂的实现细节。</p>
<ul>
<li>视图和表的区别:</li>
</ul>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/22.png" alt="22"></p>
<ul>
<li>视图的好处</li>
</ul>
<p>简化复杂的sql操作，不用知道他的实现细节。隔离了原始表，可以不让使用视图的人接触原始的表，从而保护原始数据，提高了安全性。</p>
<p><a href="http://www.itsoku.com/article/209">测试数据</a></p>
<h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名 <span class="keyword">as</span> 查询语句;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1 查询姓名中包含a字符的员工名、部门、工种信息</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> myview <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> e.last_name, d.department_name, j.job_title</span><br><span class="line"><span class="keyword">from</span> employees e, departments d, jobs j</span><br><span class="line"><span class="keyword">where</span> e.department_id <span class="operator">=</span> d.department_id <span class="keyword">and</span> e.job_id <span class="operator">=</span> j.job_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> myview <span class="keyword">where</span> last_name <span class="keyword">like</span> <span class="string">&#x27;a%&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式1</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> 视图名 <span class="keyword">as</span> 查询语句;</span><br><span class="line"><span class="comment">-- 方式2</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> 视图名 <span class="keyword">as</span> 查询语句;</span><br></pre></td></tr></table></figure>
<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 可以同时删除多个视图，多个视图名称之间用逗号隔开。</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名<span class="number">1</span> [,视图名<span class="number">2</span>] [,视图名n];</span><br></pre></td></tr></table></figure>
<h3 id="查询视图结构"><a href="#查询视图结构" class="headerlink" title="查询视图结构"></a>查询视图结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式1</span></span><br><span class="line"><span class="keyword">desc</span> 视图名称; </span><br><span class="line"><span class="comment">-- 方式2 </span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> 视图名称;</span><br></pre></td></tr></table></figure>
<h3 id="更新视图【基本不用】"><a href="#更新视图【基本不用】" class="headerlink" title="更新视图【基本不用】"></a>更新视图【基本不用】</h3><h2 id="第16篇：变量"><a href="#第16篇：变量" class="headerlink" title="第16篇：变量"></a>第16篇：变量</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--变量分类</span></span><br><span class="line"><span class="number">1.</span> 系统变量</span><br><span class="line"><span class="number">2.</span> 自定义变量</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统变量</span></span><br><span class="line">系统变量由系统定义的，不是用户定义的，属于mysql服务器层面的。分为：</span><br><span class="line"><span class="number">1.</span> 全局变量</span><br><span class="line"><span class="number">2.</span> 会话变量</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看系统所有变量 </span></span><br><span class="line"><span class="keyword">show</span> [<span class="keyword">global</span> <span class="operator">|</span> session] variables; </span><br><span class="line"><span class="comment">-- 查看全局变量 </span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables;</span><br><span class="line"><span class="comment">-- 查看会话变量 </span></span><br><span class="line"><span class="keyword">show</span> session variables; </span><br><span class="line"><span class="keyword">show</span> variables;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看满足条件的系统变量(like模糊匹配) </span></span><br><span class="line"><span class="keyword">show</span> [<span class="keyword">global</span><span class="operator">|</span>session] <span class="keyword">like</span> <span class="string">&#x27;%变量名%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看指定的系统变量的值 </span></span><br><span class="line"><span class="keyword">select</span> @@[global.<span class="operator">|</span>session.]系统变量名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋值方式1 </span></span><br><span class="line"><span class="keyword">set</span> [<span class="keyword">global</span><span class="operator">|</span>session] 系统变量名<span class="operator">=</span>值; </span><br><span class="line"><span class="comment">-- 赋值方式2 </span></span><br><span class="line"><span class="keyword">set</span> @@[global.<span class="operator">|</span>session.]系统变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意：上面使用中介绍的，全局变量需要添加global关键字，会话变量需要添加session关键字，如果不写，默认为session级别。</span></span><br><span class="line"><span class="comment">全局变量的使用中用到了 @@ 关键字，后面会介绍自定义变量，自定义变量中使用了一个 @ 符号，这点需要和全局变量区分一下。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>mysql服务器每次启动都会为所有的系统变量设置初始值。我们为系统变量赋值，针对所有会话（连接）有效，可以跨连接，但不能跨重启，重启之后，mysql服务器会再次为所有系统变量赋初始值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="comment">/*查看所有全局变量*/</span> </span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables;</span><br><span class="line"><span class="comment">/*查看包含`tx`字符的变量*/</span> </span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%tx%&#x27;</span>;</span><br><span class="line"><span class="comment">/*查看指定名称的系统变量的值，如查看事务默认自动提交设置*/</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@global</span>.autocommit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*为某个系统变量赋值*/</span> </span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@global</span>.autocommit<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="会话变量"><a href="#会话变量" class="headerlink" title="会话变量"></a>会话变量</h3><p>针对当前会话（连接）有效，不能跨连接。会话变量是在连接创建时由mysql自动给当前会话设置的变量。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="comment">/*查看所有会话变量*/</span> </span><br><span class="line"><span class="keyword">show</span> session variables;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查看满足条件的会话变量*/</span></span><br><span class="line"><span class="comment">/*查看包含`char`字符变量名的会话变量*/</span> </span><br><span class="line"><span class="keyword">show</span> session variables <span class="keyword">like</span> <span class="string">&#x27;%char%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查看指定的会话变量的值*/</span></span><br><span class="line"><span class="comment">/*查看事务默认自动提交的设置*/</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>; </span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@session</span>.autocommit; </span><br><span class="line"><span class="comment">/*查看事务隔离级别*/</span> </span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@session</span>.tx_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*为某个会话变量赋值*/</span> </span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@session</span>.tx_isolation<span class="operator">=</span><span class="string">&#x27;read-uncommitted&#x27;</span>; </span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@tx</span>_isolation<span class="operator">=</span><span class="string">&#x27;read-committed&#x27;</span>; </span><br><span class="line"><span class="keyword">set</span> session tx_isolation<span class="operator">=</span><span class="string">&#x27;read-committed&#x27;</span>; </span><br><span class="line"><span class="keyword">set</span> tx_isolation<span class="operator">=</span><span class="string">&#x27;read-committed&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">变量由用户自定义的，而不是系统提供的。</span><br><span class="line">使用步骤： <span class="number">1.</span> 声明  <span class="number">2.</span> 赋值  <span class="number">3.</span> 使用（查看、比较、运算） </span><br><span class="line">分类 </span><br><span class="line"><span class="number">1.</span> 用户变量</span><br><span class="line"><span class="number">2.</span> 局部变量</span><br></pre></td></tr></table></figure>

<h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 作用域</span></span><br><span class="line">针对当前会话（连接）有效，作用域同会话变量。用户变量可以在任何地方使用也就是既可以在<span class="keyword">begin</span> <span class="keyword">end</span>里面使用，也可以在外面使用。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 声明并初始化(要求声明时必须初始化)</span></span><br><span class="line"><span class="comment">/*方式1*/</span> </span><br><span class="line"><span class="keyword">set</span> @变量名<span class="operator">=</span>值; </span><br><span class="line"><span class="comment">/*方式2*/</span> </span><br><span class="line"><span class="keyword">set</span> @变量名:<span class="operator">=</span>值; </span><br><span class="line"><span class="comment">/*方式3*/</span></span><br><span class="line"><span class="keyword">select</span> @变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 上面使用了 @ 符号，而上面介绍全局变量使用了2个 @ 符号，这点注意区分一下。</span></span><br><span class="line"><span class="comment">* set中 = 号前面:是可选的，select方式 = 前面必须有:</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 赋值（更新变量的值）</span></span><br><span class="line"><span class="comment">/*方式1：这块和变量的声明一样*/</span></span><br><span class="line"><span class="keyword">set</span> @变量名<span class="operator">=</span>值; </span><br><span class="line"><span class="keyword">set</span> @变量名:<span class="operator">=</span>值; </span><br><span class="line"><span class="keyword">select</span> @变量名:<span class="operator">=</span>值; </span><br><span class="line"><span class="comment">/*方式2*/</span></span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">into</span> @变量名 <span class="keyword">from</span> 表;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用</span></span><br><span class="line"><span class="keyword">select</span> @变量名;</span><br></pre></td></tr></table></figure>
<h4 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a>综合示例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*set方式创建变量并初始化*/</span> </span><br><span class="line"><span class="keyword">set</span> <span class="variable">@username</span><span class="operator">=</span><span class="string">&#x27;路人甲java&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*select into方式创建变量*/</span> </span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;javacode2018&#x27;</span> <span class="keyword">into</span> <span class="variable">@gzh</span>; </span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> <span class="variable">@empcount</span> <span class="keyword">from</span> employees; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*select :=方式创建变量*/</span> </span><br><span class="line"><span class="keyword">select</span> <span class="variable">@first</span>_name:<span class="operator">=</span><span class="string">&#x27;路人甲Java&#x27;</span>,<span class="variable">@email</span>:<span class="operator">=</span><span class="string">&#x27;javacode2018@163.com&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用变量*/</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees (first_name,email) <span class="keyword">values</span> (<span class="variable">@first</span>_name,<span class="variable">@email</span>);</span><br></pre></td></tr></table></figure>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 作用域</span></span><br><span class="line"><span class="keyword">declare</span>用于定义局部变量，在存储过程和函数中通过<span class="keyword">declare</span>定义变量，在begin...end中，并且可以重复定义多个变量。<span class="keyword">declare</span>变量的作用范围同编程里面类似，在这里一般是在对应的<span class="keyword">begin</span>和<span class="keyword">end</span>之间。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 声明</span></span><br><span class="line"><span class="keyword">declare</span> 变量名 变量类型; </span><br><span class="line"><span class="keyword">declare</span> 变量名 变量类型 [<span class="keyword">default</span> 默认值];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line"><span class="comment">/*方式1*/</span> </span><br><span class="line"><span class="keyword">set</span> 局部变量名<span class="operator">=</span>值; </span><br><span class="line"><span class="keyword">set</span> 局部变量名:<span class="operator">=</span>值; </span><br><span class="line"><span class="keyword">select</span> 局部变量名:<span class="operator">=</span>值; </span><br><span class="line"><span class="comment">/*方式2*/</span> </span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">into</span> 局部变量名 <span class="keyword">from</span> 表;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用（查看变量的值）</span></span><br><span class="line"><span class="keyword">select</span> 局部变量名;</span><br></pre></td></tr></table></figure>
<h4 id="综合示例-1"><a href="#综合示例-1" class="headerlink" title="综合示例"></a>综合示例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*创建表test1*/</span> </span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> IF <span class="keyword">EXISTS</span> test1; </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test1(a <span class="type">int</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,b <span class="type">int</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">/*声明脚本的结束符为$$*/</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> proc1; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc1() </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="comment">/*声明了一个局部变量*/</span> </span><br><span class="line"><span class="keyword">DECLARE</span> v_a <span class="type">int</span>; </span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="built_in">max</span>(a),<span class="number">0</span>)<span class="operator">+</span><span class="number">1</span> <span class="keyword">into</span> v_a <span class="keyword">from</span> test1; </span><br><span class="line"><span class="keyword">select</span> <span class="variable">@v</span>_b:<span class="operator">=</span>v_a<span class="operator">*</span><span class="number">2</span>; </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test1(a,b) <span class="keyword">select</span> v_a,<span class="variable">@v</span>_b; </span><br><span class="line"><span class="keyword">end</span> $$ </span><br><span class="line"></span><br><span class="line"><span class="comment">/*声明脚本的结束符为;*/</span> </span><br><span class="line">DELIMITER ; </span><br><span class="line"><span class="comment">/*调用存储过程*/</span> </span><br><span class="line"><span class="keyword">call</span> proc1(); </span><br><span class="line"><span class="comment">/*查看结果*/</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1;</span><br></pre></td></tr></table></figure>
<h3 id="用户变量和局部变量对比"><a href="#用户变量和局部变量对比" class="headerlink" title="用户变量和局部变量对比"></a>用户变量和局部变量对比</h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/23.png" alt="23"></p>
<h2 id="第17篇：存储过程-amp-自定义函数详解"><a href="#第17篇：存储过程-amp-自定义函数详解" class="headerlink" title="第17篇：存储过程&amp;自定义函数详解"></a>第17篇：存储过程&amp;自定义函数详解</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 准备数据</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t_user; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user ( </span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> COMMENT <span class="string">&#x27;编号&#x27;</span>, </span><br><span class="line">  age <span class="type">SMALLINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>, </span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span> </span><br><span class="line">) COMMENT <span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>概念:   一组预编译好的sql语句集合，理解成批处理语句。</p>
<p>好处：提高代码的重用性，简化操作，减少编译次数并且减少和数据库服务器连接的次数，提高了效率。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建存储过程</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名([参数模式] 参数名 参数类型) </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	存储过程体</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 参数模式有3种：</span></span><br><span class="line"><span class="comment">-- in：该参数可以作为输入，也就是该参数需要调用方传入值。</span></span><br><span class="line"><span class="comment">-- out：该参数可以作为输出，也就是说该参数可以作为返回值。</span></span><br><span class="line"><span class="comment">-- inout：该参数既可以作为输入也可以作为输出，就是该参数需要在调用时传入值，又可作为返回值。</span></span><br><span class="line"><span class="comment">-- 参数模式默认为IN。</span></span><br><span class="line"><span class="comment">-- 一个存储过程可以有多个输入、多个输出、多个输入输出参数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">call</span> 存储过程名称(参数列表);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除存储过程</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> [if <span class="keyword">exists</span>] 存储过程名称;</span><br><span class="line"></span><br><span class="line">存储过程只能一个个删除，不能批量删除。</span><br><span class="line">if <span class="keyword">exists</span>：表示存储过程存在的情况下删除。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改存储过程</span></span><br><span class="line">存储过程不能修改，若涉及到修改的，可以先删除，然后重建。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看存储过程</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称;</span><br></pre></td></tr></table></figure>
<h4 id="存储过程案例"><a href="#存储过程案例" class="headerlink" title="存储过程案例"></a>存储过程案例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例1：空参列表</span></span><br><span class="line"><span class="comment">/*设置结束符为$*/</span> </span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="comment">/*如果存储过程存在则删除*/</span> </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> proc1; </span><br><span class="line"><span class="comment">/*创建存储过程proc1*/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc1() </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">30</span>,<span class="string">&#x27;路人甲Java&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">50</span>,<span class="string">&#x27;刘德华&#x27;</span>); </span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line"><span class="comment">/*将结束符置为;*/</span> </span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">/*调用存储过程*/</span></span><br><span class="line"><span class="keyword">CALL</span> proc1();</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> age <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span>  <span class="number">30</span> <span class="operator">|</span> Java <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>  <span class="number">20</span> <span class="operator">|</span> C<span class="operator">+</span><span class="operator">+</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+------+</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例2：带in参数的存储过程</span></span><br><span class="line"><span class="comment">/*设置结束符为$*/</span> </span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="comment">/*如果存储过程存在则删除*/</span> </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> proc2; </span><br><span class="line"><span class="comment">/*创建存储过程proc2*/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc2(id <span class="type">int</span>,age <span class="type">int</span>,<span class="keyword">in</span> name <span class="type">varchar</span>(<span class="number">16</span>)) </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user <span class="keyword">VALUES</span> (id,age,name); </span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line"><span class="comment">/*将结束符置为;*/</span> </span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@id</span><span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@age</span><span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@name</span><span class="operator">=</span><span class="string">&#x27;张学友&#x27;</span>;</span><br><span class="line"><span class="keyword">call</span> proc2(<span class="variable">@id</span>,<span class="variable">@age</span>,<span class="variable">@name</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> age <span class="operator">|</span> name   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span>  <span class="number">30</span> <span class="operator">|</span> Java   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>  <span class="number">20</span> <span class="operator">|</span> C<span class="operator">+</span><span class="operator">+</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span>  <span class="number">10</span> <span class="operator">|</span> 张学友 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+--------+</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例3：带out参数的存储过程</span></span><br><span class="line"><span class="comment">/*如果存储过程存在则删除*/</span> </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> proc3; </span><br><span class="line"><span class="comment">/*设置结束符为$*/</span> </span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="comment">/*创建存储过程proc3*/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc3(id <span class="type">int</span>,age <span class="type">int</span>,name <span class="type">varchar</span>(<span class="number">16</span>),<span class="keyword">out</span> user_count <span class="type">int</span>,<span class="keyword">out</span> max_id <span class="type">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user <span class="keyword">VALUES</span> (id,age,name); </span><br><span class="line"><span class="comment">/*查询出t_user表的记录,放入user_count中,max_id用来存储t_user中最大的id*/</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),<span class="built_in">max</span>(id) <span class="keyword">into</span> user_count,max_id <span class="keyword">from</span> t_user; </span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line"><span class="comment">/*将结束符置为;*/</span> </span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建了3个自定义变量*/</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@id</span>:<span class="operator">=</span><span class="number">4</span>,<span class="variable">@age</span>:<span class="operator">=</span><span class="number">55</span>,<span class="variable">@name</span>:<span class="operator">=</span><span class="string">&#x27;郭富城&#x27;</span>; </span><br><span class="line"><span class="comment">/*调用存储过程*/</span> </span><br><span class="line"><span class="keyword">CALL</span> proc3(<span class="variable">@id</span>,<span class="variable">@age</span>,<span class="variable">@name</span>,<span class="variable">@user</span>_count,<span class="variable">@max</span>_id);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@user</span>_count,<span class="variable">@max</span>_id; </span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@user</span>_count <span class="operator">|</span> <span class="variable">@max</span>_id <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例4：带inout参数的存储过程</span></span><br><span class="line"><span class="comment">/*如果存储过程存在则删除*/</span> </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> proc4; </span><br><span class="line"><span class="comment">/*设置结束符为$*/</span> </span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="comment">/*创建存储过程proc4*/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc4(<span class="keyword">INOUT</span> a <span class="type">int</span>,<span class="keyword">INOUT</span> b <span class="type">int</span>) </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">SET</span> a <span class="operator">=</span> a<span class="operator">*</span><span class="number">2</span>; </span><br><span class="line"><span class="keyword">select</span> b<span class="operator">*</span><span class="number">2</span> <span class="keyword">into</span> b; </span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line"><span class="comment">/*将结束符置为;*/</span> </span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建了2个自定义变量*/</span> </span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="number">10</span>,<span class="variable">@b</span>:<span class="operator">=</span><span class="number">20</span>;</span><br><span class="line"><span class="comment">/*调用存储过程*/</span> </span><br><span class="line"><span class="keyword">CALL</span> proc4(<span class="variable">@a</span>,<span class="variable">@b</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@a</span>,<span class="variable">@b</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@a</span> <span class="operator">|</span> <span class="variable">@b</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> <span class="number">40</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例5：查看存储过程</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> proc1;</span><br></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>概念：一组预编译好的sql语句集合，理解成批处理语句。类似于java中的方法，但是必须有返回值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 函数名(参数名称 参数类型) </span><br><span class="line"><span class="keyword">returns</span> 返回值类型 </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	函数体 </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数是可选的。返回值是必须的。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line"><span class="keyword">select</span> 函数名(实参列表); </span><br><span class="line"><span class="comment">-- 删除函数</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> [if <span class="keyword">exists</span>] 函数名;</span><br><span class="line"><span class="comment">-- 查看函数详细</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">function</span> 函数名;</span><br></pre></td></tr></table></figure>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例1：无参函数</span></span><br><span class="line"><span class="comment">/*删除fun1*/</span> </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> fun1; </span><br><span class="line"><span class="comment">/*设置结束符为$*/</span> </span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="comment">/*创建函数*/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fun1() </span><br><span class="line"><span class="keyword">returns</span> <span class="type">INT</span> </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> max_id <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(id) <span class="keyword">INTO</span> max_id <span class="keyword">FROM</span> t_user; </span><br><span class="line"><span class="keyword">return</span> max_id; </span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line"><span class="comment">/*设置结束符为;*/</span> </span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> fun1();</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> fun1() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例2：有参函数</span></span><br><span class="line"><span class="comment">/*删除函数*/</span> </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> get_user_id; </span><br><span class="line"><span class="comment">/*设置结束符为$*/</span> </span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="comment">/*创建函数*/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_user_id(v_name <span class="type">VARCHAR</span>(<span class="number">16</span>)) </span><br><span class="line"><span class="keyword">returns</span> <span class="type">INT</span> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> r_id <span class="type">int</span>; </span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">INTO</span> r_id <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> name <span class="operator">=</span> v_name; </span><br><span class="line"><span class="keyword">return</span> r_id; </span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line"><span class="comment">/*设置结束符为;*/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> get_user_id(name) <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> get_user_id(name) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span>                 <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>                 <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>                 <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br></pre></td></tr></table></figure>
<h3 id="存储过程和函数的区别"><a href="#存储过程和函数的区别" class="headerlink" title="存储过程和函数的区别"></a>存储过程和函数的区别</h3><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/24.png" alt="24"></p>
<h2 id="第18篇：流程控制语句"><a href="#第18篇：流程控制语句" class="headerlink" title="第18篇：流程控制语句"></a>第18篇：流程控制语句</h2><h3 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(条件表达式,值<span class="number">1</span>,值<span class="number">2</span>);</span><br><span class="line"><span class="comment">-- if函数有3个参数。当参数1为true的时候，返回 值1 ，否则返回 值2，常用在select中。</span></span><br></pre></td></tr></table></figure>
<h3 id="CASE结构"><a href="#CASE结构" class="headerlink" title="CASE结构"></a>CASE结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 第一种用法</span></span><br><span class="line"><span class="keyword">case</span> 表达式 </span><br><span class="line"><span class="keyword">when</span> 值<span class="number">1</span> <span class="keyword">then</span> 结果<span class="number">1</span>或者语句<span class="number">1</span>（如果是语句需要加分号） </span><br><span class="line"><span class="keyword">when</span> 值<span class="number">2</span> <span class="keyword">then</span> 结果<span class="number">2</span>或者语句<span class="number">2</span> </span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> 结果n或者语句n </span><br><span class="line"><span class="keyword">end</span> [<span class="keyword">case</span>] （如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>之间需要加<span class="keyword">case</span>，如果在<span class="keyword">select</span>后则不需要）</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第二种用法</span></span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> 条件<span class="number">1</span> <span class="keyword">then</span> 结果<span class="number">1</span>或者语句<span class="number">1</span>（如果是语句需要加分号） </span><br><span class="line"><span class="keyword">when</span> 条件<span class="number">2</span> <span class="keyword">then</span> 结果<span class="number">2</span>或者语句<span class="number">2</span> </span><br><span class="line">... </span><br><span class="line"><span class="keyword">else</span> 结果n或者语句n </span><br><span class="line"><span class="keyword">end</span> [<span class="keyword">case</span>] （如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>之间需要加<span class="keyword">case</span>，如果是在<span class="keyword">select</span>后面<span class="keyword">case</span>可以省略）</span><br></pre></td></tr></table></figure>
<h3 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if 条件语句<span class="number">1</span> <span class="keyword">then</span> 语句<span class="number">1</span>; </span><br><span class="line">elseif 条件语句<span class="number">2</span> <span class="keyword">then</span> 语句<span class="number">2</span>; </span><br><span class="line">... </span><br><span class="line"><span class="keyword">else</span> 语句n; </span><br><span class="line"><span class="keyword">end</span> if;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>只能使用在begin end之间。</p>
</blockquote>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql中循环有<span class="number">3</span>种写法</span><br><span class="line"><span class="number">1.</span> while：类似于java中的while循环</span><br><span class="line"><span class="number">2.</span> repeat：类似于java中的do while循环</span><br><span class="line"><span class="number">3.</span> loop：类似于java中的while(<span class="literal">true</span>)死循环，需要在内部进行控制。</span><br><span class="line"></span><br><span class="line">对循环内部的流程进行控制，如：</span><br><span class="line">结束本次循环</span><br><span class="line">类似于java中的 continue</span><br><span class="line">    iterate 循环标签;</span><br><span class="line"></span><br><span class="line">退出循环</span><br><span class="line">类似于java中的 break</span><br><span class="line">    leave 循环标签;</span><br></pre></td></tr></table></figure>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[标签:]while 循环条件 do </span><br><span class="line">循环体 </span><br><span class="line"><span class="keyword">end</span> while [标签];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 标签：是给while取个名字，标签和 iterate 、 leave 结合用于在循环内部对循环进行控制：如：跳出循环、结束本次循环</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例1：无循环控制语句</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc3(v_count <span class="type">int</span>) </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>; </span><br><span class="line">	a:WHILE i<span class="operator">&lt;=</span>v_count DO </span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">into</span> test1 <span class="keyword">values</span> (i); </span><br><span class="line">		<span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">	<span class="keyword">END</span> WHILE; </span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例2：添加leave控制语句</span></span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc4(v_count <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>; </span><br><span class="line">	a:WHILE i<span class="operator">&lt;=</span>v_count DO </span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">into</span> test1 <span class="keyword">values</span> (i); </span><br><span class="line">		<span class="comment">/*判断i=10，离开循环a*/</span> </span><br><span class="line">		IF i<span class="operator">=</span><span class="number">10</span> <span class="keyword">THEN</span> </span><br><span class="line">			LEAVE a; </span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">		<span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">	 <span class="keyword">END</span> WHILE; </span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例3：添加iterate控制语句</span></span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc5(v_count <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	a:WHILE i<span class="operator">&lt;=</span>v_count DO </span><br><span class="line">	<span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">	<span class="comment">/*如果i不为偶数，跳过本次循环*/</span> </span><br><span class="line">	IF i<span class="operator">%</span><span class="number">2</span><span class="operator">!=</span><span class="number">0</span> <span class="keyword">THEN</span> </span><br><span class="line">		ITERATE a; </span><br><span class="line">	<span class="keyword">END</span> IF; </span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">into</span> test1 <span class="keyword">values</span> (i); </span><br><span class="line">    <span class="keyword">END</span> WHILE; </span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
<h3 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[标签:]repeat </span><br><span class="line">循环体; </span><br><span class="line">until 结束循环的条件 <span class="keyword">end</span> repeat [标签];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 类似于do...while，不管如何循环都会先执行一次，然后再判断结束循环的条件</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc6(v_count <span class="type">int</span>) </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>; </span><br><span class="line">	a:REPEAT </span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">into</span> test1 <span class="keyword">values</span> (i); </span><br><span class="line">		<span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">	UNTIL i<span class="operator">&gt;</span>v_count </span><br><span class="line">	<span class="keyword">END</span> REPEAT; </span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>repeat中 iterate 和 leave 用法和while中类似</p>
</blockquote>
<h3 id="loop循环"><a href="#loop循环" class="headerlink" title="loop循环"></a>loop循环</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[标签:]loop </span><br><span class="line">循环体; </span><br><span class="line"><span class="keyword">end</span> loop [标签];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- loop相当于一个死循环，需要在循环体中使用 iterate 或者 leave 来控制循环的执行。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc7(v_count <span class="type">int</span>) </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line">	a:LOOP <span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">	<span class="comment">/*当i&gt;v_count的时候退出循环*/</span> </span><br><span class="line">		IF i<span class="operator">&gt;</span>v_count <span class="keyword">THEN</span> </span><br><span class="line">			LEAVE a; </span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">into</span> test1 <span class="keyword">values</span> (i); </span><br><span class="line">	<span class="keyword">END</span> LOOP a;</span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>loop中 iterate 和 leave 用法和while中类似</p>
</blockquote>
<h2 id="第19篇：游标详解-略"><a href="#第19篇：游标详解-略" class="headerlink" title="第19篇：游标详解   略"></a>第19篇：游标详解   略</h2><h2 id="第20篇：异常捕获及处理详解"><a href="#第20篇：异常捕获及处理详解" class="headerlink" title="第20篇：异常捕获及处理详解"></a>第20篇：异常捕获及处理详解</h2><h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql内部异常</span></span><br><span class="line">当我们执行一些<span class="keyword">sql</span>的时候，可能违反了mysql的一些约束，导致mysql内部报错，如插入数据违反唯一约束，更新数据超时等，此时异常是由mysql内部抛出的，我们将这些由mysql抛出的异常统称为内部异常。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外部异常</span></span><br><span class="line">当我们执行一个<span class="keyword">update</span>的时候，可能我们期望影响<span class="number">1</span>行，但是实际上影响的不是<span class="number">1</span>行数据，这种情况：<span class="keyword">sql</span>的执行结果和期望的结果不一致，这种情况也我们也把他作为外部异常处理，我们将<span class="keyword">sql</span>执行结果和期望结果不一致的情况统称为外部异常。</span><br></pre></td></tr></table></figure>
<h3 id="MySQL内部异常"><a href="#MySQL内部异常" class="headerlink" title="MySQL内部异常"></a>MySQL内部异常</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- test1表中a为主键，向test1表插入2条相同数据，并且放在一个事务中执行，最终要么都插入成功，要么都失败。</span></span><br><span class="line"><span class="comment">-- 由于test1表中的a字段是主键，插入第二条数据时违反了a字段的主键约束，mysql内部抛出了异常，导致第二条数据插入失败，最终只有第一条数据插入成功了。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*正确的解决方案*/</span></span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc2(a1 <span class="type">int</span>,a2 <span class="type">int</span>) </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="comment">/*声明一个变量，标识是否有sql异常*/</span> </span><br><span class="line"><span class="keyword">DECLARE</span> hasSqlError <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span>;</span><br><span class="line"><span class="comment">/*在执行过程中出任何异常设置hasSqlError为TRUE*/</span> </span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLEXCEPTION</span> <span class="keyword">SET</span> hasSqlError<span class="operator">=</span><span class="literal">TRUE</span>; </span><br><span class="line"><span class="keyword">START</span> TRANSACTION; </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1(a) <span class="keyword">VALUES</span> (a1); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1(a) <span class="keyword">VALUES</span> (a2); </span><br><span class="line">IF hasSqlError <span class="keyword">THEN</span> </span><br><span class="line">	<span class="keyword">ROLLBACK</span>; </span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">COMMIT</span>; </span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
<h3 id="外部异常"><a href="#外部异常" class="headerlink" title="外部异常"></a>外部异常</h3><p>外部异常不是由mysql内部抛出的错误，而是由于sql的执行结果和期望的结果不一致的时候，我们需要对这种情况做一些处理，如回滚操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例如2个下单的操作并发执行  解决方案：乐观锁</span></span><br><span class="line"><span class="comment">乐观锁的过程：用期望的值和目标值进行比较，如果相同，则更新目标值，否则什么也不做。</span></span><br><span class="line"><span class="comment">添加一个 version 字段，每次更新数据的时候+1，更新数据的时候将version作为条件去执行update，根据update影响行数来判断执行是否成功。*/</span></span><br><span class="line"></span><br><span class="line">t1：打开事务<span class="keyword">start</span> transaction </span><br><span class="line">t2：<span class="keyword">select</span>获取记录R1,声明变量v<span class="operator">=</span>R1.version </span><br><span class="line">t3：对R1进行编辑 </span><br><span class="line">t4：执行更新操作 <span class="keyword">update</span> R1 <span class="keyword">set</span> version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> user_id<span class="operator">=</span>#user_id# <span class="keyword">and</span> version <span class="operator">=</span> #v#; t5：t4中的<span class="keyword">update</span>会返回影响的行数，我们将其记录在count中，然后根据count来判断提交还是回滚 </span><br><span class="line"><span class="comment">/*获取影响行数*/</span> </span><br><span class="line"><span class="keyword">select</span> ROW_COUNT() <span class="keyword">INTO</span> cnt;</span><br><span class="line">	if(cnt==1)&#123; </span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span>提交事务</span><br><span class="line">		<span class="keyword">commit</span>; </span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span>回滚事务 </span><br><span class="line">		<span class="keyword">rollback</span>; </span><br><span class="line">	&#125;</span><br><span class="line">上面重点在于步骤t4，当多个线程同时执行到t1，他们看到的R1是一样的，但是当他们执行到t4的时候，数据库会对<span class="keyword">update</span>的这行记录加锁，确保并发情况下排队执行，所以只有第一个的<span class="keyword">update</span>会返回<span class="number">1</span>，其他的<span class="keyword">update</span>结果会返回<span class="number">0</span>，然后后面会判断count是否为<span class="number">1</span>，进而对事务进行提交或者回滚。可以通过count的值知道修改数据是否成功了。</span><br><span class="line">上面这种方式就乐观锁。我们可以通过乐观锁的方式确保数据并发修改过程中的正确性。</span><br></pre></td></tr></table></figure>


<h2 id="第21篇：什么是索引？"><a href="#第21篇：什么是索引？" class="headerlink" title="第21篇：什么是索引？"></a>第21篇：什么是索引？</h2><p>索引是帮助 MySQL 高效获取数据的数据结构。</p>
<h2 id="第22篇：MySQL索引原理详解"><a href="#第22篇：MySQL索引原理详解" class="headerlink" title="第22篇：MySQL索引原理详解"></a>第22篇：MySQL索引原理详解</h2><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 磁盘中数据的存取</span></span><br><span class="line"><span class="operator">-</span> 以机械硬盘来说，先了解几个概念。</span><br><span class="line"><span class="operator">-</span> 扇区：磁盘存储的最小单位，扇区一般大小为<span class="number">512</span>Byte。</span><br><span class="line"><span class="operator">-</span> 磁盘块：文件系统与磁盘交互的的最小单位（计算机系统读写磁盘的最小单位），一个磁盘块由连续几个(<span class="number">2</span><span class="operator">^</span>n)扇区组   成，块一般大小一般为<span class="number">4</span>KB。</span><br><span class="line"><span class="operator">-</span> 磁盘读取数据：磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为寻道时间、旋转延迟、传输时间三   个部分:</span><br><span class="line">  <span class="operator">-</span> 寻道时间指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在<span class="number">5</span>ms以下；</span><br><span class="line">  <span class="operator">-</span> 旋转延迟就是我们经常听说的磁盘转速，比如一个磁盘<span class="number">7200</span>转，表示每分钟能转<span class="number">7200</span>次，也就是说<span class="number">1</span>秒钟能转<span class="number">120</span>     次，旋转延迟就是<span class="number">1</span><span class="operator">/</span><span class="number">120</span><span class="operator">/</span><span class="number">2</span> <span class="operator">=</span> <span class="number">4.17</span>ms；</span><br><span class="line">  <span class="operator">-</span> 传输时间指从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计。</span><br><span class="line">一次磁盘IO的时间约等于 <span class="number">5</span><span class="operator">+</span><span class="number">4.17</span> <span class="operator">=</span> <span class="number">9</span>ms左右，听起来还挺不错的，但要知道一台<span class="number">500</span> <span class="operator">-</span>MIPS的机器每秒可以执行<span class="number">5</span>亿条指令，因为指令依靠的是电的性质，换句话说执行一次IO的时间可以执行<span class="number">40</span>万条指令，数据库动辄十万百万乃至千万级数据，每次<span class="number">9</span>毫秒的时间，显然是个灾难。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- MySQL中的页</span></span><br><span class="line">mysql中和磁盘交互的最小单位称为页，页是mysql内部定义的一种数据结构，默认为<span class="number">16</span>kb，相当于<span class="number">4</span>个磁盘块，也就是说mysql每次从磁盘中读取一次数据是<span class="number">16</span>KB，要么不读取，要读取就是<span class="number">16</span>KB，此值可以修改的。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据检索过程</span></span><br><span class="line">我们对数据存储方式不做任何优化，直接将数据库中表的记录存储在磁盘中，假如某个表只有一个字段，为<span class="type">int</span>类型，<span class="type">int</span>占用<span class="number">4</span>个byte，每个磁盘块可以存储<span class="number">1000</span>条记录，<span class="number">100</span>万的记录需要<span class="number">1000</span>个磁盘块，如果我们需要从这<span class="number">100</span>万记录中检索所需要的记录，需要读取<span class="number">1000</span>个磁盘块的数据（需要<span class="number">1000</span>次io），每次io需要<span class="number">9</span>ms，那么<span class="number">1000</span>次需要<span class="number">9</span>s，<span class="number">100</span>条数据随便一个查询就是<span class="number">9</span>秒，这种情况显然是不行的。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 我们迫切的需求是什么？</span></span><br><span class="line"><span class="number">1.</span> 需要一种数据存储结构：当从磁盘中检索数据的时候能减少磁盘的io次数，最好能够降低到一个稳定的常量值</span><br><span class="line"><span class="number">2.</span> 需要一种检索算法：当从磁盘中读取磁盘块的数据之后，这些块中可能包含多条记录，这些记录被加载到内存中，那么需要一种算法能够快速从内存多条记录中快速检索出目标数据</span><br></pre></td></tr></table></figure>

<h3 id="常用的检索算法和数据结构"><a href="#常用的检索算法和数据结构" class="headerlink" title="常用的检索算法和数据结构"></a>常用的检索算法和数据结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 循环遍历查找</span></span><br><span class="line">n条数据，时间复杂度为O(n)，最快需要<span class="number">1</span>次，最坏的情况需要n次，查询效率不稳定。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 二分法查找</span></span><br><span class="line">二分法查找时间复杂度是: O(logN) (N为数据量)，<span class="number">100</span>万数据查找最多只需要<span class="number">20</span>次。</span><br><span class="line">优点：定位数据非常快，前提是：目标数组是有序的。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有序数组</span></span><br><span class="line">如果我们将mysql中表的数据以有序数组的方式存储在磁盘中，那么我们定位数据步骤是：</span><br><span class="line"><span class="number">1.</span> 取出目标表的所有数据，存放在一个有序数组中</span><br><span class="line"><span class="number">2.</span> 如果目标表的数据量非常大，从磁盘中加载到内存中需要的内存也非常大</span><br><span class="line">步骤<span class="number">1</span>取出所有数据耗费的io次数太多，步骤<span class="number">2</span>耗费的内存空间太大，还有新增数据的时候，为了保证数组有序，插入数据会涉及到数组内部数据的移动，也是比较耗时的，显然这种方式不可取。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 链表</span></span><br><span class="line">优点：可以快速定位到上一个或者下一个节点。可以快速删除数据，只需改变指针的指向。</span><br><span class="line">缺点：无法通过下标随机访问数据。查找数据需从第一个节点开始遍历，最差时间是O(N)。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 二叉查找树</span></span><br><span class="line">查询数据的效率不稳定，若树左右比较平衡的时，最差情况为O(logN)，如果插入数据是有序的，退化为了链表，查询时间变成了O(N)。</span><br><span class="line">数据量大的情况下，会导致树的高度变高，如果每个节点对应磁盘的一个块来存储一条数据，需io次数大幅增加，显然用此结构来存储数据是不可取的。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 平衡二叉树</span></span><br><span class="line">平衡二叉树相对于二叉树来说，树的左右比较平衡，不会出现二叉树那样退化成链表的情况，不管怎么插入数据，最终通过一些调整，都能够保证树左右高度相差不大于<span class="number">1</span>。这样可以让查询速度比较稳定，查询中遍历节点控制在O(logN)范围内。</span><br><span class="line">如果数据都存储在内存中，采用AVL树来存储，还是可以的，查询效率非常高。不过我们的数据是存在磁盘中，用过采用这种结构，每个节点对应一个磁盘块，数据量大的时候，也会和二叉树一样，会导致树的高度变高，增加了io次数，显然用这种结构存储数据也是不可取的。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- B-树</span></span><br><span class="line">一棵m阶的B<span class="operator">-</span>Tree有如下特性</span><br><span class="line"><span class="number">1.</span> 每个节点最多有m个孩子，m称为b树的阶</span><br><span class="line"><span class="number">2.</span> 除了根节点和叶子节点外，其它每个节点至少有<span class="built_in">Ceil</span>(m<span class="operator">/</span><span class="number">2</span>)个孩子</span><br><span class="line"><span class="number">3.</span> 若根节点不是叶子节点，则至少有<span class="number">2</span>个孩子</span><br><span class="line"><span class="number">4.</span> 所有叶子节点都在同一层，且不包含其它关键字信息</span><br><span class="line"><span class="number">5.</span> 每个非终端节点包含n个关键字（健值）信息</span><br><span class="line"><span class="number">6.</span> 关键字的个数n满足：<span class="built_in">ceil</span>(m<span class="operator">/</span><span class="number">2</span>)<span class="number">-1</span> <span class="operator">&lt;=</span> n <span class="operator">&lt;=</span> m<span class="number">-1</span></span><br><span class="line"><span class="number">7.</span> ki(i<span class="operator">=</span><span class="number">1</span>,…n)为关键字，且关键字升序排序</span><br><span class="line"><span class="number">8.</span> Pi(i<span class="operator">=</span><span class="number">1</span>,…n)为指向子树根节点的指针。P(i<span class="number">-1</span>)指向的子树的所有节点关键字均小于ki，但都大于k(i<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<p>B-Tree结构的数据可以让系统高效的找到数据所在的磁盘块。为了描述B-Tree，首先定义一条记录为一个二元组[key, data] ，key为记录的键值，对应表中的主键值，data为一行记录中除主键外的数据。对于不同的记录，key值互不相同。B-Tree中的每个节点根据实际情况可以包含大量的关键字信息和分支，下图为一个3阶的BTree：</p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/25.png" alt="25"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">模拟查找关键字<span class="number">29</span>的过程：</span><br><span class="line"><span class="number">1.</span> 根据根节点找到磁盘块<span class="number">1</span>，读入内存。【磁盘I<span class="operator">/</span>O操作第<span class="number">1</span>次】</span><br><span class="line"><span class="number">2.</span> 比较关键字<span class="number">29</span>在区间（<span class="number">17</span>,<span class="number">35</span>），找到磁盘块<span class="number">1</span>的指针P2</span><br><span class="line"><span class="number">3.</span> 根据P2指针找到磁盘块<span class="number">3</span>，读入内存。【磁盘I<span class="operator">/</span>O操作第<span class="number">2</span>次】</span><br><span class="line"><span class="number">4.</span> 比较关键字<span class="number">29</span>在区间（<span class="number">26</span>,<span class="number">30</span>），找到磁盘块<span class="number">3</span>的指针P2</span><br><span class="line"><span class="number">5.</span> 根据P2指针找到磁盘块<span class="number">8</span>，读入内存。【磁盘I<span class="operator">/</span>O操作第<span class="number">3</span>次】</span><br><span class="line"><span class="number">6.</span> 在磁盘块<span class="number">8</span>中的关键字列表中找到关键字<span class="number">29</span></span><br><span class="line"></span><br><span class="line">分析上面过程，发现需要<span class="number">3</span>次磁盘I<span class="operator">/</span>O操作，和<span class="number">3</span>次内存查找操作，由于内存中的关键字是一个有序表结构，可以利用二分法快速定位到目标数据，而<span class="number">3</span>次磁盘I<span class="operator">/</span>O操作是影响整个B<span class="operator">-</span>Tree查找效率的决定因素。</span><br><span class="line"></span><br><span class="line">B<span class="operator">-</span>树相对于avl树，通过在节点中增加节点内部数据的个数来减少磁盘的io操作。</span><br><span class="line"></span><br><span class="line">mysql是采用页方式来读写数据，每页是<span class="number">16</span>KB，用B<span class="operator">-</span>树来存储mysql的记录，每个节点对应mysql中的一页（<span class="number">16</span>KB），假如每行记录加上树节点中的<span class="number">1</span>个指针占<span class="number">160</span>Byte，那么每个节点可以存储<span class="number">1000</span>（<span class="number">16</span>KB<span class="operator">/</span><span class="number">160</span>byte）条数据，树的高度为<span class="number">3</span>的节点大概可以存(第一层<span class="number">1000</span><span class="operator">+</span>第二层<span class="number">1000</span><span class="operator">^</span><span class="number">2</span><span class="operator">+</span>第三层 <span class="number">1000</span><span class="operator">^</span><span class="number">3</span>)<span class="operator">=</span><span class="number">10</span>亿条记录，我们从<span class="number">10</span>亿记录中查找数据只需要<span class="number">3</span>次io操作可以定位到目标数据所在的页，而页内部的数据又是有序的，然后将其加载到内存中用二分法查找，是非常快的。</span><br><span class="line"></span><br><span class="line">可以看出使用B<span class="operator">-</span>树定位某个值还是很快的(<span class="number">10</span>亿数据中<span class="number">3</span>次io操作<span class="operator">+</span>内存中二分法)，但是也是有缺点的：B<span class="operator">-</span>不利于范围查找，比如上图中我们需要查找[<span class="number">15</span>,<span class="number">36</span>]区间的数据，需要访问<span class="number">7</span>个磁盘块（<span class="number">1</span><span class="operator">/</span><span class="number">2</span><span class="operator">/</span><span class="number">7</span><span class="operator">/</span><span class="number">3</span><span class="operator">/</span><span class="number">8</span><span class="operator">/</span><span class="number">4</span><span class="operator">/</span><span class="number">9</span>），io次数又上去了，范围查找也是我们经常用到的，所以b<span class="operator">-</span>树也不太适合在磁盘中存储需要检索的数据。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- B+树</span></span><br><span class="line">B<span class="operator">+</span>树的特征</span><br><span class="line"><span class="number">1.</span> 每个结点至多有m个子女</span><br><span class="line"><span class="number">2.</span> 除根结点外,每个结点至少有[m<span class="operator">/</span><span class="number">2</span>]个子女，根结点至少有两个子女</span><br><span class="line"><span class="number">3.</span> 有k个子女的结点必有k个关键字</span><br><span class="line"><span class="number">4.</span> 父节点中持有访问子节点的指针</span><br><span class="line"><span class="number">5.</span> 父节点的关键字在子节点中都存在（如上面的<span class="number">1</span><span class="operator">/</span><span class="number">20</span><span class="operator">/</span><span class="number">35</span>在每层都存在），要么是最小值，要么是最大值，如果节点中    关键字是升序的方式，父节点的关键字是子节点的最小值</span><br><span class="line"><span class="number">6.</span> 最底层的节点是叶子节点</span><br><span class="line"><span class="number">7.</span> 除叶子节点之外，其他节点不保存数据，只保存关键字和指针</span><br><span class="line"><span class="number">8.</span> 叶子节点包含了所有数据的关键字以及data，叶子节点之间用链表连接起来，可以非常方便的支持范围查找</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/26.png" alt="26"></p>
<p><strong>B+树与B-树的不同</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> b<span class="operator">+</span>树中一个节点如果有k个关键字，最多可以包含k个子节点（k个关键字对应k个指针）；而b<span class="operator">-</span>树对应k<span class="operator">+</span><span class="number">1</span>个子节点</span><br><span class="line"><span class="number">2.</span> b<span class="operator">+</span>树除叶子节点之外其他节点值存储关键字和指向子节点的指针，而b<span class="operator">-</span>树还存储了数据，这样同样大小情况下，      b<span class="operator">+</span>树可以存储更多的关键字</span><br><span class="line"><span class="number">3.</span> b<span class="operator">+</span>树叶子节点中存储了所有关键字及data，并且多个节点用链表连接，从上图中看子节点中数据从左向右是有序      的，这样快速可以支撑范围查找（先定位范围的最大值和最小值，然后子节点中依靠链表遍历范围数据）</span><br></pre></td></tr></table></figure>
<p><strong>B-Tree和B+Tree该如何选择</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> B<span class="operator">-</span>Tree因为非叶子结点也保存具体数据，所以在查找某个关键字的时候找到即可返回。而B<span class="operator">+</span>Tree所有的数据都在叶    子结点，每次查找都得到叶子结点。所以在同样高度的B<span class="operator">-</span>Tree和B<span class="operator">+</span>Tree中，B<span class="operator">-</span>Tree查找某个关键字的效率更高。</span><br><span class="line"><span class="number">2.</span> 由于B<span class="operator">+</span>Tree所有的数据都在叶子结点，且结点之间有指针连接，在找大于或小于某个关键字的数据时，B<span class="operator">+</span>Tree只需    要找到该关键字然后沿着链表遍历就可以了，而B<span class="operator">-</span>Tree需要遍历该关键字结点的根结点去搜索。</span><br><span class="line"><span class="number">3.</span> 由于B<span class="operator">-</span>Tree的每个结点都存储主键<span class="operator">+</span>实际数据，而B<span class="operator">+</span>Tree非叶子结点只存储关键字信息，而每个页的大小有限是有限    的，所以同一页能存储的B<span class="operator">-</span>Tree的数据会比B<span class="operator">+</span>Tree存储的更少。这样同样总量的数据，B<span class="operator">-</span>Tree的深度会更大，增大    查询时的磁盘I<span class="operator">/</span>O次数，进而影响查询效率。</span><br></pre></td></tr></table></figure>
<h3 id="MySQL的存储引擎和索引"><a href="#MySQL的存储引擎和索引" class="headerlink" title="MySQL的存储引擎和索引"></a>MySQL的存储引擎和索引</h3><p>主要说一下InnoDB和MyISAM这两种引擎中的索引，这两种引擎中的索引都是使用b+树的结构来存储的。</p>
<h4 id="InnoDB中的索引"><a href="#InnoDB中的索引" class="headerlink" title="InnoDB中的索引"></a>InnoDB中的索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Innodb中有<span class="number">2</span>种索引：主键索引（聚集索引）、辅助索引（非聚集索引）。</span><br><span class="line"><span class="comment">-- 主键索引：每个表只有一个主键索引，b+树结构，叶子节点同时保存了主键的值也数据记录，其他节点只存主键值。</span></span><br><span class="line"><span class="comment">-- 辅助索引：每个表可以有多个，b+树结构，叶子节点保存了索引字段的值以及主键的值，还包含了一个书签，用来告诉InnoDB引擎从哪里可以找到与索引相对应的行数据。由于InnoDB引擎是索引组织表，这个书签就是相应的行数据的聚集索引键。</span></span><br></pre></td></tr></table></figure>

<h4 id="MyISAM中的索引"><a href="#MyISAM中的索引" class="headerlink" title="MyISAM中的索引"></a>MyISAM中的索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">B<span class="operator">+</span>树结构，MyISM使用的是非聚簇索引，非聚簇索引的两棵B<span class="operator">+</span>树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，主键索引B<span class="operator">+</span>树的节点存储了主键，辅助键索引B<span class="operator">+</span>树存储了辅助键。表数据存储在独立的地方，这两颗B<span class="operator">+</span>树的叶子节点都使用一个地址指向真正的表数据，对于表数据来说，这两个键没有任何差别。由于索引树是独立的，通过辅助键检索无需访问主键的索引树。</span><br></pre></td></tr></table></figure>
<p>为了更形象说明这两种索引的区别，我们假想一个表存储了4行数据。其中Id作为主索引，Name作为辅助索引，图中清晰的显示了聚簇索引和非聚簇索引的差异。</p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/27.png" alt="27"></p>
<h4 id="InnoDB数据检索过程"><a href="#InnoDB数据检索过程" class="headerlink" title="InnoDB数据检索过程"></a>InnoDB数据检索过程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">如果需要查询id<span class="operator">=</span><span class="number">14</span>的数据，只需要在左边的主键索引中检索就可以了。</span><br><span class="line">如果需要搜索name<span class="operator">=</span><span class="string">&#x27;Ellison&#x27;</span>的数据，需要<span class="number">2</span>步：</span><br><span class="line"><span class="number">1.</span> 先在辅助索引中检索到name<span class="operator">=</span><span class="string">&#x27;Ellison&#x27;</span>的数据，获取id为<span class="number">14</span></span><br><span class="line"><span class="number">2.</span> 再到主键索引中检索id为<span class="number">14</span>的记录</span><br><span class="line">辅助索引这个查询过程在mysql中叫做回表。</span><br></pre></td></tr></table></figure>
<h4 id="MyISAM数据检索过程"><a href="#MyISAM数据检索过程" class="headerlink" title="MyISAM数据检索过程"></a>MyISAM数据检索过程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 在索引中找到对应的关键字，获取关键字对应的记录的地址</span><br><span class="line"><span class="number">2.</span> 通过记录的地址查找到对应的数据记录</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 总结</span></span><br><span class="line"><span class="operator">-</span> 我们用的最多的是innodb存储引擎，innodb中最好是采用主键查询，这样只需要一次索引，如果使用辅助索引检索，涉及到回表操作，比主键查询要耗时一些。</span><br><span class="line"><span class="operator">-</span> innodb中辅助索引为什么不像myisam那样存储记录的地址？</span><br><span class="line">表中的数据发生变更的时候，会影响其他记录地址的变化，如果辅助索引中记录数据的地址，此时会受影响，而主键的值一般是很少更新的，当页中的记录发生地址变更的时候，对辅助索引是没有影响的。</span><br></pre></td></tr></table></figure>
<h3 id="页结构"><a href="#页结构" class="headerlink" title="页结构"></a>页结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 我们来看一下MySQL中页的结构，页是真正存储记录的地方，对应B+树中的一个节点，也是MySQL中读写数据的最小单位，页的结构设计也是相当有水平的，能够加快数据的查询。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- MySQL中页是innodb中存储数据的基本单位，也是MySQL中管理数据的最小单位，和磁盘交互的时候都是以页来进行的，默认是16kb，MySQL中采用b+树存储数据，页相当于b+树中的一个节点。</span></span><br></pre></td></tr></table></figure>
<p>页的结构如下图：</p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/28.png" alt="28"></p>
<p>每个Page都有通用的头和尾，但是中部的内容根据Page的类型不同而发生变化。Page的头部里有我们关心的一些数据，下图把Page的头部详细信息显示出来：</p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/29.png" alt="29"></p>
<p>我们重点关注和数据组织结构相关的字段：Page的头部保存了两个指针，分别指向前一个Page和后一个Page，根据这两个指针我们很容易想象出Page链接起来就是一个双向链表的结构，如下图：</p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/30.png" alt="30"></p>
<p>再看看Page的主体内容，我们主要关注行数据和索引的存储，他们都位于Page的User Records部分，User Records占据Page的大部分空间，User Records由一条一条的Record组成。在一个Page内部，单链表的头尾由固定内容的两条记录来表示，字符串形式的”Infimum”代表开头，”Supremum”代表结尾，这两个用来代表开头结尾的Record存储在System Records的，Infinum、Supremum和UserRecords组成了一个单向链表结构。最初数据是按照插入的先后顺序排列的，但是随着新数据的插入和旧数据的删除，数据物理顺序会变得混乱，但他们依然通过链表的方式保持着逻辑上的先后顺序，如下图：</p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/31.png" alt="31"></p>
<p>把User Record的组织形式和若干Page组合起来，就看到了稍微完整的形式。</p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/32.png" alt="32"></p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/33.png" alt="33"></p>
<p>innodb为了快速查找记录，在页中定义了一个称之为page directory的目录槽（slots）,每个槽位占用两个字节（用于保存指向记录的地址），page directory中的多个slot组成了一个有序数组（可用于二分法快速定位记录，向下看），行记录被Page Directory逻辑的分成了多个块，块与块之间是有序的，能够加速记录的查找，如下图：</p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/34.png" alt="34"></p>
<p>看上图，每个行记录的都有一个n_owned的区域，n_owned标识所属的slot这个块有多少条数据，伪记录Infimum的n_owned值总是1，记录Supremum的n_owned的取值范围为[1,8]，其他用户记录n_owned的取值范围[4,8]，并且只有每个块中最大的那条记录的n_owned才会有值，其他的用户记录的n_owned为0。</p>
<h4 id="数据检索过程"><a href="#数据检索过程" class="headerlink" title="数据检索过程"></a>数据检索过程</h4><p>在page中查询数据的时候，先通过b+树中查询方法定位到数据所在的页，然后将页内整体加载到内存中，通过二分法在page directory中检索数据，缩小范围，比如需要检索7，通过二分法查找到7位于slot2和slot3所指向的记录中间，然后从slot3指向的记录5开始向后向后一个个找，可以找到记录7，如果没有7，走到slot2的记录8结束。</p>
<p>n_owned范围控制在[4,8]内，能保证每个slot管辖的范围内数据量控制在[4,8]个，能够加速目标数据的查找，当有数据插入的时候，page directory为了控制每个slot对应块中记录的个数（[4,8]），此时page directory中会对slot的数量进行调整。</p>
<h4 id="对page的总结"><a href="#对page的总结" class="headerlink" title="对page的总结"></a>对page的总结</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> b<span class="operator">+</span>树中叶子页之间用双向链表连接的，能够实现范围查找</span><br><span class="line"><span class="number">2.</span> 页内部的记录之间是采用单向链表连接的，方便访问下一条记录</span><br><span class="line"><span class="number">3.</span> 为了加快页内部记录的查询，对页内记录上加了个有序的稀疏索引，叫页目录（page directory）整体上来说mysql中的索引用到了b<span class="operator">+</span>树，链表，二分查找，做到了快速定位目标数据，快速范围查找。</span><br></pre></td></tr></table></figure>


<h2 id="第23篇：MySQL索引管理"><a href="#第23篇：MySQL索引管理" class="headerlink" title="第23篇：MySQL索引管理"></a>第23篇：MySQL索引管理</h2><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 索引分为聚集索引和非聚集索引</span></span><br><span class="line"><span class="comment">-- 聚集索引</span></span><br><span class="line">聚集索引在mysql中又叫主键索引。每个表有且一定会有一个聚集索引，整个表的数据存储在聚集索引中，mysql索引是采用B<span class="operator">+</span>树结构保存在文件中，叶子节点存储主键的值以及对应记录的数据，非叶子节点不存储记录的数据，只存储主键的值。当表中未指定主键时，mysql内部会自动给每条记录添加一个隐藏的rowid字段（默认<span class="number">4</span>个字节）作为主键，用rowid构建聚集索引。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 非聚集索引（辅助索引）</span></span><br><span class="line">是b<span class="operator">+</span>树结构，不过有一点和聚集索引不同，非聚集索引叶子节点存储字段（索引字段）的值以及对应记录主键的值，其他节点只存储字段的值（索引字段）。</span><br><span class="line">每个表可以有多个非聚集索引。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 非聚集索引分类</span></span><br><span class="line"><span class="operator">-</span> 单列索引: 即一个索引只包含一个列。</span><br><span class="line"><span class="operator">-</span> 多列索引（又称复合索引，联合索引）:即一个索引包含多个列。</span><br><span class="line"><span class="operator">-</span> 唯一索引: 索引列的值必须唯一，允许有一个空值。</span><br></pre></td></tr></table></figure>
<h3 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">unique</span>] index 索引名称 <span class="keyword">on</span> 表名(列名[(length)]);</span><br><span class="line"><span class="keyword">alter</span> 表名 <span class="keyword">add</span> [<span class="keyword">unique</span>] index 索引名称 <span class="keyword">on</span> (列名[(length)]);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字段是char、varchar类型，length可以小于字段实际长度，如果是blog、text等长文本类型，必须指定length。</span></span><br><span class="line"><span class="comment">-- [unique]：中括号代表可以省略，如果加上了unique，表示创建唯一索引。</span></span><br><span class="line"><span class="comment">-- 如果table后面只写一个字段，就是单列索引，如果写多个字段，就是复合索引，多个字段之间用逗号隔开。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">drop</span> index 索引名称 <span class="keyword">on</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看索引</span></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 索引修改</span></span><br><span class="line">可以先删除索引，再重建索引。</span><br></pre></td></tr></table></figure>
<h3 id="示例：准备200万数据"><a href="#示例：准备200万数据" class="headerlink" title="示例：准备200万数据"></a>示例：准备200万数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*建库javacode2018*/</span> </span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> javacode2018; </span><br><span class="line"><span class="keyword">CREATE</span> DATABASE javacode2018; </span><br><span class="line">USE javacode2018; </span><br><span class="line"><span class="comment">/*建表test1*/</span> </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> test1; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test1 ( </span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;编号&#x27;</span>, </span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>, </span><br><span class="line">	sex TINYINT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别,1：男，2：女&#x27;</span>, </span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">50</span>) </span><br><span class="line">);</span><br><span class="line"><span class="comment">/*准备数据*/</span> </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> proc1; </span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc1() </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>; </span><br><span class="line">	<span class="keyword">START</span> TRANSACTION; </span><br><span class="line">	WHILE i <span class="operator">&lt;=</span> <span class="number">2000000</span> </span><br><span class="line">		DO <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1 (id, name, sex, email) <span class="keyword">VALUES</span> (i,concat(<span class="string">&#x27;javacode&#x27;</span>,i),if(<span class="built_in">mod</span>(i,<span class="number">2</span>),<span class="number">1</span>,<span class="number">2</span>),concat(<span class="string">&#x27;javacode&#x27;</span>,i,<span class="string">&#x27;@163.com&#x27;</span>)); </span><br><span class="line">		<span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>; </span><br><span class="line">		if i<span class="operator">%</span><span class="number">10000</span><span class="operator">=</span><span class="number">0</span> <span class="keyword">THEN</span> </span><br><span class="line">			<span class="keyword">COMMIT</span>; </span><br><span class="line">			<span class="keyword">START</span> TRANSACTION; </span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">	<span class="keyword">END</span> WHILE; </span><br><span class="line">	<span class="keyword">COMMIT</span>; </span><br><span class="line"><span class="keyword">END</span> $ </span><br><span class="line">DELIMITER ; </span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> proc1(); </span><br></pre></td></tr></table></figure>
<h3 id="创建索引并指定长度"><a href="#创建索引并指定长度" class="headerlink" title="创建索引并指定长度"></a>创建索引并指定长度</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 a <span class="keyword">where</span> a.email <span class="operator">=</span> <span class="string">&#x27;javacode1000085@163.com&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name            <span class="operator">|</span> sex <span class="operator">|</span> email                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000085</span> <span class="operator">|</span> javacode1000085 <span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> javacode1000085<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">2.56</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">所有的email记录，每条记录的前面15个字符是不一样的，结尾是一样的（都是@163.com），通过前面15个字符就可以定位一个email了，那么我们可以对email创建索引的时候指定一个长度为15，这样相对于整个email字段更短一些，查询效果是一样的，这样一个页中可以存储更多的索引记录，命令如下:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx3 <span class="keyword">on</span> test1 (email(<span class="number">15</span>));</span><br><span class="line">Query OK, <span class="number">2000000</span> <span class="keyword">rows</span> affected (<span class="number">28.69</span> sec)</span><br><span class="line">Records: <span class="number">2000000</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 a <span class="keyword">where</span> a.email <span class="operator">=</span> <span class="string">&#x27;javacode1000085@163.com&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name            <span class="operator">|</span> sex <span class="operator">|</span> email                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000085</span> <span class="operator">|</span> javacode1000085 <span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> javacode1000085<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="查看表中的索引"><a href="#查看表中的索引" class="headerlink" title="查看表中的索引"></a>查看表中的索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> test1;</span><br></pre></td></tr></table></figure>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index idx1 <span class="keyword">on</span> test1;</span><br></pre></td></tr></table></figure>


<h2 id="第24篇：如何正确的使用索引？"><a href="#第24篇：如何正确的使用索引？" class="headerlink" title="第24篇：如何正确的使用索引？"></a>第24篇：如何正确的使用索引？</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">说一下B<span class="operator">+</span>树的几个特点：</span><br><span class="line"><span class="number">1.</span> 叶子节点存储关键字（索引字段的值）信息及对应的data</span><br><span class="line"><span class="number">2.</span> 其他非叶子节点只存储关键字的信息及子节点的指针</span><br><span class="line"><span class="number">3.</span> 每个叶子节点相当于mysql中的一页，同层级的叶子节点以双向链表的形式相连</span><br><span class="line"><span class="number">4.</span> 每个节点（页）中存储了多条记录，记录之间用单链表的形式连接组成了一条有序链表，顺序是按照索引字段排序</span><br><span class="line"><span class="number">5.</span> 检索数据时：每次检索都是从根节点开始，一直搜索到叶子节点</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读取一条记录的时候，并不是将这个记录本身从磁盘读取出来，而是以页为单位，将整个页加载到内存中，一个页中可能有很多记录，然后在内存中对页进行检索。在innodb中，每个页的大小默认是16kb。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 聚集索引</span></span><br><span class="line">每个表一定会有一个聚集索引，整个表的数据存储以b<span class="operator">+</span>树的方式存在文件中，b<span class="operator">+</span>树叶子节点中的key为主键值，data为完整记录的信息；非叶子节点存储主键的值。</span><br><span class="line"><span class="comment">-- 非聚集索引</span></span><br><span class="line">每个表可以有多个非聚集索引，b<span class="operator">+</span>树结构，叶子节点的key为索引字段字段的值，data为主键的值；非叶子节点只存储索引字段的值。通过非聚集索引检索记录的时候，需要<span class="number">2</span>次操作，先在非聚集索引中检索出主键，然后再到聚集索引中检索出主键对应的记录。</span><br></pre></td></tr></table></figure>

<h3 id="查询走索引是什么意思？"><a href="#查询走索引是什么意思？" class="headerlink" title="查询走索引是什么意思？"></a>查询走索引是什么意思？</h3><p>当对某个字段的值进行某种检索时，如果检索过程中，能够快速定位到目标数据所在的页，有效的降低页的io操作，不需要扫描所有的数据页时，认为这种情况能够有效的利用索引，也称这个检索可以走索引。如果这个过程中不能够确定数据在哪些页中，认为这种情况下索引对这个查询无效，此查询不走索引。</p>
<h3 id="B-树中数据检索过程"><a href="#B-树中数据检索过程" class="headerlink" title="B+树中数据检索过程"></a>B+树中数据检索过程</h3><h4 id="唯一记录检索"><a href="#唯一记录检索" class="headerlink" title="唯一记录检索"></a>唯一记录检索</h4><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/35.png" alt="35"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如上图，所有的数据都是唯一的，查询105的记录，过程如下：</span><br><span class="line">1. 将P1页加载到内存</span><br><span class="line">2. 在内存中采用二分法查找，可以确定105位于[100,150)中间，所以我们需要去加载100关联P4页 </span><br><span class="line">3. 将P4加载到内存中，采用二分法找到105的记录后退出</span><br></pre></td></tr></table></figure>

<h4 id="查询某个值的所有记录"><a href="#查询某个值的所有记录" class="headerlink" title="查询某个值的所有记录"></a>查询某个值的所有记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如上图，查询105的所有记录，过程如下：</span><br><span class="line">1. 将P1页加载到内存</span><br><span class="line">2. 在内存中采用二分法查找，可以确定105位于[100,150)中间，100关联P4页 </span><br><span class="line">3. 将P4加载到内存中，采用二分法找到最后一个小于105的记录，即100，然后通过链表从100开始向后访问，找到所有的105记录，直到遇到第一个大于100的值为止</span><br></pre></td></tr></table></figure>
<h4 id="范围查找"><a href="#范围查找" class="headerlink" title="范围查找"></a>范围查找</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如上图，查询[55,150]所有记录，由于页和页之间是双向链表升序结构，页内部的数据是单项升序链表结构，所以只用找到范围的起始值所在的位置，然后通过依靠链表访问两个位置之间所有的数据即可，过程如下：</span><br><span class="line">1. 将P1页加载到内存</span><br><span class="line">2. 内存中采用二分法找到55位于50关联的P3页中，150位于P5页中</span><br><span class="line">3. 将P3加载到内存中，采用二分法找到第一个55的记录，然后通过链表结构继续向后访问P3中的60、67，当P3访问完毕之后，通过P3的nextpage指针访问下一页P4中所有记录，继续遍历P4中的所有记录，直到访问到P5中的150为止。</span><br></pre></td></tr></table></figure>

<h4 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h4><p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/36.png" alt="36"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询以 f 开头的所有记录</span></span><br><span class="line">过程如下：</span><br><span class="line"><span class="number">1.</span> 将P1数据加载到内存中</span><br><span class="line"><span class="number">2.</span> 在P1页的记录中采用二分法找到最后一个小于等于f的值，这个值是f，以及第一个大于f的，这个值是z，f指向叶节点P3，z指向叶节点P6，此时可以断定以f开头的记录可能存在于[P3,P6)这个范围的页内，即P3、P4、P5这三个页中</span><br><span class="line"><span class="number">3.</span> 加载P3这个页，在内部以二分法找到第一条f开头的记录，然后以链表方式继续向后访问P4、P5中的记录，即可以找到所有已f开头的数据</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询包含 f 的记录</span></span><br><span class="line">包含的查询在<span class="keyword">sql</span>中的写法是 <span class="operator">%</span>f<span class="operator">%</span> ，通过索引我们还可以快速定位所在的页么？</span><br><span class="line">                                                                                         </span><br><span class="line">可以看一下上面的数据，f在每个页中都存在，我们通过P1页中的记录是无法判断包含f的记录在那些页的，只能通过io的方式加载所有叶子节点，并且遍历所有记录进行过滤，才可以找到包含f的记录。所以如果使用了 <span class="operator">%</span>值<span class="operator">%</span> 这种方式，索引对查询是无效的。</span><br></pre></td></tr></table></figure>
<h4 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当b+树的数据项是复合的数据结构，比如(name,age,sex)，b+树是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据。</span><br><span class="line"></span><br><span class="line">但当(20,F)这样没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据， 这个是非常重要的性质，即索引的最左匹配特性。</span><br></pre></td></tr></table></figure>
<p>下图中是3个字段(a, b, c)的联合索引，索引中数据的顺序是以 <strong>a asc,  b asc,  c asc</strong> 这种排序方式存储在节点中的，索引先以a字段升序，a相同的时候，以b字段升序，b相同的时候，以c字段升序。</p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/37.png" alt="37"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询a=1的记录</span></span><br><span class="line">由于页中的记录是以 a <span class="keyword">asc</span>, b <span class="keyword">asc</span>, c <span class="keyword">asc</span> 这种排序方式存储的，所以a字段是有序的，可以通过二分法快速检索到，过程如下：</span><br><span class="line"><span class="number">1.</span> 将P1加载到内存中</span><br><span class="line">2. 在内存中对P1中的记录采用二分法找，可以确定a=1的记录位于&#123;1,1,1&#125;和&#123;1,5,1&#125;关联的范围内，这两个值的子节点分别是P2、P4</span><br><span class="line"><span class="number">3.</span> 加载叶子节点P2，在P2中采用二分法快速找到第一条a<span class="operator">=</span><span class="number">1</span>的记录，然后通过链表向下一条及下一页开始检索，直到在P4中找到第一个不满足a<span class="operator">=</span><span class="number">1</span>的记录为止</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询a=1 and b=5的记录</span></span><br><span class="line">和上面一样，可以确定a=1 and b=5的记录位于&#123;1,1,1&#125;和&#123;1,5,1&#125;关联的范围内，查找过程和a=1查找步骤类似。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询b=1的记录</span></span><br><span class="line">这种情况通过P1页中的记录，是无法判断b<span class="operator">=</span><span class="number">1</span>的记录在那些页中的，只能对所有记录进行遍历，然后进行过滤，此时索引是无效的。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照c的值查询</span></span><br><span class="line">这种情况和查询b<span class="operator">=</span><span class="number">1</span>也一样，也只能扫描所有叶子节点，此时索引也无效了。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照b和c一起查</span></span><br><span class="line">这种也是无法利用索引的，也只能对所有数据进行扫描，一条条判断了，此时索引无效。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照[a,c]两个字段查询</span></span><br><span class="line">这种只能利用到索引中的a字段，通过a确定索引范围，然后加载a关联的所有记录，再对c的值进行过滤。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询a=1 and b&gt;=0 and c=1的记录</span></span><br><span class="line">这种情况只能先确定a<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> b<span class="operator">&gt;=</span><span class="number">0</span>所在页的范围，然后对这个范围的所有页进行遍历，c字段在这个查询的过程中，是无法确定c的数据在哪些页的，此时我们称c是不走索引的，只有a、b能够有效的确定索引页的范围。</span><br><span class="line"></span><br><span class="line">类似这种的还有<span class="operator">&gt;</span>、<span class="operator">&lt;</span>、<span class="keyword">between</span>、<span class="keyword">like</span>，多字段索引的情况下，mysql会一直向右匹配直到遇到范围查询(<span class="operator">&gt;</span>、<span class="operator">&lt;</span>、<span class="keyword">between</span>、<span class="keyword">like</span>)就停止匹配。</span><br></pre></td></tr></table></figure>
<h3 id="索引区分度"><a href="#索引区分度" class="headerlink" title="索引区分度"></a>索引区分度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1,2,3,4,5,6,7,8,8,9]</span><br><span class="line">[1,1,1,1,1,8,8,8,8,8]</span><br><span class="line">上面2个数组是有序的，如果我需要检索值为8的所有记录，那个更快一些？</span><br><span class="line"></span><br><span class="line">使用二分法查找包含8的所有记录过程如下：先使用二分法找到最后一个小于8的记录，然后沿着这条记录向后获取下一个记录，和8对比，知道遇到第一个大于8的数字结束，或者到达数组末尾结束。</span><br><span class="line"></span><br><span class="line">采用上面这种方法找到8的记录，第一个数组中更快的一些。因为第二个数组中含有8的比例更多的，需要访问以及匹配的次数更多一些。</span><br><span class="line"></span><br><span class="line">这里就涉及到数据的区分度问题：</span><br><span class="line">索引区分度 &#x3D; count(distint 记录) &#x2F; count(记录)。</span><br><span class="line"></span><br><span class="line">当索引区分度高的时候，检索数据更快一些，索引区分度太低，说明重复的数据比较多，检索的时候需要访问更多的记录才能够找到所有目标数据。</span><br><span class="line">当索引区分度非常小的时候，基本上接近于全索引数据的扫描了，此时查询速度是比较慢的。</span><br><span class="line"></span><br><span class="line">第一个数组索引区分度为0.9，第二个区分度为0.2，所以第一个检索更快的一些。所以创建索引的时候，尽量选择区分度高的列作为索引列。</span><br></pre></td></tr></table></figure>
<h3 id="正确使用索引"><a href="#正确使用索引" class="headerlink" title="正确使用索引"></a>正确使用索引</h3><h4 id="主键检索"><a href="#主键检索" class="headerlink" title="主键检索"></a>主键检索</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> sex <span class="operator">|</span> email             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> javacode1 <span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> javacode1<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- test1表中没有明确的指定主键，我们将id设置为主键</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test1 modify id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> sex <span class="operator">|</span> email             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> javacode1 <span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> javacode1<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"><span class="comment">-- 这个速度很快，这个走的是上面介绍的 唯一记录检索 。</span></span><br></pre></td></tr></table></figure>
<h4 id="between-and范围检索"><a href="#between-and范围检索" class="headerlink" title="between and范围检索"></a>between and范围检索</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test1 <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">100</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"><span class="comment">-- 使用between and的时候，区间跨度不要太大。 </span></span><br></pre></td></tr></table></figure>
<h4 id="in的检索"><a href="#in的检索" class="headerlink" title="in的检索"></a>in的检索</h4><blockquote>
<p>平时做项目的时候，建议少用表连接，比如电商中需要查询订单的信息和订单中商品的名称，可以先查询查询订单表，然后订单表中取出商品的id列表，采用in的方式到商品表检索商品信息，由于商品id是商品表的主键，所以检索速度还是比较快的。</p>
<p>通过id在200万数据中检索100条数据，看看效果：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">100000</span>, <span class="number">100001</span>, <span class="number">100002</span>, <span class="number">100003</span>, <span class="number">100004</span>, <span class="number">100005</span>, <span class="number">100006</span>, <span class="number">100007</span>, <span class="number">100008</span>, <span class="number">100009</span>, <span class="number">100010</span>, <span class="number">100011</span>, <span class="number">100012</span>, <span class="number">100013</span>, <span class="number">100014</span>, <span class="number">100015</span>, <span class="number">100016</span>, <span class="number">100017</span>, <span class="number">100018</span>, <span class="number">100019</span>, <span class="number">100020</span>, <span class="number">100021</span>, <span class="number">100022</span>, <span class="number">100023</span>, <span class="number">100024</span>, <span class="number">100025</span>, <span class="number">100026</span>, <span class="number">100027</span>, <span class="number">100028</span>, <span class="number">100029</span>, <span class="number">100030</span>, <span class="number">100031</span>, <span class="number">100032</span>, <span class="number">100033</span>, <span class="number">100034</span>, <span class="number">100035</span>, <span class="number">100036</span>, <span class="number">100037</span>, <span class="number">100038</span>, <span class="number">100039</span>, <span class="number">100040</span>, <span class="number">100041</span>, <span class="number">100042</span>, <span class="number">100043</span>, <span class="number">100044</span>, <span class="number">100045</span>, <span class="number">100046</span>, <span class="number">100047</span>, <span class="number">100048</span>, <span class="number">100049</span>, <span class="number">100050</span>, <span class="number">100051</span>, <span class="number">100052</span>, <span class="number">100053</span>, <span class="number">100054</span>, <span class="number">100055</span>, <span class="number">100056</span>, <span class="number">100057</span>, <span class="number">100058</span>, <span class="number">100059</span>, <span class="number">100060</span>, <span class="number">100061</span>, <span class="number">100062</span>, <span class="number">100063</span>, <span class="number">100064</span>, <span class="number">100065</span>, <span class="number">100066</span>, <span class="number">100067</span>, <span class="number">100068</span>, <span class="number">100069</span>, <span class="number">100070</span>, <span class="number">100071</span>, <span class="number">100072</span>, <span class="number">100073</span>, <span class="number">100074</span>, <span class="number">100075</span>, <span class="number">100076</span>, <span class="number">100077</span>, <span class="number">100078</span>, <span class="number">100079</span>, <span class="number">100080</span>, <span class="number">100081</span>, <span class="number">100082</span>, <span class="number">100083</span>, <span class="number">100084</span>, <span class="number">100085</span>, <span class="number">100086</span>, <span class="number">100087</span>, <span class="number">100088</span>, <span class="number">100089</span>, <span class="number">100090</span>, <span class="number">100091</span>, <span class="number">100092</span>, <span class="number">100093</span>, <span class="number">100094</span>, <span class="number">100095</span>, <span class="number">100096</span>, <span class="number">100097</span>, <span class="number">100098</span>, <span class="number">100099</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> <span class="number">100098</span> <span class="operator">|</span> javacode100098 <span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span> javacode100098<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100099</span> <span class="operator">|</span> javacode100099 <span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> javacode100099<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------------+-----+------------------------+</span></span><br><span class="line"><span class="number">100</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.12</span> sec)</span><br><span class="line"><span class="comment">-- 这个相当于分解为多个 唯一记录检索 ，然后将记录合并。</span></span><br></pre></td></tr></table></figure>
<h4 id="多个索引时查询如何走？"><a href="#多个索引时查询如何走？" class="headerlink" title="多个索引时查询如何走？"></a>多个索引时查询如何走？</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在name、sex两个字段上分别建个索引</span></span><br><span class="line"><span class="keyword">create</span> index idx1 <span class="keyword">on</span> test1(name);</span><br><span class="line"><span class="keyword">create</span> index idx2 <span class="keyword">on</span> test1(sex);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;javacode1500000&#x27;</span> <span class="keyword">and</span> sex<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name            <span class="operator">|</span> sex <span class="operator">|</span> email                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1500000</span> <span class="operator">|</span> javacode1500000 <span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span> javacode1500000<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> sex <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> name<span class="operator">=</span><span class="string">&#x27;javacode1500000&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name            <span class="operator">|</span> sex <span class="operator">|</span> email                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1500000</span> <span class="operator">|</span> javacode1500000 <span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span> javacode1500000<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;javacode1500000&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name            <span class="operator">|</span> sex <span class="operator">|</span> email                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1500000</span> <span class="operator">|</span> javacode1500000 <span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span> javacode1500000<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> test1 <span class="keyword">where</span> sex<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(id) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.23</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当多个条件中有索引的时候，并且关系是and的时候，会走索引区分度高的，显然name字段重复度很低，走name查询会更快一些。</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/38.png" alt="38"></p>
<h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test1 a <span class="keyword">where</span> a.name <span class="keyword">like</span> <span class="string">&#x27;javacode1000%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1111</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.07</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test1 a <span class="keyword">where</span> a.name <span class="keyword">like</span> <span class="string">&#x27;%javacode1000%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1111</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">1.33</span> sec)</span><br><span class="line"><span class="comment">-- 第一个查询可以利用到name字段上面的索引，下面的查询是无法确定需要查找的值所在的范围的，只能全表扫描，无法利用索引，所以速度比较慢，这个过程上面有说过。</span></span><br></pre></td></tr></table></figure>
<h4 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h4><blockquote>
<p>当需要查询的数据在索引树中不存在的时候，需要再次到聚集索引中去获取，这个过程叫做回表，如查询：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;javacode1500000&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name            <span class="operator">|</span> sex <span class="operator">|</span> email                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1500000</span> <span class="operator">|</span> javacode1500000 <span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span> javacode1500000<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+-----+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"><span class="comment">-- 上面查询是 * ，由于name列所在的索引中只有 name、id 两个列，不包含 sex、email ，所以过程如下：</span></span><br><span class="line"><span class="number">1.</span> 走name索引检索 javacode3500000 对应的记录，取出id为 <span class="number">3500000</span> </span><br><span class="line"><span class="number">2.</span> 在主键索引中检索出 id<span class="operator">=</span><span class="number">3500000</span> 的记录，获取所有字段的值</span><br></pre></td></tr></table></figure>
<h4 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h4><blockquote>
<p>查询中采用的索引树中包含了查询所需要的所有字段的值，不用再去聚集索引检索数据，这种叫索引覆盖。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> test1 <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;javacode1500000&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name对应idx1索引，id为主键，所以idx1索引树叶子节点中包含了name、id的值，这个查询只用走idx1这一个索引就可以了，如果select后面使用 * ，还需要一次回表。所以尽量避免使用*，可以考虑是否可以用索引覆盖来实现。</span></span><br></pre></td></tr></table></figure>
<h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><blockquote>
<p>简称ICP，Index Condition Pushdown，是MySQL 5.6中新特性，是一种在存储引擎层使用索引过滤数据的一种优化方式，ICP可以减少存储引擎访问基表的次数以及MySQL服务器访问存储引擎的次数。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> test1 <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;javacode35%&#x27;</span> <span class="keyword">and</span> sex <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">过程：</span><br><span class="line"><span class="number">1.</span> 走name索引检索出以javacode35开头的第一条记录，得到记录的id</span><br><span class="line"><span class="number">2.</span> 利用id去主键索引中查询出这条记录R1</span><br><span class="line"><span class="number">3.</span> 判断R1中的sex是否为<span class="number">1</span>，然后重复上面的操作，直到找到所有记录为止。</span><br><span class="line">上面的过程中需要走name索引以及需要回表操作。</span><br><span class="line"></span><br><span class="line">如果采用ICP的方式，我们可以这么做，创建一个(name,sex)的组合索引，查询过程如下：</span><br><span class="line"><span class="number">1.</span> 走(name,sex)索引检索出以javacode35的第一条记录，可以得到(name,sex,id)，记做R1</span><br><span class="line"><span class="number">2.</span> 判断R1.sex是否为<span class="number">1</span>，然后重复上面的操作，直到找到所有记录为止，这个过程中不需要回表操作了，通过索引的数据就可以完成整个条件的过滤，速度比上面的更快一些。</span><br></pre></td></tr></table></figure>
<h4 id="数字使字符串类索引失效"><a href="#数字使字符串类索引失效" class="headerlink" title="数字使字符串类索引失效"></a>数字使字符串类索引失效</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> name <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+-----+----------------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name <span class="operator">|</span> sex <span class="operator">|</span> email                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+-----+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2000001</span> <span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> javacode2018<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+-----+----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.81</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+-----+----------------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name <span class="operator">|</span> sex <span class="operator">|</span> email                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+-----+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2000001</span> <span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> javacode2018<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+-----+----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*name是字符串类型，字符串和数字比较的时候，会将字符串强制转换为数字，然后进行比较，所以第一个查询变成了全表扫描，只能取出每条数据，将name转换为数字和1进行比较。*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果字段是数字类型的，查询的值是字符串还是数字都会走索引。</p>
</blockquote>
<h4 id="函数使索引无效"><a href="#函数使索引无效" class="headerlink" title="函数使索引无效"></a>函数使索引无效</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">where</span> concat(name,<span class="string">&#x27;1&#x27;</span>) <span class="operator">=</span> <span class="string">&#x27;javacode11&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> sex <span class="operator">|</span> email             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> javacode1 <span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> javacode1<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">1.07</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用了函数之后，name所在的索引树是无法快速定位需要查找的数据所在的页，只能将所有页的记录加载到内存中，然后对每条数据使用函数进行计算之后再进行条件判断，此时索引无效了，变成了全表数据扫描。*/</span></span><br></pre></td></tr></table></figure>
<h4 id="运算符使索引无效"><a href="#运算符使索引无效" class="headerlink" title="运算符使索引无效"></a>运算符使索引无效</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 a <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span> <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> sex <span class="operator">|</span> email             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> javacode1 <span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> javacode1<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 a <span class="keyword">where</span> id<span class="operator">+</span><span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> sex <span class="operator">|</span> email             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> javacode1 <span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> javacode1<span class="variable">@163</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.79</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* id上有主键索引，上面查询，第一个走索引，第二个不走索引，第二个使用运算符，id所在的索引树是无法快速定位需要查找的数据所在的页的，只能将所有页的记录加载到内存中，然后对每条数据的id进行计算之后再判断是否等于1，此时索引无效了，变成了全表数据扫描。*/</span></span><br></pre></td></tr></table></figure>
<h4 id="使用索引优化排序"><a href="#使用索引优化排序" class="headerlink" title="使用索引优化排序"></a>使用索引优化排序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">有个订单表t_order(id, user_id, addtime, price)，经常会查询某个用户的订单，并且按照addtime升序排序，应该怎么创建索引呢？</span><br><span class="line">在user_id上创建索引，我们分析一下这种情况，数据检索的过程：</span><br><span class="line"><span class="number">1.</span> 走user_id索引，找到记录的的id</span><br><span class="line"><span class="number">2.</span> 通过id在主键索引中回表检索出整条数据</span><br><span class="line"><span class="number">3.</span> 重复上面的操作，获取所有目标记录</span><br><span class="line"><span class="number">4.</span> 在内存中对目标记录按照addtime进行排序</span><br><span class="line">我们要知道当数据量非常大的时候，排序还是比较慢的，可能会用到磁盘中的文件，有没有一种方式，查询出来的数据刚好是排好序的。</span><br><span class="line">我们再回顾一下mysql中b<span class="operator">+</span>树数据的结构，记录是按照索引的值排序组成的链表，如果将user_id和addtime放在一起组成联合索引(user_id,addtime)，这样通过user_id检索出来的数据自然就是按照addtime排好序的，这样直接少了一步排序操作，效率更好，如果需addtime降序，只需要将结果翻转一下就可以了。</span><br></pre></td></tr></table></figure>
<h3 id="总结使用索引的建议"><a href="#总结使用索引的建议" class="headerlink" title="总结使用索引的建议"></a>总结使用索引的建议</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 在区分度高的字段上面建立索引可以有效的使用索引，区分度太低，无法有效的利用索引，可能需要扫描所有数据      页，此时和不使用索引差不多</span><br><span class="line"><span class="number">2.</span> 联合索引注意最左匹配原则：必须按照从左到右的顺序匹配，mysql会一直向右匹配直到遇到范围查询</span><br><span class="line">   (<span class="operator">&gt;</span>、<span class="operator">&lt;</span>、<span class="keyword">between</span>、<span class="keyword">like</span>) 就停止匹配，比如a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> c <span class="operator">&gt;</span> <span class="number">3</span> <span class="keyword">and</span> d <span class="operator">=</span> <span class="number">4</span> 如果建立(a,b,c,d)顺序    的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整</span><br><span class="line"><span class="number">3.</span> 查询记录的时候，少使用<span class="operator">*</span>，尽量去利用索引覆盖，可以减少回表操作，提升效率</span><br><span class="line"><span class="number">4.</span> 有些查询可以采用联合索引，进而使用到索引下推（IPC），也可以减少回表操作，提升效率</span><br><span class="line"><span class="number">5.</span> 禁止对索引字段使用函数、运算符操作，会使索引失效</span><br><span class="line"><span class="number">6.</span> 字符串字段和数字比较的时候会使索引无效</span><br><span class="line"><span class="number">7.</span> 模糊查询<span class="string">&#x27;%值%&#x27;</span>会使索引无效，变为全表扫描，但是<span class="string">&#x27;值%&#x27;</span>这种可以有效利用索引</span><br><span class="line"><span class="number">8.</span> 排序中尽量使用到索引字段，这样可以减少排序，提升查询效率</span><br></pre></td></tr></table></figure>


<h2 id="第25篇：SQL中where在数据库中提取与应用"><a href="#第25篇：SQL中where在数据库中提取与应用" class="headerlink" title="第25篇：SQL中where在数据库中提取与应用"></a>第25篇：SQL中where在数据库中提取与应用</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一条SQL，如何提取其中的where条件？where条件中的每个子条件，在SQL执行的过程中有分别起着什么样的作用？MySQL 5.6中一个重要的优化Index Condition Pushdown，究竟push down了什么？</p>
<h3 id="关系型数据库中的数据组织"><a href="#关系型数据库中的数据组织" class="headerlink" title="关系型数据库中的数据组织"></a>关系型数据库中的数据组织</h3><p>关系型数据库中，数据组织涉及到两个最基本的结构：表与索引。表中存储的是完整记录，一般有两种组织形式：堆表(所有的记录无序存储)，或者是聚簇索引表(所有的记录，按照记录主键进行排序存储)。索引中存储的是完整记录的一个子集，用于加速记录的查询速度，索引的组织形式，一般均为B+树结构。</p>
<p>注意：下面的实例，使用的表的结构为堆表形式，这也是Oracle/DB2/PostgreSQL等数据库采用的表组织形式，而不是InnoDB引擎所采用的聚簇索引表。其实，表结构采用何种形式并不重要，最重要的是理解下面章节的核心，在任何表结构中均适用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (</span><br><span class="line">  a <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>, </span><br><span class="line">  b <span class="type">int</span>, </span><br><span class="line">  c <span class="type">int</span>, </span><br><span class="line">  d <span class="type">int</span>, </span><br><span class="line">  e <span class="type">varchar</span>(<span class="number">20</span>)); </span><br><span class="line">  </span><br><span class="line"><span class="keyword">create</span> index idx_t1_bcd <span class="keyword">on</span> t1(b, c, d); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,’d’); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,’a’); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,’h’);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,’b’); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,’e’);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,’c’);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,’g’); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">6</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">4</span>,’f’);</span><br></pre></td></tr></table></figure>
<p>t1表的存储结构如下图所示 (只画出了idx_t1_bcd索引与t1表结构，没有包括t1表的主键索引)：</p>
<p><img src="/2021/01/24/MySQL%E6%95%B4%E7%90%86/39.png" alt="39"></p>
<p>简单分析一下上图，idx_t1_bcd索引上有[b,c,d]三个字段(注意：若是InnoDB类的聚簇索引表，idx_t1_bcd上还会包括主键a字段)，不包括[a,e]字段。idx_t1_bcd索引，首先按照b字段排序，b字段相同，则按照c字段排序，以此类推。记录在索引中按照[b,c,d]排序，但是在堆表上是乱序的，不按照任何字段排序。</p>
<h3 id="SQL的where条件提取"><a href="#SQL的where条件提取" class="headerlink" title="SQL的where条件提取"></a>SQL的where条件提取</h3><p>考虑以下SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> b <span class="operator">&gt;=</span> <span class="number">2</span> <span class="keyword">and</span> b <span class="operator">&lt;</span> <span class="number">8</span> <span class="keyword">and</span> c <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">and</span> d <span class="operator">!=</span> <span class="number">4</span> <span class="keyword">and</span> e <span class="operator">!=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>可以发现 where 条件使用到了 [b,c,d,e] 四个字段，而idx_t1_bcd索引，恰好使用了[b,c,d]这三个字段，那么走idx_t1_bcd索引进行条件过滤，应该是一个不错的选择。接下来，让我们抛弃数据库的思想，直接思考这条SQL的几个关键性问题：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 此SQL覆盖索引 idx_t1_bcd 上的哪个范围？</span></span><br><span class="line">起始范围：记录[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]是第一个需要检查的索引项。索引起始查找范围由b <span class="operator">&gt;=</span> <span class="number">2</span>，c <span class="operator">&gt;</span> <span class="number">1</span>决定。</span><br><span class="line">终止范围：记录[<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>]是第一个不需要检查的记录，之前的记录均需要判断。索引的终止查找范围由b <span class="operator">&lt;</span> <span class="number">8</span>决定；</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 确定了查询的起始、终止范围之后，SQL中还有哪些条件可以使用索引idx_t1_bcd过滤？</span></span><br><span class="line">根据<span class="keyword">SQL</span>，固定了索引的查询范围[(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),(<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>))之后，此索引范围中并不是每条记录都是满足<span class="keyword">where</span>查询条件。例如：(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)不满足c <span class="operator">&gt;</span> <span class="number">1</span>的约束；(<span class="number">6</span>,<span class="number">4</span>,<span class="number">4</span>)不满足d <span class="operator">!=</span> <span class="number">4</span>的约束。而c，d列，均可在索引idx_t1_bcd中过滤掉不满足条件的索引记录。</span><br><span class="line">因此，<span class="keyword">SQL</span>中还可以使用c <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">and</span> d <span class="operator">!=</span> <span class="number">4</span>条件进行索引记录的过滤。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在确定了索引中最终能够过滤掉的条件之后，还有哪些条件是索引无法过滤的？</span></span><br><span class="line">e <span class="operator">!=</span> <span class="string">&#x27;a&#x27;</span>这个查询条件，无法在索引idx_t1_bcd上进行过滤，因为索引并未包含e列。e列只在堆表上存在，为了过滤此查询条件，必须将已经满足索引查询条件的记录回表，取出表中的e列，然后使用e列的查询条件e <span class="operator">!=</span> <span class="string">&#x27;a&#x27;</span>进行最终的过滤。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在理解以上的问题的基础上，做一个抽象，总结出一套放置于所有SQL语句皆准的where查询条件的提取规则：</span></span><br><span class="line"><span class="comment">-- 所有SQL的where条件，均可归纳为3大类</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Index Key</span><br><span class="line">用于确定<span class="keyword">SQL</span>查询在索引中的连续范围(起始范围<span class="operator">+</span>结束范围)的查询条件，被称之为Index Key。</span><br><span class="line">Index Key也被拆分为Index <span class="keyword">First</span> Key和Index <span class="keyword">Last</span> Key，分别用于定位索引查找的起始、索引查询的终止条件。</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> Index <span class="keyword">First</span> Key</span><br><span class="line">用于确定索引查询的起始范围。提取规则：从索引的第一个键值开始，检查其在<span class="keyword">where</span>条件中是否存在，若存在并且条件是<span class="operator">=</span>、<span class="operator">&gt;=</span>，则将对应的条件加入Index <span class="keyword">First</span> Key之中，继续读取索引的下一个键值，使用同样的提取规则；若存在并且条件是<span class="operator">&gt;</span>，则将对应的条件加入Index <span class="keyword">First</span> Key中，同时终止Index <span class="keyword">First</span> Key的提取；若不存在，同样终止Index <span class="keyword">First</span> Key的提取。针对上面的<span class="keyword">SQL</span>，应用这个提取规则，提取出来的Index <span class="keyword">First</span> Key为(b <span class="operator">&gt;=</span> <span class="number">2</span>, c <span class="operator">&gt;</span> <span class="number">1</span>)。由于c的条件为 <span class="operator">&gt;</span>，提取结束，不包括d。</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> Index <span class="keyword">Last</span> Key</span><br><span class="line">Index <span class="keyword">Last</span> Key用于确定索引查询的终止范围。提取规则：从索引的第一个键值开始，检查其在<span class="keyword">where</span>条件中是否存在，若存在并且条件是<span class="operator">=</span>、<span class="operator">&lt;=</span>，则将对应条件加入到Index <span class="keyword">Last</span> Key中，继续提取索引的下一个键值，使用同样的提取规则；若存在并且条件是 <span class="operator">&lt;</span> ，则将条件加入到Index <span class="keyword">Last</span> Key中，同时终止提取；若不存在，同样终止Index <span class="keyword">Last</span> Key的提取。针对上面的<span class="keyword">SQL</span>，应用这个提取规则，提取出来的Index <span class="keyword">Last</span> Key为(b <span class="operator">&lt;</span> <span class="number">8</span>)，由于是 <span class="operator">&lt;</span> 符号，因此提取b之后结束。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Index <span class="keyword">Filter</span></span><br><span class="line">在完成Index Key的提取之后，我们根据<span class="keyword">where</span>条件固定了索引的查询范围，但是此范围中的项，并不都是满足查询条件的项。在上面的<span class="keyword">SQL</span>用例中，(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)，(<span class="number">6</span>,<span class="number">4</span>,<span class="number">4</span>)均属于范围中，但是又均不满足<span class="keyword">SQL</span>的查询条件。</span><br><span class="line"></span><br><span class="line">Index <span class="keyword">Filter</span>的提取规则：同样从索引列的第一列开始，检查其在<span class="keyword">where</span>条件中是否存在：若存在并且<span class="keyword">where</span>条件仅为 <span class="operator">=</span>，则跳过第一列继续检查索引下一列，下一索引列采取与索引第一列同样的提取规则；若<span class="keyword">where</span>条件为 <span class="operator">&gt;=</span>、<span class="operator">&gt;</span>、<span class="operator">&lt;</span>、<span class="operator">&lt;=</span> 其中的几种，则跳过索引第一列，将其余<span class="keyword">where</span>条件中索引相关列全部加入到Index <span class="keyword">Filter</span>之中；若索引第一列的<span class="keyword">where</span>条件包含 <span class="operator">=</span>、<span class="operator">&gt;=</span>、<span class="operator">&gt;</span>、<span class="operator">&lt;</span>、<span class="operator">&lt;=</span> 之外的条件，则将此条件以及其余<span class="keyword">where</span>条件中索引相关列全部加入到Index <span class="keyword">Filter</span>之中；若第一列不包含查询条件，则将所有索引相关条件均加入到Index <span class="keyword">Filter</span>之中。</span><br><span class="line"></span><br><span class="line">针对上面的用例<span class="keyword">SQL</span>，索引第一列只包含 <span class="operator">&gt;=</span>、<span class="operator">&lt;</span> 两个条件，因此第一列可跳过，将余下的c、d两列加入到Index <span class="keyword">Filter</span>中。因此获得的Index <span class="keyword">Filter</span>为 c <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">and</span> d <span class="operator">!=</span> <span class="number">4</span> 。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="keyword">Table</span> <span class="keyword">Filter</span></span><br><span class="line"><span class="keyword">Table</span> <span class="keyword">Filter</span>是最简单也是提取最为方便的。提取规则：所有不属于索引列的查询条件，均归为<span class="keyword">Table</span> <span class="keyword">Filter</span>之中。同样，针对上面的用例<span class="keyword">SQL</span>，<span class="keyword">Table</span> <span class="keyword">Filter</span>就为 e <span class="operator">!=</span> <span class="string">&#x27;a&#x27;</span>。</span><br></pre></td></tr></table></figure>

<h3 id="Index-Key-Index-Filter-Table-Filter小结"><a href="#Index-Key-Index-Filter-Table-Filter小结" class="headerlink" title="Index Key  Index Filter  Table Filter小结"></a>Index Key  Index Filter  Table Filter小结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>语句中的<span class="keyword">where</span>条件，使用以上的提取规则，最终都会被提取到Index Key (<span class="keyword">First</span> Key <span class="operator">&amp;</span> <span class="keyword">Last</span> Key)，Index <span class="keyword">Filter</span>与<span class="keyword">Table</span> <span class="keyword">Filter</span>之中。</span><br><span class="line"></span><br><span class="line">Index <span class="keyword">First</span> Key，只是用来定位索引的起始范围，因此只在索引第一次<span class="keyword">Search</span> Path(沿着索引B<span class="operator">+</span>树的根节点一直遍历，到索引正确的叶节点位置)时使用，一次判断即可；</span><br><span class="line"></span><br><span class="line">Index <span class="keyword">Last</span> Key，用来定位索引的终止范围，因此对于起始范围之后读到的每一条索引记录，均需要判断是否已经超过了Index <span class="keyword">Last</span> Key的范围，若超过，则当前查询结束；</span><br><span class="line"></span><br><span class="line">Index <span class="keyword">Filter</span>，用于过滤索引查询范围中不满足查询条件的记录，因此对于索引范围中的每一条记录，均需要与Index <span class="keyword">Filter</span>进行对比，若不满足Index <span class="keyword">Filter</span>则直接丢弃，继续读取索引下一条记录；</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> <span class="keyword">Filter</span>，则是最后一道<span class="keyword">where</span>条件的防线，用于过滤通过前面索引的层层考验的记录，此时的记录已经满足了Index <span class="keyword">First</span> Key与Index <span class="keyword">Last</span> Key构成的范围，并且满足Index <span class="keyword">Filter</span>的条件，回表读取了完整的记录，判断完整记录是否满足<span class="keyword">Table</span> <span class="keyword">Filter</span>中的查询条件，同样的，若不满足，跳过当前记录，继续读取索引的下一条记录，若满足，则返回记录，此记录满足了<span class="keyword">where</span>的所有条件，可以返回给用户。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- MySQL 5.6中引入的ICP，究竟是将什么Push Down到索引层面进行过滤呢？</span></span><br><span class="line">答案是Index <span class="keyword">Filter</span>。在MySQL <span class="number">5.6</span>之前，并不区分Index <span class="keyword">Filter</span>与<span class="keyword">Table</span> <span class="keyword">Filter</span>，统统将Index <span class="keyword">First</span> Key与Index <span class="keyword">Last</span> Key范围内的索引记录，回表读取完整记录，然后返回给MySQL Server层进行过滤。在MySQL <span class="number">5.6</span>之后，Index <span class="keyword">Filter</span>与<span class="keyword">Table</span> <span class="keyword">Filter</span>分离，Index <span class="keyword">Filter</span>下降到InnoDB的索引层面进行过滤，减少了回表与返回MySQL Server层的记录交互开销，提高了<span class="keyword">SQL</span>的执行效率。</span><br></pre></td></tr></table></figure>


<h2 id="第27篇：MySQL如何确保数据不丢失？"><a href="#第27篇：MySQL如何确保数据不丢失？" class="headerlink" title="第27篇：MySQL如何确保数据不丢失？"></a>第27篇：MySQL如何确保数据不丢失？</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">预备知识</span><br><span class="line"><span class="number">1.</span> mysql内部是使用b<span class="operator">+</span>树的结构将数据存储在磁盘中，b<span class="operator">+</span>树中节点对应mysql中的页，mysql和磁盘交互的最小单位为页，页默认情况下为<span class="number">16</span>kb，表中的数据记录存储在b<span class="operator">+</span>树的叶子节点中，当我们需要修改、删除、插入数据时，都需要按照页来对磁盘进行操作。</span><br><span class="line"><span class="number">2.</span> 磁盘顺序写比随机写效率要高很多，通常我们使用的是机械硬盘，机械硬盘写数据时涉及磁盘寻道、磁盘旋转寻址、数据写入的时间，耗时比较长，如果是顺序写，省去了寻道和磁盘旋转的时间，效率会高几个数量级。</span><br><span class="line"><span class="number">3.</span> 内存中数据读写操作比磁盘中数据读写操作速度高好多个数量级。</span><br></pre></td></tr></table></figure>
<h3 id="MySQL确保数据不丢失原理"><a href="#MySQL确保数据不丢失原理" class="headerlink" title="MySQL确保数据不丢失原理"></a>MySQL确保数据不丢失原理</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction; </span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;路人甲Java&#x27;</span> <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">666</span>; </span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">按照正常的思路，通常过程如下：</span><br><span class="line"><span class="number">1.</span> 找到user_id<span class="operator">=</span><span class="number">666</span>这条记录所在的页p1，将p1从磁盘加载到内存中</span><br><span class="line"><span class="number">2.</span> 在内存中对p1中user_id<span class="operator">=</span><span class="number">666</span>这条记录信息进行修改</span><br><span class="line"><span class="number">3.</span> mysql收到<span class="keyword">commit</span>指令</span><br><span class="line"><span class="number">4.</span> 将p1页写入磁盘</span><br><span class="line"><span class="number">5.</span> 给客户端返回更新成功</span><br><span class="line">上面过程可以确保数据被持久化到了磁盘中。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">我们将需求改一下，如下：</span><br><span class="line"><span class="keyword">start</span> transaction; </span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;路人甲Java&#x27;</span> <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">666</span>; </span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javacode2018&#x27;</span> <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">888</span>; </span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">来看一下处理过程：</span><br><span class="line"><span class="number">1.</span> 找到user_id<span class="operator">=</span><span class="number">666</span>这条记录所在的页p1，将p1从磁盘加载到内存中</span><br><span class="line"><span class="number">2.</span> 在内存中对p1中user_id<span class="operator">=</span><span class="number">666</span>这条记录信息进行修改</span><br><span class="line"><span class="number">3.</span> 找到user_id<span class="operator">=</span><span class="number">888</span>这条记录所在的页p2，将p2从磁盘加载到内存中</span><br><span class="line"><span class="number">4.</span> 在内存中对p2中user_id<span class="operator">=</span><span class="number">888</span>这条记录信息进行修改</span><br><span class="line"><span class="number">5.</span> mysql收到<span class="keyword">commit</span>指令</span><br><span class="line"><span class="number">6.</span> 将p1页写入磁盘</span><br><span class="line"><span class="number">7.</span> 将p2页写入磁盘</span><br><span class="line"><span class="number">8.</span> 给客户端返回更新成功</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--上面过程我们看有什么问题</span></span><br><span class="line"><span class="comment">--1. 假如6成功之后，mysql宕机了，此时p1修改已写入磁盘，但是p2的修改还未写入磁盘，最终导致user_id=666的记录被修改成功了，user_id=888的数据被修改失败了，数据是有问题的</span></span><br><span class="line"><span class="comment">--2. 上面p1和p2可能位于磁盘的不同位置，涉及到磁盘随机写的问题，导致整个过程耗时也比较长</span></span><br><span class="line">上面问题可以归纳为<span class="number">2</span>点：无法确保数据可靠性、随机写导致耗时比较长。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 关于上面问题，我们看一下mysql是如何优化的，mysql内部引入了一个redo log，这是一个文件，对于上面2条更新操作，mysql实现如下：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- mysql内部有个redo log buffer，是内存中一块区域，我们将其理解为数组结构，向redo log文件中写数据时，会先将内容写入redo log buffer中，后续会将这个buffer中的内容写入磁盘中的redo log文件，这个redo log buffer是整个mysql中所有连接共享的内存区域，可以被重复使用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--1. mysql收到start transaction后，生成一个全局的事务编号trx_id，比如trx_id=10</span></span><br><span class="line"><span class="comment">--2. user_id=666这个记录我们就叫r1，user_id=888这个记录叫r2</span></span><br><span class="line"><span class="comment">--3. 找到r1记录所在的数据页p1，将其从磁盘中加载到内存中</span></span><br><span class="line"><span class="comment">--4. 在内存中找到r1在p1中的位置，然后对p1进行修改（这个过程可以描述为：将p1中的pos_start1到pos_start2位置的值改为v1），这个过程我们记为rb1(内部包含事务编号trx_id)，将rb1放入redo log buffer数组中，此时p1的信息在内存中被修改了，和磁盘中p1的数据不一样了</span></span><br><span class="line"><span class="comment">--5. 找到r2记录所在的数据页p2，将其从磁盘中加载到内存中</span></span><br><span class="line"><span class="comment">--6. 在内存中找到r2在p2中的位置，然后对p2进行修改（这个过程可以描述为：将p2中的pos_start1到pos_start2位置的值改为v2），这个过程我们记为rb2(内部包含事务编号trx_id)，将rb2放入redo log buffer数组中，此时p2的信息在内存中被修改了，和磁盘中p2的数据不一样了</span></span><br><span class="line"><span class="comment">--7. 此时redo log buffer数组中有2条记录[rb1,rb2]</span></span><br><span class="line"><span class="comment">--8. mysql收到commit指令</span></span><br><span class="line"><span class="comment">--9. 将redo log buffer数组中内容写入到redo log文件中，写入的内容：</span></span><br><span class="line">	<span class="number">1.</span><span class="keyword">start</span> trx<span class="operator">=</span><span class="number">10</span>; </span><br><span class="line">	<span class="number">2.</span>写入rb1 </span><br><span class="line">	<span class="number">3.</span>写入rb2 </span><br><span class="line">	<span class="number">4.</span><span class="keyword">end</span> trx<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="comment">--10. 返回给客户端更新成功</span></span><br><span class="line"></span><br><span class="line">上面过程执行完毕之后，数据是这样的：</span><br><span class="line"><span class="number">1.</span> 内存中p1、p2页被修改了，还未同步到磁盘中，此时内存中数据页和磁盘中数据页是不一致的，此时内存中数据页我们称为脏页</span><br><span class="line"><span class="number">2.</span> 对p1、p2页修改被持久到磁盘中的redo log文件中了，不会丢失认真看一下上面过程中第<span class="number">9</span>步骤，一个成功的事务记录在redo log中是有<span class="keyword">start</span>和<span class="keyword">end</span>的，redo log文件中如果一个trx_id对应<span class="keyword">start</span>和<span class="keyword">end</span>成对出现，说明这个事务执行成功了，如果只有<span class="keyword">start</span>没有<span class="keyword">end</span>说明是有问题的。</span><br></pre></td></tr></table></figure>
<h3 id="修改何时同步到磁盘中？"><a href="#修改何时同步到磁盘中？" class="headerlink" title="修改何时同步到磁盘中？"></a>修改何时同步到磁盘中？</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">redo log是mysql中所有连接共享的文件，对mysql执行<span class="keyword">insert</span>、<span class="keyword">delete</span>和上面<span class="keyword">update</span>的过程类似，都是先在内存中修改页数据，然后将修改过程持久化到redo log所在的磁盘文件中，然后返回成功。</span><br><span class="line"></span><br><span class="line">redo log文件是有大小的，需要重复利用的，当redo log满了，或者系统比较闲的时候，会对redo log文件中的内容进行处理，处理过程如下：</span><br><span class="line"><span class="number">1.</span> 读取redo log信息，读取一个完整的trx_id对应的信息，然后进行处理</span><br><span class="line"><span class="number">2.</span> 比如读取到了trx_id<span class="operator">=</span><span class="number">10</span>的完整内容，包含了<span class="keyword">start</span> <span class="keyword">end</span>，表示这个事务操作是成功的，然后继续向下	</span><br><span class="line"><span class="number">3.</span> 判断p1在内存中是否存在，如果存在，则直接将p1信息写到p1所在的磁盘中；如果p1在内存中不存在，则将p1从磁盘加载到内存，通过redo log中的信息在内存中对p1进行修改，然后将其写到磁盘中</span><br><span class="line"><span class="comment">--上面的update之后，p1在内存中是存在的，并且p1是已经被修改过的，可以直接刷新到磁盘中。</span></span><br><span class="line"><span class="comment">--如果上面的update之后，mysql宕机，然后重启了，p1在内存中是不存在的，此时系统会读取redo log文件中的内容进行恢复处理。</span></span><br><span class="line"><span class="number">4.</span> 将redo log文件中trx_id<span class="operator">=</span><span class="number">10</span>的占有的空间标记为已处理，这块空间会被释放出来可以重复利用了</span><br><span class="line"><span class="number">5.</span> 如果第<span class="number">2</span>步读取到的trx_id对应的内容没有<span class="keyword">end</span>，表示这个事务执行到一半失败了，此时这个记录是无效的，可以直接跳过不用处理</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">上面的过程做到了：数据最后一定会被持久化到磁盘中的页中，不会丢失，做到了可靠性。</span><br><span class="line"></span><br><span class="line">并且内部采用了先把页的修改操作先在内存中进行操作，然后再写入了redo log文件，此处redo log是按顺序写的，使用到了io的顺序写，效率会非常高。</span><br><span class="line"></span><br><span class="line">对于将数据页的变更持久化到磁盘中，此处又采用了异步的方式去读取redo log的内容，然后将页的变更刷到磁盘中，这块的设计也非常好，异步刷盘操作！</span><br><span class="line"></span><br><span class="line">但是有一种情况，当一个事务<span class="keyword">commit</span>的时候，刚好发现redo log不够了，此时会先停下来处理redo log中的内容，然后在进行后续的操作，遇到这种情况时，整个事务响应会稍微慢一些。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql中还有一个binlog，在事务操作过程中也会写binlog。</span><br><span class="line"></span><br><span class="line">先说一下binlog的作用，binlog中详细记录了对数据库做了什么操作，算是对数据库操作的一个流水，这个流水也是相当重要的，主从同步就是使用binlog来实现的，从库读取主库中binlog的信息，然后在从库中执行，最后，从库就和主库信息保持同步一致了。</span><br><span class="line"></span><br><span class="line">我们来看一下系统如何确保 redo log 和 binlog 一致性的，都写入成功的。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 还是以update为例：</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;路人甲Java&#x27;</span> <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">666</span>; </span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javacode2018&#x27;</span> <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">888</span>; </span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">一个事务中可能有很多操作，这些操作会写很多binlog日志，为了加快写的速度，mysql先把整个过程中产生的binlog日志先写到内存中的binlog cache缓存中，后面再将binlog cache中内容一次性持久化到binlog文件中。</span><br><span class="line"></span><br><span class="line">一个事务的 binlog 是不能被拆开的，因此不论这个事务多大，也要确保一次性写入。这就涉及到了 binlog cache 的保存问题。系统给 binlog cache 分配了一片内存，每个线程一个，参数 binlog_cache_size 用于控制单个线程内 binlog cache 所占内存的大小。如果超过了这个参数规定的大小，就要暂存到磁盘。</span><br><span class="line"></span><br><span class="line">过程如下：</span><br><span class="line"><span class="number">1.</span> mysql收到<span class="keyword">start</span> transaction后，生成一个全局的事务编号trx_id，比如trx_id<span class="operator">=</span><span class="number">10</span></span><br><span class="line"><span class="number">2.</span> user_id<span class="operator">=</span><span class="number">666</span>这个记录我们就叫r1，user_id<span class="operator">=</span><span class="number">888</span>这个记录叫r2</span><br><span class="line"><span class="number">3.</span> 找到r1记录所在的数据页p1，将其从磁盘中加载到内存中</span><br><span class="line"><span class="number">4.</span> 在内存中对p1进行修改</span><br><span class="line"><span class="number">5.</span> 将p1修改操作记录到redo log buffer中 </span><br><span class="line"><span class="number">6.</span> 将p1修改记录流水记录到binlog cache中</span><br><span class="line"><span class="number">7.</span> 找到r2记录所在的数据页p2，将其从磁盘中加载到内存中</span><br><span class="line"><span class="number">8.</span> 在内存中对p2进行修改</span><br><span class="line"><span class="number">9.</span> 将p2修改操作记录到redo log buffer中</span><br><span class="line"><span class="number">10.</span> 将p2修改记录流水记录到binlog cache中</span><br><span class="line"><span class="number">11.</span> mysql收到<span class="keyword">commit</span>指令</span><br><span class="line"><span class="number">12.</span> 将redo log buffer携带trx_id<span class="operator">=</span><span class="number">10</span>写入到redo log文件，持久化到磁盘，这步操作叫做redo log <span class="keyword">prepare</span>，</span><br><span class="line">	内容如下:</span><br><span class="line">	<span class="number">1.</span><span class="keyword">start</span> trx<span class="operator">=</span><span class="number">10</span>; </span><br><span class="line">	<span class="number">2.</span>写入rb1 </span><br><span class="line">	<span class="number">3.</span>写入rb2 </span><br><span class="line">	<span class="number">4.</span><span class="keyword">prepare</span> trx<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">	注意上面是<span class="keyword">prepare</span>了，不是之前说的<span class="keyword">end</span>了。</span><br><span class="line"><span class="number">13.</span> 将binlog cache携带trx_id<span class="operator">=</span><span class="number">10</span>写入到binlog文件，持久化到磁盘</span><br><span class="line"><span class="number">14.</span> 向redo log中写入一条数据： <span class="keyword">end</span> trx<span class="operator">=</span><span class="number">10</span>; 表示redo log中这个事务完成了，这步操作叫做redo log <span class="keyword">commit</span></span><br><span class="line"><span class="number">15.</span> 返回给客户端更新成功	</span><br><span class="line"> </span><br><span class="line"><span class="comment">--我们来分析一下上面过程可能出现的一些情况：</span></span><br><span class="line"><span class="comment">--1. 步骤10操作完成后，mysql宕机了</span></span><br><span class="line">宕机之前，所有修改都位于内存中，mysql重启之后，内存修改还未同步到磁盘，对磁盘数据没有影响，所以无影响。</span><br><span class="line"></span><br><span class="line"><span class="comment">--2. 步骤12执行完毕之后，mysql宕机了</span></span><br><span class="line">此时redo log <span class="keyword">prepare</span>过程是写入redo log文件了，但是binlog写入失败了，此时mysql重启之后会读取redo log进行恢复处理，查询到trx_id<span class="operator">=</span><span class="number">10</span>的记录是<span class="keyword">prepare</span>状态，会去binlog中查找trx_id<span class="operator">=</span><span class="number">10</span>的操作在binlog中是否存在，如果不存在，说明binlog写入失败了，此时可以将此操作回滚</span><br><span class="line"></span><br><span class="line"><span class="comment">--3. 步骤13执行完毕之后，mysql宕机</span></span><br><span class="line">此时redo log <span class="keyword">prepare</span>过程是写入redo log文件了，但是binlog写入失败了，此时mysql重启之后会读取redo log进行恢复处理，查询到trx_id<span class="operator">=</span><span class="number">10</span>的记录是<span class="keyword">prepare</span>状态，会去binlog中查找trx_id<span class="operator">=</span><span class="number">10</span>的操作在binlog是存在的，然后接着执行上面的步骤<span class="number">14</span>和<span class="number">15.</span></span><br></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 日志先行，io顺序写，异步操作，做到了高效操作</span></span><br><span class="line">对数据页，先在内存中修改，然后使用io顺序写的方式持久化到redo log文件；然后异步去处理redo log，将数据页的修改持久化到磁盘中，效率非常高，整个过程，其实就是 MySQL 里经常说到的 WAL 技术，WAL 的全称是 Write<span class="operator">-</span>Ahead Logging，它的关键点就是先写日志，再写磁盘。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 两阶段提交确保redo log和binlog一致性</span></span><br><span class="line">为了确保redo log和binlog一致性，此处使用了二阶段提交技术，redo log 和binlog的写分了<span class="number">3</span>步走：</span><br><span class="line"><span class="number">1.</span> 携带trx_id，redo log <span class="keyword">prepare</span>到磁盘</span><br><span class="line"><span class="number">2.</span> 携带trx_id，binlog写入磁盘</span><br><span class="line"><span class="number">3.</span> 携带trx_id，redo log <span class="keyword">commit</span>到磁盘</span><br><span class="line">上面<span class="number">3</span>步骤，可以确保同一个trx_id关联的redo log 和binlog的可靠性。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
