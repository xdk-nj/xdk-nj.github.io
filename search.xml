<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6快速入门</title>
    <url>/2021/01/10/ES6%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="ES6快速入门"><a href="#ES6快速入门" class="headerlink" title="ES6快速入门"></a>ES6快速入门</h1><p>具体使用参考  <a href="https://es6.ruanyifeng.com/#docs/let">ES6参考文档</a></p>
<h2 id="1-let-和-const"><a href="#1-let-和-const" class="headerlink" title="1. let 和 const"></a>1. let 和 const</h2><h3 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h3><p><strong>基本用法</strong></p>
<p>ES6 新增了  <code>let </code>  命令，用来声明变量。它的用法类似于  <code>var</code>，但是所声明的变量，只在  <code>let</code>  命令所在的代码块内有效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p><strong>不存在变量提升</strong></p>
<p>ES6以前 使用 var 关键字声明变量，会有变量提升。let 不会有变量提升。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><strong>暂时性死区</strong></p>
<p>只要块级作用域内存在  <code>let</code>  命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">&#x27;abc&#x27;</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，存在全局变量  <code>tmp</code>，但是块级作用域内<code>let</code>又声明了一个局部变量<code>tmp</code>，导致后者绑定这个块级作用域，所以在<code>let</code>声明变量前，对<code>tmp</code>赋值会报错。</p>
<p><strong>不允许重复声明</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>const 和 let 二者都是块级作用域。 {} 内的代码块即为 let  和  const 的作用域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;  <span class="comment">// 变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</span></span><br><span class="line">   a[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   	  <span class="built_in">console</span>.log(i);</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123; <span class="comment">// i 不会泄露</span></span><br><span class="line">   a[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   	  <span class="built_in">console</span>.log(i);</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>


<h3 id="const-命令"><a href="#const-命令" class="headerlink" title="const 命令"></a>const 命令</h3><p><code>const </code> 声明一个只读的常量。一旦声明，常量的值就不能改变。</p>
<p><code>const</code>  一旦声明变量，就必须立即初始化，不能留到以后赋值。</p>
<p><code>const  </code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p>
<p><code>const</code>  实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>
<h2 id="2-解构赋值"><a href="#2-解构赋值" class="headerlink" title="2. 解构赋值"></a>2. 解构赋值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    name: <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = people</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">const</span> color = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> [first, second] = color</span><br><span class="line"><span class="built_in">console</span>.log(first) <span class="comment">// red</span></span><br><span class="line"><span class="built_in">console</span>.log(second) <span class="comment">// blue</span></span><br></pre></td></tr></table></figure>


<h2 id="3-字符串的扩展"><a href="#3-字符串的扩展" class="headerlink" title="3. 字符串的扩展"></a>3. 字符串的扩展</h2><p><strong>字符串格式化</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> e6 = <span class="string">&#x27;java&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;e6&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>
<p><strong>多行字符串拼接</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;hello world&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br></pre></td></tr></table></figure>
<p><a href="https://es6.ruanyifeng.com/#docs/string-methods">字符串新增方法</a></p>
<h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h2><p><strong>ES6为参数提供了默认值。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params">num = <span class="number">200</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;</span><br><span class="line">action() <span class="comment">//200</span></span><br><span class="line">action(<span class="number">300</span>) <span class="comment">//300</span></span><br></pre></td></tr></table></figure>
<p><strong>箭头函数</strong></p>
<p>特点:</p>
<ul>
<li>不需要function关键字来创建函数</li>
<li>省略return关键字</li>
<li>继承当前上下文的 this 关键字</li>
</ul>
<p>函数有且仅有一个参数的时候，是可以省略括号。函数返回有且仅有一个表达式的时候可以省略{}。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fullName = name + age</span><br><span class="line">    <span class="keyword">return</span> fullName</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(p(<span class="string">&quot;java&quot;</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>


<h2 id="5-对象的拓展"><a href="#5-对象的拓展" class="headerlink" title="5. 对象的拓展"></a>5. 对象的拓展</h2><p><strong>对象初始化简写</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 键值对重名，ES6可以简写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(p(<span class="string">&quot;java&quot;</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>
<p><strong>为对象字面量方法赋值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = &#123;</span><br><span class="line">    name: <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    getName () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">p.getName()</span><br></pre></td></tr></table></figure>
<p><strong>浅复制</strong></p>
<p>ES6 对象提供了 <code>Object.assign()  </code>  这个方法来实现浅复制。Object.assign() 可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为 {}。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = &#123;</span><br><span class="line">    name: <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    getName () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, p)</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure>


<h2 id="6-模块化"><a href="#6-模块化" class="headerlink" title="6. 模块化"></a>6. 模块化</h2><h3 id="CommonJs-require的使用"><a href="#CommonJs-require的使用" class="headerlink" title="CommonJs require的使用"></a>CommonJs require的使用</h3><ul>
<li>a.js </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello module a&quot;</span>)</span><br><span class="line"><span class="built_in">exports</span>.x = <span class="number">1</span>  <span class="comment">// 向外部暴露变量和方法</span></span><br></pre></td></tr></table></figure>
<ul>
<li>b.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="built_in">require</span>(<span class="string">&quot;./a.js&quot;</span>); <span class="comment">// 引入模块a</span></span><br><span class="line"><span class="built_in">console</span>.log(A.x)</span><br></pre></td></tr></table></figure>
<p>node 中的全局变量为 global，全局中创建的变量作为 global 的属性保存，全局中创建的方法作为 global 的方法保存。</p>
<h3 id="ES6模块化-import-和-export"><a href="#ES6模块化-import-和-export" class="headerlink" title="ES6模块化 import 和 export"></a>ES6模块化 import 和 export</h3><h4 id="ES6模块化的基本使用"><a href="#ES6模块化的基本使用" class="headerlink" title="ES6模块化的基本使用"></a>ES6模块化的基本使用</h4><ul>
<li>a.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&quot;java&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>b.js</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通用的引入方式</span></span><br><span class="line"><span class="keyword">import</span> * as A from <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line">A.hello()</span><br></pre></td></tr></table></figure>
<h4 id="ES6-的几种暴露方式"><a href="#ES6-的几种暴露方式" class="headerlink" title="ES6 的几种暴露方式"></a>ES6 的几种暴露方式</h4><ul>
<li> 统一暴露</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;java&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;name, hello&#125;  </span><br></pre></td></tr></table></figure>
<ul>
<li>默认暴露</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name : <span class="string">&quot;java&quot;</span>,</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello es6&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这种引入方式在调用是要加 default，例如 A.default.hello()</span></span><br><span class="line"><span class="comment">// 一个文件里，有且只能有一个export default</span></span><br></pre></td></tr></table></figure>
<h4 id="ES6-的几种引入方式"><a href="#ES6-的几种引入方式" class="headerlink" title="ES6 的几种引入方式"></a>ES6 的几种引入方式</h4><ul>
<li>解构赋值形式1</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&quot;java&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, hello&#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br></pre></td></tr></table></figure>
<ul>
<li>解构赋值形式2</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name : <span class="string">&quot;java&quot;</span>,</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello es6&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> A&#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(A.name)</span><br><span class="line">A.hello()</span><br></pre></td></tr></table></figure>
<ul>
<li>简便形式（针对默认暴露）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(A.name)</span><br><span class="line">A.hello()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建博客</title>
    <url>/2021/01/10/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Hexo搭建博客"><a href="#Hexo搭建博客" class="headerlink" title="Hexo搭建博客"></a>Hexo搭建博客</h1><ol>
<li>Hexo 的安装参考 <a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li>
<li>安装 Next 主题，参考<a href="http://theme-next.iissnan.com/getting-started.html">Next主题官方文档</a></li>
</ol>
<p>基本命令：</p>
<ul>
<li>新建一篇博客</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>生成</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<ul>
<li>清除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<ul>
<li>部署</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<ul>
<li>本地启动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s -p &lt;port&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>前端基础</title>
    <url>/2021/01/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><p><a href="https://www.w3school.com.cn/h.asp">HTML参考文档</a></p>
<p><a href="https://www.w3school.com.cn/h.asp">CSS参考文档</a></p>
<p><a href="https://www.w3school.com.cn/js/index.asp">JavaScript参考文档</a></p>
<p><a href="https://jquery.cuishifeng.cn/index.html">jQuery参考文档</a></p>
<p><strong>CSS选择器</strong></p>
<ul>
<li><p>标签选择器</p>
</li>
<li><p>id选择器</p>
</li>
<li><p>类选择器</p>
</li>
<li><p>后代选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.d</span> <span class="selector-tag">p</span> &#123;&#125; &lt;!<span class="selector-tag">--</span> <span class="selector-tag">class</span> 为 <span class="selector-tag">d</span>，后代为 <span class="selector-tag">p</span> 标签 <span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>交集选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.p2</span> &#123;&#125; &lt;!<span class="selector-tag">--</span> 中间没有空格(<span class="selector-tag">p</span><span class="selector-class">.p2</span> 又叫 <span class="selector-tag">p</span> 标签 又叫<span class="selector-tag">p2</span>) <span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>并集选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.d4</span> <span class="selector-tag">h1</span>,<span class="selector-tag">li</span> &#123;&#125; &lt;!<span class="selector-tag">--</span> 中间用逗号隔开 <span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>通配符  (*)</p>
</li>
</ul>
<p><strong>盒模型</strong></p>
<p>基本属性</p>
<ul>
<li>width：指的是内容区域的宽度</li>
<li>height：值得是内容区域的高度</li>
<li>padding：内边距</li>
<li>border：边框</li>
<li>margin：外边距</li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
      </tags>
  </entry>
</search>
